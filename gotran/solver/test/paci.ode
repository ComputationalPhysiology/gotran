# 

# gotran file generated by cellml2gotran from paci_hyttinen_aaltosetala_severi_ventricularVersion.cellml

parameters("Stim mode",
           stim_flag = 1,
           i_stim_Start = ScalarParam(0.0, unit="s"),
           i_stim_End = ScalarParam(800.0, unit="s"),
           i_stim_Amplitude = ScalarParam(5.5e-10, unit="A"),
           i_stim_frequency = ScalarParam(60.0, unit="s**-1"),
           i_stim_PulseDuration = ScalarParam(0.005, unit="s"))

parameters("Current blockers",
           TTX_3uM = 0,
           TTX_10uM = 0,
           TTX_30uM = 0,
           E4031_30nM = 0,
           E4031_100nM = 0,
           nifed_3nM = 0,
           nifed_10nM = 0,
           nifed_30nM = 0,
           nifed_100nM = 0,
           Chromanol_iKs30 = 0,
           Chromanol_iKs50 = 0,
           Chromanol_iKs70 = 0,
           Chromanol_iKs90 = 0)


parameters("Adjustment factors",
           lambda_K1 = 0.0,
	   lambda_to = 0.0,
	   lambda_Kr = 0.0,
	   lambda_Ks = 0.0,
	   lambda_CaL = 0.0,
	   lambda_NaK = 0.0,
	   lambda_Na = 0.0,
	   lambda_NaCa = 0.0,
	   lambda_PCa = 0.0,
	   lambda_f = 0.0,
	   lambda_b_Na = 0.0,
	   lambda_b_Ca = 0.0)

parameters("Electric potentials",
           PkNa = 0.03)

parameters("i_Na",
           g_Na = ScalarParam(3671.2302, unit="S*F**-1"))

states("i_Na", "m gate",
       m = 0.102953468725004)

states("i_Na", "h gate",
       h = 0.786926637881461)

states("i_Na", "j gate",
       j = 0.253943221774722)

parameters("i_CaL",
           g_CaL = ScalarParam(8.635702e-05, unit="m**3*F**-1*s**-1"))

states("i_CaL", "d gate",
       d = 8.96088425225182e-5)

states("i_CaL", "F1 gate",
       f1 = 0.970411811263976)

states("i_CaL", "F2 gate",
       f2 = 0.999965815466749)

states("i_CaL", "FCa gate",
       fCa = 0.998925296531804)

parameters("i_CaL", "FCa gate",
           tau_fCa = ScalarParam(0.002, unit="s"))

parameters("i_Kr",
           g_Kr = ScalarParam(29.8667, unit="S*F**-1"))

states("i_Kr", "Xr1 gate",
       Xr1 = 0.00778547011240132)

parameters("i_Kr", "Xr1 gate",
           L0 = 0.025,
           Q = 2.3)

states("i_Kr", "Xr2 gate",
       Xr2 = 0.432162576531617)

parameters("i_Ks",
           g_Ks = ScalarParam(2.041, unit="S*F**-1"))

states("i_Ks", "Xs gate",
       Xs = 0.0322944866983666)

parameters("i_K1",
           g_K1 = ScalarParam(28.1492, unit="S*F**-1"))

parameters("i_f",
           g_f = ScalarParam(30.10312, unit="S*F**-1"),
           E_f = ScalarParam(-0.017, unit="V"))

states("i_f", "Xf gate",
       Xf = 0.100615100568753)

parameters("i_b Na",
           g_b_Na = ScalarParam(0.9, unit="S*F**-1"))

parameters("i_b Ca",
           g_b_Ca = ScalarParam(0.69264, unit="S*F**-1"))

parameters("i_NaK",
           Km_K = ScalarParam(1.0, unit="mM"),
           Km_Na = ScalarParam(40.0, unit="mM"),
           PNaK = ScalarParam(1.841424, unit="A*F**-1"))

parameters("i_NaCa",
           kNaCa = ScalarParam(4900.0, unit="A*F**-1"),
           alpha = 2.8571432,
           gamma = 0.35,
           Ksat = 0.1,
           KmCa = ScalarParam(1.38, unit="mM"),
           KmNai = ScalarParam(87.5, unit="mM"))

parameters("i_PCa",
           g_PCa = ScalarParam(0.4125, unit="A*F**-1"),
           KPCa = ScalarParam(0.0005, unit="mM"))

parameters("i_to",
           g_to = ScalarParam(29.9038, unit="S*F**-1"))

states("i_to", "q gate",
       q = 0.839295925773219)

states("i_to", "r gate",
       r = 0.00573289893326379)

parameters("Model parameters",
           Cao = ScalarParam(1.8, unit="mM"),
           Nao = ScalarParam(151.0, unit="mM"),
           Ki = ScalarParam(150.0, unit="mM"),
           Ko = ScalarParam(5.4, unit="mM"),
           Cm = ScalarParam(9.87109e-11, unit="F"),
           Vc = ScalarParam(8800.0, unit="um**3"),
           V_SR = ScalarParam(583.73, unit="um**3"),
           R = ScalarParam(8.314472, unit="J*mole**-1*K**-1"),
           T = ScalarParam(310.0, unit="K"),
           F = ScalarParam(96485.3415, unit="C*mole**-1"))

states("Sodium dynamics",
       Nai = ScalarParam(10.9248496212, unit="mM"))

states("Calcium dynamics",
       g = 0.999999981028517,
       Cai = ScalarParam(1.8077397414e-05, unit="mM"),
       Ca_SR = ScalarParam(-0.273423475193, unit="mM"))

parameters("Calcium dynamics",
           a_rel = ScalarParam(16.464, unit="mM*s**-1"),
           b_rel = ScalarParam(0.25, unit="mM"),
           c_rel = ScalarParam(8.232, unit="mM*s**-1"),
           tau_g = ScalarParam(0.002, unit="s"),
           Kup = ScalarParam(0.00025, unit="mM"),
           Buf_C = ScalarParam(0.25, unit="mM"),
           Buf_SR = ScalarParam(10.0, unit="mM"),
           Kbuf_C = ScalarParam(0.001, unit="mM"),
           Kbuf_SR = ScalarParam(0.3, unit="mM"),
           VmaxUp = ScalarParam(0.56064, unit="mM*s**-1"),
           V_leak = ScalarParam(0.00044444, unit="s**-1"))

states("Membrane",
       Vm = ScalarParam(-0.0743340057624, unit="V"))

expressions("Stim mode")
i_stim_Period = 60.0/i_stim_frequency # s
i_stim = Conditional(And(Ge(time, i_stim_Start), And(Le(time, i_stim_End), Le(time - i_stim_Start - floor((time - i_stim_Start)/i_stim_Period)*i_stim_Period, i_stim_PulseDuration), ), ), stim_flag*i_stim_Amplitude/Cm, 0.0) # A*F**-1

expressions("Electric potentials")
E_Na = R*T/F*log(Nao/Nai) # V
E_K = R*T/F*log(Ko/Ki) # V
E_Ks = R*T/F*log((Ko + PkNa*Nao)/(Ki + PkNa*Nai)) # V
E_Ca = 0.5*R*T/F*log(Cao/Cai) # V

expressions("i_Na")
TTX_coeff = Conditional(Eq(TTX_3uM, 1.0), 0.18, Conditional(Eq(TTX_10uM, 1.0), 0.06, Conditional(Eq(TTX_30uM, 1.0), 0.02, 1.0)))
i_Na = TTX_coeff*g_Na*m**3.0*h*j*(Vm - E_Na) # A*F**-1

expressions("i_Na", "m gate")
m_inf = 1.0/(1.0 + exp((-Vm*1000.0 - 34.1)/5.9))**(1.0/3.0)
alpha_m = 1.0/(1.0 + exp((-Vm*1000.0 - 60.0)/5.0))
beta_m = 0.1/(1.0 + exp((Vm*1000.0 + 35.0)/5.0)) + 0.1/(1.0 + exp((Vm*1000.0 - 50.0)/200.0))
tau_m = 1.0*alpha_m*beta_m/1000.0 # s
dm_dt = (m_inf - m)/tau_m

expressions("i_Na", "h gate")
h_inf = 1.0/sqrt(1.0 + exp((Vm*1000.0 + 72.1)/5.7))
alpha_h = Conditional(Lt(Vm, -0.04), 0.057*exp(-(Vm*1000.0 + 80.0)/6.8), 0.0)
beta_h = Conditional(Lt(Vm, -0.04), 2.7*exp(0.079*Vm*1000.0) + 3.1*10.0**5.0*exp(0.3485*Vm*1000.0), 0.77/(0.13*(1.0 + exp((Vm*1000.0 + 10.66)/-11.1))))
tau_h = Conditional(Lt(Vm, -0.04), 1.5/((alpha_h + beta_h)*1000.0), 2.542/1000.0) # s
dh_dt = (h_inf - h)/tau_h

expressions("i_Na", "j gate")
j_inf = 1.0/sqrt(1.0 + exp((Vm*1000.0 + 72.1)/5.7))
alpha_j = Conditional(Lt(Vm, -0.04), (-25428.0*exp(0.2444*Vm*1000.0) - 6.948*10.0**-6.0*exp(-0.04391*Vm*1000.0))*(Vm*1000.0 + 37.78)/(1.0 + exp(0.311*(Vm*1000.0 + 79.23))), 0.0)
beta_j = Conditional(Lt(Vm, -0.04), 0.02424*exp(-0.01052*Vm*1000.0)/(1.0 + exp(-0.1378*(Vm*1000.0 + 40.14))), 0.6*exp(0.057*Vm*1000.0)/(1.0 + exp(-0.1*(Vm*1000.0 + 32.0))))
tau_j = 7.0/((alpha_j + beta_j)*1000.0) # s
dj_dt = (j_inf - j)/tau_j

expressions("i_CaL")
nifed_coeff = Conditional(Eq(nifed_3nM, 1.0), 0.93, Conditional(Eq(nifed_10nM, 1.0), 0.79, Conditional(Eq(nifed_30nM, 1.0), 0.56, Conditional(Eq(nifed_100nM, 1.0), 0.28, 1.0))))
i_CaL = g_CaL*4.0*Vm*F**2.0/(R*T)*(Cai*exp(2.0*Vm*F/(R*T)) - 0.341*Cao)/(exp(2.0*Vm*F/(R*T)) - 1.0)*d*f1*f2*fCa # A*F**-1

expressions("i_CaL", "d gate")
d_infinity = 1.0/(1.0 + exp(-(Vm*1000.0 + 9.1)/7.0))
alpha_d = 0.25 + 1.4/(1.0 + exp((-Vm*1000.0 - 35.0)/13.0))
beta_d = 1.4/(1.0 + exp((Vm*1000.0 + 5.0)/5.0))
gamma_d = 1.0/(1.0 + exp((-Vm*1000.0 + 50.0)/20.0))
tau_d = (alpha_d*beta_d + gamma_d)*1.0/1000.0 # s
dd_dt = (d_infinity - d)/tau_d

expressions("i_CaL", "F1 gate")
f1_inf = 1.0/(1.0 + exp((Vm*1000.0 + 26.0)/3.0))
constf1 = Conditional(Gt(f1_inf - f1, 0.0), 1.0 + 1433.0*(Cai - 50.0*1e-6), 1.0)
tau_f1 = (20.0 + 1102.5*exp(-((Vm*1000.0 + 27.0)**2.0/15.0)**2.0) + 200.0/(1.0 + exp((13.0 - Vm*1000.0)/10.0)) + 180.0/(1.0 + exp((30.0 + Vm*1000.0)/10.0)))*constf1/1000.0 # s
df1_dt = (f1_inf - f1)/tau_f1

expressions("i_CaL", "F2 gate")
f2_inf = 0.33 + 0.67/(1.0 + exp((Vm*1000.0 + 35.0)/4.0))
constf2 = 1.0
tau_f2 = (600.0*exp(-((Vm*1000.0 + 25.0)**2.0)/170.0) + 31.0/(1.0 + exp((25.0 - Vm*1000.0)/10.0)) + 16.0/(1.0 + exp((30.0 + Vm*1000.0)/10.0)))*constf2/1000.0 # s
df2_dt = (f2_inf - f2)/tau_f2

expressions("i_CaL", "FCa gate")
alpha_fCa = 1.0/(1.0 + (Cai/0.0006)**8.0)
beta_fCa = 0.1/(1.0 + exp((Cai - 0.0009)/0.0001))
gamma_fCa = 0.3/(1.0 + exp((Cai - 0.00075)/0.0008))
fCa_inf = (alpha_fCa + beta_fCa + gamma_fCa)/1.3156
constfCa = Conditional(And(Gt(Vm, -0.06), Gt(fCa_inf, fCa), ), 0.0, 1.0)
dfCa_dt = constfCa*(fCa_inf - fCa)/tau_fCa

expressions("i_Kr")
E4031_coeff = Conditional(Eq(E4031_30nM, 1.0), 0.77, Conditional(Eq(E4031_100nM, 1.0), 0.5, 1.0))
i_Kr = E4031_coeff*g_Kr*(Vm - E_K)*Xr1*Xr2*sqrt(Ko/5.4) # A*F**-1

expressions("i_Kr", "Xr1 gate")
V_half = 1000.0*(-R*T/(F*Q)*log((1.0 + Cao/2.6)**4.0/(L0*(1.0 + Cao/0.58)**4.0)) - 0.019) # mV
Xr1_inf = 1.0/(1.0 + exp((V_half - Vm*1000.0)/4.9))
alpha_Xr1 = 450.0/(1.0 + exp((-45.0 - Vm*1000.0)/10.0))
beta_Xr1 = 6.0/(1.0 + exp((30.0 + Vm*1000.0)/11.5))
tau_Xr1 = 1.0*alpha_Xr1*beta_Xr1/1000.0 # s
dXr1_dt = (Xr1_inf - Xr1)/tau_Xr1

expressions("i_Kr", "Xr2 gate")
Xr2_infinity = 1.0/(1.0 + exp((Vm*1000.0 + 88.0)/50.0))
alpha_Xr2 = 3.0/(1.0 + exp((-60.0 - Vm*1000.0)/20.0))
beta_Xr2 = 1.12/(1.0 + exp((-60.0 + Vm*1000.0)/20.0))
tau_Xr2 = 1.0*alpha_Xr2*beta_Xr2/1000.0 # s
dXr2_dt = (Xr2_infinity - Xr2)/tau_Xr2

expressions("i_Ks")
Chromanol_coeff = Conditional(Eq(Chromanol_iKs30, 1.0), 0.7, Conditional(Eq(Chromanol_iKs50, 1.0), 0.5, Conditional(Eq(Chromanol_iKs70, 1.0), 0.3, Conditional(Eq(Chromanol_iKs90, 1.0), 0.1, 1.0))))
i_Ks = Chromanol_coeff*g_Ks*(Vm - E_Ks)*Xs**2.0*(1.0 + 0.6/(1.0 + (3.8*0.00001/Cai)**1.4)) # A*F**-1

expressions("i_Ks", "Xs gate")
Xs_infinity = 1.0/(1.0 + exp((-Vm*1000.0 - 20.0)/16.0))
alpha_Xs = 1100.0/sqrt(1.0 + exp((-10.0 - Vm*1000.0)/6.0))
beta_Xs = 1.0/(1.0 + exp((-60.0 + Vm*1000.0)/20.0))
tau_Xs = 1.0*alpha_Xs*beta_Xs/1000.0 # s
dXs_dt = (Xs_infinity - Xs)/tau_Xs

expressions("i_K1")
alpha_K1 = 3.91/(1.0 + exp(0.5942*(Vm*1000.0 - E_K*1000.0 - 200.0)))
beta_K1 = (-1.509*exp(0.0002*(Vm*1000.0 - E_K*1000.0 + 100.0)) + exp(0.5886*(Vm*1000.0 - E_K*1000.0 - 10.0)))/(1.0 + exp(0.4547*(Vm*1000.0 - E_K*1000.0)))
XK1_inf = alpha_K1/(alpha_K1 + beta_K1)
i_K1 = g_K1*XK1_inf*(Vm - E_K)*sqrt(Ko/5.4) # A*F**-1

expressions("i_f")
i_f = g_f*Xf*(Vm - E_f) # A*F**-1

expressions("i_f", "Xf gate")
Xf_infinity = 1.0/(1.0 + exp((Vm*1000.0 + 77.85)/5.0))
tau_Xf = 1900.0/(1.0 + exp((Vm*1000.0 + 15.0)/10.0))/1000.0 # s
dXf_dt = (Xf_infinity - Xf)/tau_Xf

expressions("i_b Na")
i_b_Na = g_b_Na*(Vm - E_Na) # A*F**-1

expressions("i_b Ca")
i_b_Ca = g_b_Ca*(Vm - E_Ca) # A*F**-1

expressions("i_NaK")
i_NaK = PNaK*Ko/(Ko + Km_K)*Nai/(Nai + Km_Na)/(1.0 + 0.1245*exp(-0.1*Vm*F/(R*T)) + 0.0353*exp(-Vm*F/(R*T))) # A*F**-1

expressions("i_NaCa")
i_NaCa = kNaCa*(exp(gamma*Vm*F/(R*T))*Nai**3.0*Cao - exp((gamma - 1.0)*Vm*F/(R*T))*Nao**3.0*Cai*alpha)/((KmNai**3.0 + Nao**3.0)*(KmCa + Cao)*(1.0 + Ksat*exp((gamma - 1.0)*Vm*F/(R*T)))) # A*F**-1

expressions("i_PCa")
i_PCa = g_PCa*Cai/(Cai + KPCa) # A*F**-1

expressions("i_to")
i_to = g_to*(Vm - E_K)*q*r # A*F**-1

expressions("i_to", "q gate")
q_inf = 1.0/(1.0 + exp((Vm*1000.0 + 53.0)/13.0))
tau_q = (6.06 + 39.102/(0.57*exp(-0.08*(Vm*1000.0 + 44.0)) + 0.065*exp(0.1*(Vm*1000.0 + 45.93))))/1000.0 # s
dq_dt = (q_inf - q)/tau_q

expressions("i_to", "r gate")
r_inf = 1.0/(1.0 + exp(-(Vm*1000.0 - 22.3)/18.75))
tau_r = (2.75352 + 14.40516/(1.037*exp(0.09*(Vm*1000.0 + 30.61)) + 0.369*exp(-0.12*(Vm*1000.0 + 23.84))))/1000.0 # s
dr_dt = (r_inf - r)/tau_r

expressions("Sodium dynamics")
dNai_dt = -Cm*(i_Na + i_b_Na + 3.0*i_NaK + 3.0*i_NaCa)/(F*Vc*1e-18)

expressions("Calcium dynamics")
i_rel = (c_rel + a_rel*Ca_SR**2.0/(b_rel**2.0 + Ca_SR**2.0))*d*g*0.0411 # mM*s**-1
i_up = VmaxUp/(1.0 + Kup**2.0/Cai**2.0) # mM*s**-1
i_leak = (Ca_SR - Cai)*V_leak # mM*s**-1
g_inf = Conditional(Le(Cai, 0.00035), 1.0/(1.0 + (Cai/0.00035)**6.0), 1.0/(1.0 + (Cai/0.00035)**16.0))
const2 = Conditional(And(Gt(g_inf, g), Gt(Vm, -0.06), ), 0.0, 1.0)
dg_dt = const2*(g_inf - g)/tau_g
Cai_bufc = 1.0/(1.0 + Buf_C*Kbuf_C/(Cai + Kbuf_C)**2.0)
Ca_SR_bufSR = 1.0/(1.0 + Buf_SR*Kbuf_SR/(Ca_SR + Kbuf_SR)**2.0)
dCai_dt = Cai_bufc*(i_leak - i_up + i_rel - (i_CaL + i_b_Ca + i_PCa - 2.0*i_NaCa)*Cm/(2.0*Vc*F*1e-18))
dCa_SR_dt = Ca_SR_bufSR*Vc/V_SR*(i_up - (i_rel + i_leak))

expressions("Membrane")
dVm_dt = -( (1+lambda_K1)*i_K1 + (1+lambda_to)*i_to + (1+lambda_Kr)*i_Kr + (1+lambda_Ks)*i_Ks + (1+lambda_CaL)*i_CaL + (1+lambda_NaK)*i_NaK + (1+lambda_Na)*i_Na + (1+lambda_NaCa)*i_NaCa + (1+lambda_PCa)*i_PCa + (1+lambda_f)*i_f + (1+lambda_b_Na)*i_b_Na + (1+lambda_b_Ca)*i_b_Ca - i_stim)

