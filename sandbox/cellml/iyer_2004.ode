# A computational model of the human left-ventricular epicardial myocyte
#
# ABSTRACT: A computational model of the human left-ventricular epicardial
# myocyte is presented. Models of each of the major ionic currents present in
# these cells are formulated and validated using experimental data obtained from
# studies of recombinant human ion channels and/or whole-cell recording from
# single myocytes isolated from human left-ventricular subepicardium.
# Continuous-time Markov chain models for the gating of the fast Na(+) current,
# transient outward current, rapid component of the delayed rectifier current,
# and the L-type calcium current are modified to represent human data at
# physiological temperature. A new model for the gating of the slow component of
# the delayed rectifier current is formulated and validated against experimental
# data. Properties of calcium handling and exchanger currents are altered to
# appropriately represent the dynamics of intracellular ion concentrations. The
# model is able to both reproduce and predict a wide range of behaviors observed
# experimentally including action potential morphology, ionic currents,
# intracellular calcium transients, frequency dependence of action-potential
# duration, Ca(2+)-frequency relations, and extrasystolic
# restitution/post-extrasystolic potentiation. The model therefore serves as a
# useful tool for investigating mechanisms of arrhythmia and consequences of
# drug-channel interactions in the human left-ventricular myocyte.
#
# The original paper reference is cited below:
#
# A computational model of the human left-ventricular epicardial myocyte, Vivek
# Iyer, Reza Mazhari and Raimond L. Winslow, 2004,Biophysical Journal, 87,
# 1507-1525.PubMed ID: 15345532
#

# gotran file generated by cellml2gotran from iyer_mazhari_winslow_2004.cellml

parameters("COMPUTE INTRACELLULAR CALCIUM FLUXES",
           Kfb = ScalarParam(0.000168, unit="mmole*l**-1"),
           Nfb = 1.2,
           Krb = ScalarParam(3.29, unit="mmole*l**-1"),
           Nrb = 1,
           KSR = ScalarParam(1.2, unit="mmole*l**-1"),
           vmaxf = ScalarParam(0.0748e-3, unit="ms**-1"),
           vmaxr = ScalarParam(0.318e-3, unit="ms**-1"),
           v1 = ScalarParam(1.8, unit="ms**-1"),
           tautr = ScalarParam(0.5747, unit="ms"),
           tauxfer = ScalarParam(26.7, unit="ms"))

states("COMPUTE Jtrpn and BUFFER SCALE FACTORS",
       LTRPNCa = 0.8046584973e-1,
       HTRPNCa = 0.9772152481)

parameters("COMPUTE Jtrpn and BUFFER SCALE FACTORS",
           LTRPNtot = ScalarParam(70e-3, unit="mmole*l**-1"),
           HTRPNtot = ScalarParam(140e-3, unit="mmole*l**-1"),
           khtrpn_plus = ScalarParam(20e0, unit="mmole**-1*l*ms**-1"),
           khtrpn_minus = ScalarParam(0.066e-3, unit="ms**-1"),
           kltrpn_plus = ScalarParam(40e0, unit="mmole**-1*l*ms**-1"),
           kltrpn_minus = ScalarParam(40e-3, unit="ms**-1"),
           CMDNtot = ScalarParam(50e-3, unit="mmole*l**-1"),
           CSQNtot = ScalarParam(15e0, unit="mmole*l**-1"),
           EGTAtot = ScalarParam(0e0, unit="mmole*l**-1"),
           KmCMDN = ScalarParam(2.38e-3, unit="mmole*l**-1"),
           KmCSQN = ScalarParam(0.8e0, unit="mmole*l**-1"),
           KmEGTA = ScalarParam(1.5e-4, unit="mmole*l**-1"))

states("COMPUTE DERIVATIVES OF Kv4 3 CHANNEL STATES",
       C0Kv43 = 0.9513721351,
       C1Kv43 = 0.02668288089,
       C2Kv43 = 2.806380358e-4,
       C3Kv43 = 1.311837579e-6,
       OKv43 = 2.29955624e-9,
       CI0Kv43 = 0.01513025204,
       CI1Kv43 = 0.005442964601,
       CI2Kv43 = 9.918373359000001e-4,
       CI3Kv43 = 9.514386057000001e-5,
       OIKv43 = 2.742677382e-6)

parameters("COMPUTE DERIVATIVES OF Kv4 3 CHANNEL STATES",
           alphaa0Kv43 = ScalarParam(0.543708, unit="ms**-1"),
           aaKv43 = ScalarParam(0.028983, unit="mV**-1"),
           betaa0Kv43 = ScalarParam(0.080185, unit="ms**-1"),
           baKv43 = ScalarParam(0.0468437, unit="mV**-1"),
           alphai0Kv43 = ScalarParam(0.0498424, unit="ms**-1"),
           aiKv43 = ScalarParam(0.000373016, unit="mV**-1"),
           betai0Kv43 = ScalarParam(0.000819482, unit="ms**-1"),
           biKv43 = ScalarParam(0.00000005374, unit="mV**-1"),
           f1Kv43 = 1.8936,
           f2Kv43 = 14.224647456,
           f3Kv43 = 158.574378389,
           f4Kv43 = 142.936645351,
           b1Kv43 = 6.77348,
           b2Kv43 = 15.6212705152,
           b3Kv43 = 28.7532603313,
           b4Kv43 = 524.576206679)

states("COMPUTE DERIVATIVES OF Kv1 4 CHANNEL STATES",
       C0Kv14 = 0.5977099765,
       C1Kv14 = 0.1730990528,
       C2Kv14 = 0.01881072386,
       C3Kv14 = 9.16070135e-4,
       OKv14 = 1.975541357e-5,
       CI0Kv14 = 0.03539084346,
       CI1Kv14 = 0.005428824353,
       CI2Kv14 = 0.02287858869,
       CI3Kv14 = 0.03233800003,
       OIKv14 = 0.1134082058)

parameters("COMPUTE DERIVATIVES OF Kv1 4 CHANNEL STATES",
           f1Kv14 = 0.52465073996,
           f2Kv14 = 17.51885408639,
           f3Kv14 = 938.58764534556,
           f4Kv14 = 54749.19473332601,
           b1Kv14 = 1.00947847105,
           b2Kv14 = 1.17100540567,
           b3Kv14 = 0.63902768758,
           b4Kv14 = 2.12035379095,
           alphaa0Kv14 = ScalarParam(1.84002414554, unit="ms**-1"),
           aaKv14 = ScalarParam(0.00768548031, unit="mV**-1"),
           betaa0Kv14 = ScalarParam(0.0108174834, unit="ms**-1"),
           baKv14 = ScalarParam(0.07793378174, unit="mV**-1"),
           alphai0Kv14 = ScalarParam(0.00305767916, unit="ms**-1"),
           betai0Kv14 = ScalarParam(0.00000244936, unit="ms**-1"))

states("COMPUTE DERIVATIVES OF LTYPE CHANNEL STATES",
       C0 = 0.8621934054,
       C1 = 0.01141398211,
       C2 = 5.666325225e-5,
       C3 = 1.25021357e-7,
       C4 = 1.034426748e-10,
       Open = 7.757981563e-12,
       CCa0 = 0.1198547081,
       CCa1 = 0.006346794302,
       CCa2 = 1.260326488e-4,
       CCa3 = 1.112315238e-6,
       CCa4 = 3.681315892e-9,
       yCa = 0.9997157074)

parameters("COMPUTE DERIVATIVES OF LTYPE CHANNEL STATES",
           fL = ScalarParam(0.3, unit="ms**-1"),
           gL = ScalarParam(4, unit="ms**-1"),
           bL = 2,
           aL = 2)

parameters("COMPUTE ICa ICaK",
           ICahalf = ScalarParam(-0.265, unit="uA*uF**-1"),
           Pscale = 7)

states("COMPUTE DERIVATIVES OF RyR RECEPTOR STATES",
       C1_RyR = 0.4448038946,
       O2_RyR = 0.397392006e-8,
       C2_RyR = 0.554535924,
       O1_RyR = 0.6601783287e-3)

parameters("COMPUTE DERIVATIVES OF RyR RECEPTOR STATES",
           kaplus = ScalarParam(0.01215, unit="umole**-4*l**4*ms**-1"),
           kaminus = ScalarParam(0.576, unit="ms**-1"),
           kbplus = ScalarParam(0.00405, unit="umole**-3*l**3*ms**-1"),
           kbminus = ScalarParam(1.93, unit="ms**-1"),
           kcplus = ScalarParam(0.1, unit="ms**-1"),
           kcminus = ScalarParam(0.0008, unit="ms**-1"),
           ncoop = 4,
           mcoop = 3)

parameters("INa", "COMPUTE K Ca ICab IpCa",
           kNaCa = ScalarParam(0.44, unit="uA*uF**-1"),
           KmNa = ScalarParam(87.5, unit="mmole*l**-1"),
           KmCa = ScalarParam(1.38, unit="mmole*l**-1"),
           ksat = 0.2,
           eta = 0.35,
           INaKmax = ScalarParam(2.387, unit="uA*uF**-1"),
           KmNai = ScalarParam(20, unit="mmole*l**-1"),
           KmKo = ScalarParam(1.5, unit="mmole*l**-1"),
           IpCamax = ScalarParam(0.05, unit="uA*uF**-1"),
           KmpCa = ScalarParam(0.0005, unit="mmole*l**-1"),
           GCab = ScalarParam(7.684e-5, unit="mS*uF**-1"))

parameters("IKs", "COMPUTE INa IKr  Ito1 IK1 INab IKp",
           GKr = ScalarParam(0.0186e0, unit="mS*uF**-1"),
           GKs = ScalarParam(0.0035e0, unit="mS*uF**-1"),
           GK1 = ScalarParam(0.1253051261188079722568586886469e0, unit="mS*uF**-1"),
           GNa = ScalarParam(56.32e0, unit="mS*uF**-1"),
           GNab = ScalarParam(0.001e0, unit="mS*uF**-1"),
           KvScale = 0.872,
           Kv43Frac = 0.889)

parameters("I_stimulus",
           stim_period = ScalarParam(1e3, unit="ms"),
           stim_duration = ScalarParam(3, unit="ms"),
           stim_amplitude = ScalarParam(-15, unit="uA*uF**-1"),
           stim_offset = ScalarParam(0, unit="ms"))

states("COMPUTE CONCENTRATION AND VOLTAGE DERIVATIVES",
       Nai = ScalarParam(0.9798304162e1, unit="mmole*l**-1"),
       Ki = ScalarParam(0.1255589432e3, unit="mmole*l**-1"),
       Cai = ScalarParam(0.8601192016e-4, unit="mmole*l**-1"),
       CaSS = ScalarParam(0.1420215245e-3, unit="mmole*l**-1"),
       CaJSR = ScalarParam(0.2852239446, unit="mmole*l**-1"),
       CaNSR = ScalarParam(0.2855294915, unit="mmole*l**-1"),
       V = ScalarParam(-0.9065755929e2, unit="mV"))

parameters("COMPUTE CONCENTRATION AND VOLTAGE DERIVATIVES",
           Faraday = ScalarParam(96.5, unit="C*mmole**-1"),
           Temp = ScalarParam(310, unit="K"),
           Rgas = ScalarParam(8.315, unit="J*mole**-1*K**-1"),
           Acap = ScalarParam(1.534e-4, unit="cm**2"),
           Vmyo = ScalarParam(25.84e-6, unit="ul"),
           VJSR = ScalarParam(0.16e-6, unit="ul"),
           VNSR = ScalarParam(2.1e-6, unit="ul"),
           VSS = ScalarParam(1.2e-9, unit="ul"),
           Ko = ScalarParam(4, unit="mmole*l**-1"),
           Nao = ScalarParam(138, unit="mmole*l**-1"),
           Cao = ScalarParam(2, unit="mmole*l**-1"))

states("INa",
       na1 = 0.1437575649,
       na2 = 0.0417776208,
       na3 = 0.004552898364,
       na4 = 2.20520743e-4,
       na5 = 4.005266484e-6,
       na6 = 1.57442749e-8,
       na7 = 2.856607179e-9,
       na8 = 0.4749950008,
       na9 = 0.2707214097,
       na10 = 0.05786120057,
       na11 = 0.005496292279,
       na12 = 1.957874519e-4,
       na13 = 4.17679396e-4)

parameters("INa",
           TNa = ScalarParam(294.16, unit="K"))

states("IKr",
       C1Herg = 0.996697338,
       C2Herg = 4.340879648e-4,
       C3Herg = 7.634099755000001e-5,
       OHerg = 9.511789113e-6,
       IHerg = 1.533347007e-6)

parameters("IKr",
           T_Const_HERG = 5.320000001,
           A0_HERG = ScalarParam(0.017147641733086, unit="ms**-1"),
           B0_HERG = ScalarParam(0.03304608038835, unit="mV**-1"),
           A1_HERG = ScalarParam(0.03969328381141, unit="ms**-1"),
           B1_HERG = ScalarParam(-0.0430605416398, unit="mV**-1"),
           A2_HERG = ScalarParam(0.02057448605977, unit="ms**-1"),
           B2_HERG = ScalarParam(0.02617412715118, unit="mV**-1"),
           A3_HERG = ScalarParam(0.00134366604423, unit="ms**-1"),
           B3_HERG = ScalarParam(-0.02691385498399, unit="mV**-1"),
           A4_HERG = ScalarParam(0.10666316491288, unit="ms**-1"),
           B4_HERG = ScalarParam(0.00568908859717, unit="mV**-1"),
           A5_HERG = ScalarParam(0.00646393910049, unit="ms**-1"),
           B5_HERG = ScalarParam(-0.04536642959543, unit="mV**-1"),
           A6_HERG = ScalarParam(0.00008039374403, unit="ms**-1"),
           B6_HERG = ScalarParam(0.00000069808924, unit="mV**-1"))

states("IKs",
       C0ks = 0.9645606295,
       C1ks = 0.03542613568,
       O1ks = 2.491710696e-7,
       O2ks = 1.298547822e-5)

component("Iyer 2004")
RT_over_F = Rgas*Temp/Faraday # mV

component("COMPUTE INTRACELLULAR CALCIUM FLUXES")
fb = (Cai/Kfb)**Nfb
rb = (CaNSR/Krb)**Nrb
Jup = KSR*(vmaxf*fb - vmaxr*rb)/(1 + fb + rb) # mmole*l**-1*ms**-1
Jrel = v1*(O1_RyR + O2_RyR)*(CaJSR - CaSS) # mmole*l**-1*ms**-1
Jtr = (CaNSR - CaJSR)/tautr # mmole*l**-1*ms**-1
Jxfer = (CaSS - Cai)/tauxfer # mmole*l**-1*ms**-1

component("COMPUTE Jtrpn and BUFFER SCALE FACTORS")
dLTRPNCa = kltrpn_plus*Cai*(1 - LTRPNCa) - kltrpn_minus*LTRPNCa # ms**-1
dHTRPNCa = khtrpn_plus*Cai*(1 - HTRPNCa) - khtrpn_minus*HTRPNCa # ms**-1
dLTRPNCa_dt = dLTRPNCa
dHTRPNCa_dt = dHTRPNCa
Jtrpn = LTRPNtot*dLTRPNCa + HTRPNtot*dHTRPNCa # mmole*l**-1*ms**-1
beta_SS = 1/(1 + CMDNtot*KmCMDN/(CaSS + KmCMDN)**2 + EGTAtot*KmEGTA/(CaSS + KmEGTA)**2)
beta_JSR = 1/(1 + CSQNtot*KmCSQN/(CaJSR + KmCSQN)**2)
beta_i = 1/(1 + CMDNtot*KmCMDN/(Cai + KmCMDN)**2 + EGTAtot*KmEGTA/(Cai + KmEGTA)**2)

component("COMPUTE DERIVATIVES OF Kv4 3 CHANNEL STATES")
alpha_act43 = alphaa0Kv43*exp(aaKv43*V) # ms**-1
beta_act43 = betaa0Kv43*exp(-baKv43*V) # ms**-1
alpha_inact43 = alphai0Kv43*exp(-aiKv43*V) # ms**-1
beta_inact43 = betai0Kv43*exp(biKv43*V) # ms**-1
C0Kv43_to_C1Kv43 = 4*alpha_act43 # ms**-1
C1Kv43_to_C2Kv43 = 3*alpha_act43 # ms**-1
C2Kv43_to_C3Kv43 = 2*alpha_act43 # ms**-1
C3Kv43_to_OKv43 = alpha_act43 # ms**-1
CI0Kv43_to_CI1Kv43 = 4*b1Kv43*alpha_act43 # ms**-1
CI1Kv43_to_CI2Kv43 = 3*b2Kv43*alpha_act43/b1Kv43 # ms**-1
CI2Kv43_to_CI3Kv43 = 2*b3Kv43*alpha_act43/b2Kv43 # ms**-1
CI3Kv43_to_OIKv43 = b4Kv43*alpha_act43/b3Kv43 # ms**-1
C1Kv43_to_C0Kv43 = beta_act43 # ms**-1
C2Kv43_to_C1Kv43 = 2*beta_act43 # ms**-1
C3Kv43_to_C2Kv43 = 3*beta_act43 # ms**-1
OKv43_to_C3Kv43 = 4*beta_act43 # ms**-1
CI1Kv43_to_CI0Kv43 = beta_act43/f1Kv43 # ms**-1
CI2Kv43_to_CI1Kv43 = 2*f1Kv43*beta_act43/f2Kv43 # ms**-1
CI3Kv43_to_CI2Kv43 = 3*f2Kv43*beta_act43/f3Kv43 # ms**-1
OIKv43_to_CI3Kv43 = 4*f3Kv43*beta_act43/f4Kv43 # ms**-1
C0Kv43_to_CI0Kv43 = beta_inact43 # ms**-1
C1Kv43_to_CI1Kv43 = f1Kv43*beta_inact43 # ms**-1
C2Kv43_to_CI2Kv43 = f2Kv43*beta_inact43 # ms**-1
C3Kv43_to_CI3Kv43 = f3Kv43*beta_inact43 # ms**-1
OKv43_to_OIKv43 = f4Kv43*beta_inact43 # ms**-1
CI0Kv43_to_C0Kv43 = alpha_inact43 # ms**-1
CI1Kv43_to_C1Kv43 = alpha_inact43/b1Kv43 # ms**-1
CI2Kv43_to_C2Kv43 = alpha_inact43/b2Kv43 # ms**-1
CI3Kv43_to_C3Kv43 = alpha_inact43/b3Kv43 # ms**-1
OIKv43_to_OKv43 = alpha_inact43/b4Kv43 # ms**-1
a1_C043 = (C0Kv43_to_C1Kv43 + C0Kv43_to_CI0Kv43)*C0Kv43 # ms**-1
a2_C043 = C1Kv43_to_C0Kv43*C1Kv43 + CI0Kv43_to_C0Kv43*CI0Kv43 # ms**-1
dC0Kv43_dt = a2_C043 - a1_C043
a1_C143 = (C1Kv43_to_C2Kv43 + C1Kv43_to_C0Kv43 + C1Kv43_to_CI1Kv43)*C1Kv43 # ms**-1
a2_C143 = C2Kv43_to_C1Kv43*C2Kv43 + CI1Kv43_to_C1Kv43*CI1Kv43 + C0Kv43_to_C1Kv43*C0Kv43 # ms**-1
dC1Kv43_dt = a2_C143 - a1_C143
a1_C243 = (C2Kv43_to_C3Kv43 + C2Kv43_to_C1Kv43 + C2Kv43_to_CI2Kv43)*C2Kv43 # ms**-1
a2_C243 = C3Kv43_to_C2Kv43*C3Kv43 + CI2Kv43_to_C2Kv43*CI2Kv43 + C1Kv43_to_C2Kv43*C1Kv43 # ms**-1
dC2Kv43_dt = a2_C243 - a1_C243
a1_C343 = (C3Kv43_to_OKv43 + C3Kv43_to_C2Kv43 + C3Kv43_to_CI3Kv43)*C3Kv43 # ms**-1
a2_C343 = OKv43_to_C3Kv43*OKv43 + CI3Kv43_to_C3Kv43*CI3Kv43 + C2Kv43_to_C3Kv43*C2Kv43 # ms**-1
dC3Kv43_dt = a2_C343 - a1_C343
a1_O43 = (OKv43_to_C3Kv43 + OKv43_to_OIKv43)*OKv43 # ms**-1
a2_O43 = C3Kv43_to_OKv43*C3Kv43 + OIKv43_to_OKv43*OIKv43 # ms**-1
dOKv43_dt = a2_O43 - a1_O43
a1_I043 = (CI0Kv43_to_C0Kv43 + CI0Kv43_to_CI1Kv43)*CI0Kv43 # ms**-1
a2_I043 = C0Kv43_to_CI0Kv43*C0Kv43 + CI1Kv43_to_CI0Kv43*CI1Kv43 # ms**-1
dCI0Kv43_dt = a2_I043 - a1_I043
a1_I143 = (CI1Kv43_to_CI2Kv43 + CI1Kv43_to_C1Kv43 + CI1Kv43_to_CI0Kv43)*CI1Kv43 # ms**-1
a2_I143 = CI2Kv43_to_CI1Kv43*CI2Kv43 + C1Kv43_to_CI1Kv43*C1Kv43 + CI0Kv43_to_CI1Kv43*CI0Kv43 # ms**-1
dCI1Kv43_dt = a2_I143 - a1_I143
a1_I243 = (CI2Kv43_to_CI3Kv43 + CI2Kv43_to_C2Kv43 + CI2Kv43_to_CI1Kv43)*CI2Kv43 # ms**-1
a2_I243 = CI3Kv43_to_CI2Kv43*CI3Kv43 + C2Kv43_to_CI2Kv43*C2Kv43 + CI1Kv43_to_CI2Kv43*CI1Kv43 # ms**-1
dCI2Kv43_dt = a2_I243 - a1_I243
a1_I343 = (CI3Kv43_to_OIKv43 + CI3Kv43_to_C3Kv43 + CI3Kv43_to_CI2Kv43)*CI3Kv43 # ms**-1
a2_I343 = OIKv43_to_CI3Kv43*OIKv43 + C3Kv43_to_CI3Kv43*C3Kv43 + CI2Kv43_to_CI3Kv43*CI2Kv43 # ms**-1
dCI3Kv43_dt = a2_I343 - a1_I343
a1_OI43 = (OIKv43_to_OKv43 + OIKv43_to_CI3Kv43)*OIKv43 # ms**-1
a2_OI43 = OKv43_to_OIKv43*OKv43 + CI3Kv43_to_OIKv43*CI3Kv43 # ms**-1
dOIKv43_dt = a2_OI43 - a1_OI43

component("COMPUTE DERIVATIVES OF Kv1 4 CHANNEL STATES")
alpha_act14 = alphaa0Kv14*exp(aaKv14*V) # ms**-1
beta_act14 = betaa0Kv14*exp(-baKv14*V) # ms**-1
alpha_inact14 = alphai0Kv14 # ms**-1
beta_inact14 = betai0Kv14 # ms**-1
C0Kv14_to_C1Kv14 = 4*alpha_act14 # ms**-1
C1Kv14_to_C2Kv14 = 3*alpha_act14 # ms**-1
C2Kv14_to_C3Kv14 = 2*alpha_act14 # ms**-1
C3Kv14_to_OKv14 = alpha_act14 # ms**-1
CI0Kv14_to_CI1Kv14 = 4*b1Kv14*alpha_act14 # ms**-1
CI1Kv14_to_CI2Kv14 = 3*b2Kv14*alpha_act14/b1Kv14 # ms**-1
CI2Kv14_to_CI3Kv14 = 2*b3Kv14*alpha_act14/b2Kv14 # ms**-1
CI3Kv14_to_OIKv14 = b4Kv14*alpha_act14/b3Kv14 # ms**-1
C1Kv14_to_C0Kv14 = beta_act14 # ms**-1
C2Kv14_to_C1Kv14 = 2*beta_act14 # ms**-1
C3Kv14_to_C2Kv14 = 3*beta_act14 # ms**-1
OKv14_to_C3Kv14 = 4*beta_act14 # ms**-1
CI1Kv14_to_CI0Kv14 = beta_act14/f1Kv14 # ms**-1
CI2Kv14_to_CI1Kv14 = 2*f1Kv14*beta_act14/f2Kv14 # ms**-1
CI3Kv14_to_CI2Kv14 = 3*f2Kv14*beta_act14/f3Kv14 # ms**-1
OIKv14_to_CI3Kv14 = 4*f3Kv14*beta_act14/f4Kv14 # ms**-1
C0Kv14_to_CI0Kv14 = beta_inact14 # ms**-1
C1Kv14_to_CI1Kv14 = f1Kv14*beta_inact14 # ms**-1
C2Kv14_to_CI2Kv14 = f2Kv14*beta_inact14 # ms**-1
C3Kv14_to_CI3Kv14 = f3Kv14*beta_inact14 # ms**-1
OKv14_to_OIKv14 = f4Kv14*beta_inact14 # ms**-1
CI0Kv14_to_C0Kv14 = alpha_inact14 # ms**-1
CI1Kv14_to_C1Kv14 = alpha_inact14/b1Kv14 # ms**-1
CI2Kv14_to_C2Kv14 = alpha_inact14/b2Kv14 # ms**-1
CI3Kv14_to_C3Kv14 = alpha_inact14/b3Kv14 # ms**-1
OIKv14_to_OKv14 = alpha_inact14/b4Kv14 # ms**-1
a1_C0 = (C0Kv14_to_C1Kv14 + C0Kv14_to_CI0Kv14)*C0Kv14 # ms**-1
a2_C0 = C1Kv14_to_C0Kv14*C1Kv14 + CI0Kv14_to_C0Kv14*CI0Kv14 # ms**-1
dC0Kv14_dt = a2_C0 - a1_C0
a1_C1 = (C1Kv14_to_C2Kv14 + C1Kv14_to_C0Kv14 + C1Kv14_to_CI1Kv14)*C1Kv14 # ms**-1
a2_C1 = C2Kv14_to_C1Kv14*C2Kv14 + CI1Kv14_to_C1Kv14*CI1Kv14 + C0Kv14_to_C1Kv14*C0Kv14 # ms**-1
dC1Kv14_dt = a2_C1 - a1_C1
a1_C2 = (C2Kv14_to_C3Kv14 + C2Kv14_to_C1Kv14 + C2Kv14_to_CI2Kv14)*C2Kv14 # ms**-1
a2_C2 = C3Kv14_to_C2Kv14*C3Kv14 + CI2Kv14_to_C2Kv14*CI2Kv14 + C1Kv14_to_C2Kv14*C1Kv14 # ms**-1
dC2Kv14_dt = a2_C2 - a1_C2
a1_C3 = (C3Kv14_to_OKv14 + C3Kv14_to_C2Kv14 + C3Kv14_to_CI3Kv14)*C3Kv14 # ms**-1
a2_C3 = OKv14_to_C3Kv14*OKv14 + CI3Kv14_to_C3Kv14*CI3Kv14 + C2Kv14_to_C3Kv14*C2Kv14 # ms**-1
dC3Kv14_dt = a2_C3 - a1_C3
a1_O = (OKv14_to_C3Kv14 + OKv14_to_OIKv14)*OKv14 # ms**-1
a2_O = C3Kv14_to_OKv14*C3Kv14 + OIKv14_to_OKv14*OIKv14 # ms**-1
dOKv14_dt = a2_O - a1_O
a1_CI0 = (CI0Kv14_to_C0Kv14 + CI0Kv14_to_CI1Kv14)*CI0Kv14 # ms**-1
a2_CI0 = C0Kv14_to_CI0Kv14*C0Kv14 + CI1Kv14_to_CI0Kv14*CI1Kv14 # ms**-1
dCI0Kv14_dt = a2_CI0 - a1_CI0
a1_CI1 = (CI1Kv14_to_CI2Kv14 + CI1Kv14_to_C1Kv14 + CI1Kv14_to_CI0Kv14)*CI1Kv14 # ms**-1
a2_CI1 = CI2Kv14_to_CI1Kv14*CI2Kv14 + C1Kv14_to_CI1Kv14*C1Kv14 + CI0Kv14_to_CI1Kv14*CI0Kv14 # ms**-1
dCI1Kv14_dt = a2_CI1 - a1_CI1
a1_CI2 = (CI2Kv14_to_CI3Kv14 + CI2Kv14_to_C2Kv14 + CI2Kv14_to_CI1Kv14)*CI2Kv14 # ms**-1
a2_CI2 = CI3Kv14_to_CI2Kv14*CI3Kv14 + C2Kv14_to_CI2Kv14*C2Kv14 + CI1Kv14_to_CI2Kv14*CI1Kv14 # ms**-1
dCI2Kv14_dt = a2_CI2 - a1_CI2
a1_CI3 = (CI3Kv14_to_OIKv14 + CI3Kv14_to_C3Kv14 + CI3Kv14_to_CI2Kv14)*CI3Kv14 # ms**-1
a2_CI3 = OIKv14_to_CI3Kv14*OIKv14 + C3Kv14_to_CI3Kv14*C3Kv14 + CI2Kv14_to_CI3Kv14*CI2Kv14 # ms**-1
dCI3Kv14_dt = a2_CI3 - a1_CI3
a1_OI = (OIKv14_to_OKv14 + OIKv14_to_CI3Kv14)*OIKv14 # ms**-1
a2_OI = OKv14_to_OIKv14*OKv14 + CI3Kv14_to_OIKv14*CI3Kv14 # ms**-1
dOIKv14_dt = a2_OI - a1_OI

component("COMPUTE DERIVATIVES OF LTYPE CHANNEL STATES")
alpha = 4*1.2*0.416*exp(0.012*(V - 35)) # ms**-1
beta = 4*0.45*0.049*exp(-0.065*(V - 22)) # ms**-1
alpha_prime = aL*alpha # ms**-1
beta_prime = beta/bL # ms**-1
gamma = 0.6*0.09233*CaSS # ms**-1
omega = 0.25*0.01 # ms**-1
C0_to_C1 = 4*alpha # ms**-1
C1_to_C2 = 3*alpha # ms**-1
C2_to_C3 = 2*alpha # ms**-1
C3_to_C4 = alpha # ms**-1
CCa0_to_CCa1 = 4*alpha_prime # ms**-1
CCa1_to_CCa2 = 3*alpha_prime # ms**-1
CCa2_to_CCa3 = 2*alpha_prime # ms**-1
CCa3_to_CCa4 = alpha_prime # ms**-1
C1_to_C0 = beta # ms**-1
C2_to_C1 = 2*beta # ms**-1
C3_to_C2 = 3*beta # ms**-1
C4_to_C3 = 4*beta # ms**-1
CCa1_to_CCa0 = beta_prime # ms**-1
CCa2_to_CCa1 = 2*beta_prime # ms**-1
CCa3_to_CCa2 = 3*beta_prime # ms**-1
CCa4_to_CCa3 = 4*beta_prime # ms**-1
C0_to_CCa0 = gamma # ms**-1
C1_to_CCa1 = aL*C0_to_CCa0 # ms**-1
C2_to_CCa2 = aL*C1_to_CCa1 # ms**-1
C3_to_CCa3 = aL*C2_to_CCa2 # ms**-1
C4_to_CCa4 = aL*C3_to_CCa3 # ms**-1
CCa0_to_C0 = omega # ms**-1
CCa1_to_C1 = CCa0_to_C0/bL # ms**-1
CCa2_to_C2 = CCa1_to_C1/bL # ms**-1
CCa3_to_C3 = CCa2_to_C2/bL # ms**-1
CCa4_to_C4 = CCa3_to_C3/bL # ms**-1
a1_C0 = (C0_to_C1 + C0_to_CCa0)*C0 # ms**-1
a2_C0 = C1_to_C0*C1 + CCa0_to_C0*CCa0 # ms**-1
dC0_dt = a2_C0 - a1_C0
a1_C1 = (C1_to_C0 + C1_to_C2 + C1_to_CCa1)*C1 # ms**-1
a2_C1 = C0_to_C1*C0 + C2_to_C1*C2 + CCa1_to_C1*CCa1 # ms**-1
dC1_dt = a2_C1 - a1_C1
a1_C2 = (C2_to_C1 + C2_to_C3 + C2_to_CCa2)*C2 # ms**-1
a2_C2 = C1_to_C2*C1 + C3_to_C2*C3 + CCa2_to_C2*CCa2 # ms**-1
dC2_dt = a2_C2 - a1_C2
a1_C3 = (C3_to_C2 + C3_to_C4 + C3_to_CCa3)*C3 # ms**-1
a2_C3 = C2_to_C3*C2 + C4_to_C3*C4 + CCa3_to_C3*CCa3 # ms**-1
dC3_dt = a2_C3 - a1_C3
a1_C4 = (C4_to_C3 + fL + C4_to_CCa4)*C4 # ms**-1
a2_C4 = C3_to_C4*C3 + gL*Open + CCa4_to_C4*CCa4 # ms**-1
dC4_dt = a2_C4 - a1_C4
dOpen_dt = fL*C4 - gL*Open
a1_Ca0 = (CCa0_to_CCa1 + CCa0_to_C0)*CCa0 # ms**-1
a2_Ca0 = CCa1_to_CCa0*CCa1 + C0_to_CCa0*C0 # ms**-1
dCCa0_dt = a2_Ca0 - a1_Ca0
a1_Ca1 = (CCa1_to_CCa0 + CCa1_to_CCa2 + CCa1_to_C1)*CCa1 # ms**-1
a2_Ca1 = CCa0_to_CCa1*CCa0 + CCa2_to_CCa1*CCa2 + C1_to_CCa1*C1 # ms**-1
dCCa1_dt = a2_Ca1 - a1_Ca1
a1_Ca2 = (CCa2_to_CCa1 + CCa2_to_CCa3 + CCa2_to_C2)*CCa2 # ms**-1
a2_Ca2 = CCa1_to_CCa2*CCa1 + CCa3_to_CCa2*CCa3 + C2_to_CCa2*C2 # ms**-1
dCCa2_dt = a2_Ca2 - a1_Ca2
a1_Ca3 = (CCa3_to_CCa2 + CCa3_to_CCa4 + CCa3_to_C3)*CCa3 # ms**-1
a2_Ca3 = CCa2_to_CCa3*CCa2 + CCa4_to_CCa3*CCa4 + C3_to_CCa3*C3 # ms**-1
dCCa3_dt = a2_Ca3 - a1_Ca3
a1_Ca4 = (CCa4_to_CCa3 + CCa4_to_C4)*CCa4 # ms**-1
a2_Ca4 = CCa3_to_CCa4*CCa3 + C4_to_CCa4*C4 # ms**-1
dCCa4_dt = a2_Ca4 - a1_Ca4
a1_Cainf = 0.82
yCa_inf = a1_Cainf/(1 + exp((V + 28.5)/7.8)) + 1 - a1_Cainf
tau_yCa = 1/(0.00336336209452/(0.5 + exp(V/-5.53899874036055)) + 0.00779046570737*exp(V/-49.51039631160386)) # ms
dyCa_dt = (yCa_inf - yCa)/tau_yCa

component("COMPUTE ICa ICaK")
PK = Pscale*4.574e-7 # l*F**-1*s**-1
PCa = Pscale*2.469e-4 # l*F**-1*s**-1
VF_over_RT = V/RT_over_F
VFsq_over_RT = 1000*Faraday*VF_over_RT # C*mmole**-1
a1_Ca = 1.0e-3*exp(2*VF_over_RT) - Cao*0.341 # mmole*l**-1
a2_Ca = exp(2*VF_over_RT) - 1
ICamax = PCa*4*VFsq_over_RT*a1_Ca/a2_Ca # uA*uF**-1
ICa = ICamax*yCa*Open # uA*uF**-1
Icabar = Conditional(Ge(ICamax, 0), 0, ICamax) # uA*uF**-1
PKprime = PK/(1 + Icabar/ICahalf) # l*F**-1*s**-1
a1_K = Ki*exp(VF_over_RT) - Ko # mmole*l**-1
a2_K = exp(VF_over_RT) - 1
ICaK = PKprime*Open*yCa*VFsq_over_RT*a1_K/a2_K # uA*uF**-1

component("COMPUTE DERIVATIVES OF RyR RECEPTOR STATES")
dC1_RyR = -kaplus*(CaSS*1000)**ncoop*C1_RyR + kaminus*O1_RyR # ms**-1
dO2_RyR = kbplus*(CaSS*1000)**mcoop*O1_RyR - kbminus*O2_RyR # ms**-1
dC2_RyR = kcplus*O1_RyR - kcminus*C2_RyR # ms**-1
dO1_RyR = -(dC1_RyR + dO2_RyR + dC2_RyR) # ms**-1
dC1_RyR_dt = dC1_RyR
dO2_RyR_dt = dO2_RyR
dC2_RyR_dt = dC2_RyR
dO1_RyR_dt = dO1_RyR

component("COMPUTE REVERSAL POTENTIALS")
ENa = RT_over_F*log(Nao/Nai) # mV
EK = RT_over_F*log(Ko/Ki) # mV
a1 = Ko + 0.01833*Nao # mmole*l**-1
a2 = Ki + 0.01833*Nai # mmole*l**-1
EKs = RT_over_F*log(a1/a2) # mV
ECa = 0.5*RT_over_F*log(Cao/Cai) # mV

component("INa", "COMPUTE K Ca ICab IpCa")
ICab = GCab*(V - ECa) # uA*uF**-1
IpCa = IpCamax*Cai/(KmpCa + Cai) # uA*uF**-1
VF_over_RT = V/RT_over_F
sigma = (exp(Nao/67.3) - 1)/7
a1_Na = 1 + 0.1245*exp(-0.1*VF_over_RT)
a2_Na = 0.0365*sigma*exp(-1.33*VF_over_RT)
fNaK = 1/(a1_Na + a2_Na)
a1_K = Ko/(Ko + KmKo)
a2_K = 1 + (KmNai/Nai)**1.5
INaK = INaKmax*fNaK*a1_K/a2_K # uA*uF**-1
a1_ncx = exp(eta*VF_over_RT)*Nai**3*Cao # mmole**4*l**-4
a2_ncx = exp((eta - 1)*VF_over_RT)*Nao**3*Cai # mmole**4*l**-4
a3_ncx = 1 + ksat*exp((eta - 1)*VF_over_RT)
a4_ncx = KmCa + Cao # mmole*l**-1
a5_ncx = (KmNa**3 + Nao**3)/5000 # mmole**3*l**-3
INaCa = kNaCa*(a1_ncx - a2_ncx)/(a4_ncx*a3_ncx*a5_ncx) # uA*uF**-1

component("IKs", "COMPUTE INa IKr  Ito1 IK1 INab IKp")
PKv14 = (1 - Kv43Frac)*KvScale*4.2986e-7 # l*F**-1*s**-1
GKv43 = Kv43Frac*KvScale*0.1 # mS*uF**-1
INa = GNa*(na6 + na7)*(V - ENa) # uA*uF**-1
fKo = sqrt(Ko/4)
IKr = GKr*fKo*OHerg*(V - EK) # uA*uF**-1
IKs = GKs*(O1ks + O2ks)*(V - EK) # uA*uF**-1
IKv43 = GKv43*OKv43*(V - EK) # uA*uF**-1
VF_over_RT = V/RT_over_F
VFsq_over_RT = 1000*Faraday*VF_over_RT # C*mmole**-1
a1_K = Ki*exp(VF_over_RT) - Ko # mmole*l**-1
a2 = exp(VF_over_RT) - 1
IKv14_K = PKv14*OKv14*VFsq_over_RT*a1_K/a2 # uA*uF**-1
a1_Na = Nai*exp(VF_over_RT) - Nao # mmole*l**-1
IKv14_Na = 0.02*PKv14*OKv14*VFsq_over_RT*a1_Na/a2 # uA*uF**-1
IKv14 = IKv14_K + IKv14_Na # uA*uF**-1
Ito1 = IKv43 + IKv14 # uA*uF**-1
K1_inf = 1/(0.94 + exp(1.26/RT_over_F*(V - EK)))
IK1 = GK1*sqrt(Ko/1)*K1_inf*(V - EK) # uA*uF**-1
INab = GNab*(V - ENa) # uA*uF**-1

component("I_stimulus")
past = floor(time/stim_period)*stim_period # ms
i_Stim = Conditional(And(Ge(time - past, stim_offset), Le(time - past, stim_offset + stim_duration), ), stim_amplitude, 0) # uA*uF**-1

component("COMPUTE CONCENTRATION AND VOLTAGE DERIVATIVES")
C = Acap*1.0e-3 # mF
a1 = C/(Vmyo*Faraday) # F*mole*l**-1*C**-1
a2 = C/(2*VSS*Faraday) # F*mole*l**-1*C**-1
dNai_dt = -(INa + INab + 3*(INaCa + INaK) + IKv14_Na)*a1
dKi_dt = -(IKr + IKs + IK1 + ICaK + i_Stim - 2*INaK + IKv43 + IKv14_K)*a1
dCai_dt = beta_i*(Jxfer - Jup - Jtrpn - (ICab - 2*INaCa + IpCa)*0.5*a1)
dCaSS_dt = beta_SS*(Jrel*VJSR/VSS - Jxfer*Vmyo/VSS - ICa*a2)
dCaJSR_dt = beta_JSR*(Jtr - Jrel)
dCaNSR_dt = Jup*Vmyo/VNSR - Jtr*VJSR/VNSR
i_tot = INa + ICa + ICaK + IKr + IKs + IK1 + INaCa + INaK + Ito1 + IpCa + ICab + INab + i_Stim # uA*uF**-1
dV_dt = -i_tot

component("INa")
F_over_RT = 1/RT_over_F # mV**-1
KT_over_H = 1.381e-23*TNa/6.626e-31 # ms**-1
RTNa = Rgas*TNa # J*mole**-1
RTNaF = Rgas*TNa/Faraday # mV
Temp_Scale = 1.38862291252871
alpha1 = Temp_Scale*KT_over_H*exp(-114007.462700232/RTNa + 224.114/Rgas + 0.286374268596235*V/RTNaF) # ms**-1
beta1 = Temp_Scale*KT_over_H*exp(-272470.273489681/RTNa + 708.146/Rgas + -2.28528417586424*V/RTNaF) # ms**-1
gamma1 = Temp_Scale*KT_over_H*exp(-196336.575735923/RTNa + 529.952/Rgas + 2.78084918596045*V/RTNaF) # ms**-1
Delta1 = Temp_Scale*KT_over_H*exp(-133689.9304091/RTNa + 229.205/Rgas + -1.55804214553883*V/RTNaF) # ms**-1
On = Temp_Scale*KT_over_H*exp(-62123.0784380481/RTNa + 39.295/Rgas + 0.288816042743232*V/RTNaF) # ms**-1
Of = Temp_Scale*KT_over_H*exp(-97657.8497137015/RTNa + 1.51/Rgas + 0.0684861993100685*V/RTNaF) # ms**-1
GammaGamma = Temp_Scale*KT_over_H*exp(116431.142142348/RTNa + -578.317/Rgas + 0.764126011745707*V/RTNaF) # ms**-1
DeltaDelta = Temp_Scale*KT_over_H*exp(-55700.6624658307/RTNa + -130.639/Rgas + -3.64981672927078*V/RTNaF) # ms**-1
epsilon = Temp_Scale*KT_over_H*exp(-85800.3675578326/RTNa + 70.078/Rgas) # ms**-1
omega_na = Temp_Scale*KT_over_H*exp(-121955.166154864/RTNa + 225.175/Rgas) # ms**-1
rho = Temp_Scale*KT_over_H*exp(-147813.990005035/RTNa + 338.915/Rgas + 2.1360043702126*V/RTNaF) # ms**-1
mu = Temp_Scale*KT_over_H*exp(-121322.143275242/RTNa + 193.265/Rgas + -1.74290267020903*V/RTNaF) # ms**-1
Cn = Temp_Scale*KT_over_H*exp(-287913.446530953/RTNa + 786.217/Rgas) # ms**-1
Cf = Temp_Scale*KT_over_H*exp(-59565.2236284584/RTNa + 0.00711/Rgas) # ms**-1
parameter_a = 1.40042625477401
k12 = 4*alpha1 # ms**-1
k23 = 3*alpha1 # ms**-1
k34 = 2*alpha1 # ms**-1
k45 = alpha1 # ms**-1
k56 = gamma1 # ms**-1
k67 = epsilon # ms**-1
k89 = k12*parameter_a # ms**-1
k910 = k23*parameter_a # ms**-1
k1011 = k34*parameter_a # ms**-1
k1112 = k45*parameter_a # ms**-1
k1213 = GammaGamma # ms**-1
k57 = rho # ms**-1
k21 = beta1 # ms**-1
k32 = 2*beta1 # ms**-1
k43 = 3*beta1 # ms**-1
k54 = 4*beta1 # ms**-1
k65 = Delta1 # ms**-1
k76 = omega_na # ms**-1
k98 = k21/parameter_a # ms**-1
k109 = k32/parameter_a # ms**-1
k1110 = k43/parameter_a # ms**-1
k1211 = k54/parameter_a # ms**-1
k1312 = DeltaDelta # ms**-1
k75 = mu # ms**-1
k81 = Cf # ms**-1
k92 = k81/parameter_a # ms**-1
k103 = k92/parameter_a # ms**-1
k114 = k103/parameter_a # ms**-1
k125 = k114/parameter_a # ms**-1
k136 = Of # ms**-1
k18 = Cn # ms**-1
k29 = k18*parameter_a # ms**-1
k310 = k29*parameter_a # ms**-1
k411 = k310*parameter_a # ms**-1
k512 = k411*parameter_a # ms**-1
k613 = On # ms**-1
dna1_dt = -(k18 + k12)*na1 + k21*na2 + k81*na8
dna2_dt = k12*na1 - (k21 + k23 + k29)*na2 + k32*na3 + k92*na9
dna3_dt = k23*na2 - (k32 + k34 + k310)*na3 + k43*na4 + k103*na10
dna4_dt = k34*na3 - (k43 + k45 + k411)*na4 + k54*na5 + k114*na11
dna5_dt = k45*na4 - (k54 + k56 + k57 + k512)*na5 + k65*na6 + k75*na7 + k125*na12
dna6_dt = k56*na5 - (k65 + k67 + k613)*na6 + k76*na7 + k136*na13
dna7_dt = k57*na5 + k67*na6 - (k75 + k76)*na7
dna8_dt = k18*na1 - (k81 + k89)*na8 + k98*na9
dna9_dt = k29*na2 + k89*na8 - (k98 + k92 + k910)*na9 + k109*na10
dna10_dt = k310*na3 + k910*na9 - (k1011 + k103 + k109)*na10 + k1110*na11
dna11_dt = k411*na4 + k1011*na10 - (k1110 + k114 + k1112)*na11 + k1211*na12
dna12_dt = k512*na5 + k1112*na11 - (k1211 + k125 + k1213)*na12 + k1312*na13
dna13_dt = k613*na6 + k1213*na12 - (k1312 + k136)*na13

component("IKr")
C2H_to_C3H = T_Const_HERG*0.02608362043337 # ms**-1
C3H_to_C2H = T_Const_HERG*0.14832978132145 # ms**-1
C1H_to_C2H = T_Const_HERG*A0_HERG*exp(B0_HERG*V) # ms**-1
C2H_to_C1H = T_Const_HERG*A1_HERG*exp(B1_HERG*V) # ms**-1
C3H_to_OH = T_Const_HERG*A2_HERG*exp(B2_HERG*V) # ms**-1
OH_to_C3H = T_Const_HERG*A3_HERG*exp(B3_HERG*V) # ms**-1
OH_to_IH = T_Const_HERG*A4_HERG*exp(B4_HERG*V) # ms**-1
IH_to_OH = T_Const_HERG*A5_HERG*exp(B5_HERG*V) # ms**-1
C3H_to_IH = T_Const_HERG*A6_HERG*exp(B6_HERG*V) # ms**-1
IH_to_C3H = OH_to_C3H*IH_to_OH*C3H_to_IH/(C3H_to_OH*OH_to_IH) # ms**-1
dC1Herg_dt = C2H_to_C1H*C2Herg - C1H_to_C2H*C1Herg
a1_C2 = C1H_to_C2H*C1Herg + C3H_to_C2H*C3Herg # ms**-1
a2_C2 = (C2H_to_C1H + C2H_to_C3H)*C2Herg # ms**-1
dC2Herg_dt = a1_C2 - a2_C2
a1_C3 = C2H_to_C3H*C2Herg + OH_to_C3H*OHerg + IH_to_C3H*IHerg # ms**-1
a2_C3 = (C3H_to_IH + C3H_to_OH + C3H_to_C2H)*C3Herg # ms**-1
dC3Herg_dt = a1_C3 - a2_C3
a1_O = C3H_to_OH*C3Herg + IH_to_OH*IHerg # ms**-1
a2_O = (OH_to_C3H + OH_to_IH)*OHerg # ms**-1
dOHerg_dt = a1_O - a2_O
a1_I = C3H_to_IH*C3Herg + OH_to_IH*OHerg # ms**-1
a2_I = (IH_to_C3H + IH_to_OH)*IHerg # ms**-1
dIHerg_dt = a1_I - a2_I

component("IKs")
C0ks_C1ks = 0.00795600798004 # ms**-1
C1ks_O1ks = 0.03966720676071 # ms**-1
O1ks_O2ks = 0.00767254363063*exp(0.08662945914655*V) # ms**-1
O1ks_C1ks = 0.00700806628929*exp(-0.14999754700285*V) # ms**-1
O2ks_O1ks = 0.00379737998368*exp(-0.01425668126881*V) # ms**-1
C1ks_C0ks = 0.2162557589585*exp(-0.00001889123021*V) # ms**-1
dC0ks_dt = -C0ks_C1ks*C0ks + C1ks_C0ks*C1ks
dC1ks_dt = C0ks_C1ks*C0ks - (C1ks_C0ks + C1ks_O1ks)*C1ks + O1ks_C1ks*O1ks
dO1ks_dt = C1ks_O1ks*C1ks - (O1ks_C1ks + O1ks_O2ks)*O1ks + O2ks_O1ks*O2ks
dO2ks_dt = O1ks_O2ks*O1ks - O2ks_O1ks*O2ks
