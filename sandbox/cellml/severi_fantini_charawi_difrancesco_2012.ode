# 

# gotran file generated by cellml2gotran from severi_fantini_charawi_difrancesco_2012.cellml

parameters("Rate modulation experiments",
           Iva_3_uM = 0,
           Cs_5_mM = 0,
           ACh = ScalarParam(0, unit="mM"),
           Iso_1_uM = 0,
           BAPTA_10_mM = 0)

parameters("Ca intracellular fluxes",
           tau_dif_Ca = ScalarParam(4e-5, unit="s"),
           tau_tr = ScalarParam(0.04, unit="s"),
           P_up_basal = ScalarParam(12, unit="mM*s**-1"),
           K_up = ScalarParam(0.0006, unit="mM"))

states("Ca SR release",
       R = 0.912317231017262,
       O = 1.7340201253e-7,
       I = 7.86181717518e-8,
       RI = 0.211148145512825)

parameters("Ca SR release",
           ks = ScalarParam(250000000, unit="s**-1"),
           MaxSR = 15,
           MinSR = 1,
           EC50_SR = ScalarParam(0.45, unit="mM"),
           HSR = 2.5,
           koCa = ScalarParam(10000, unit="mM**-2*s**-1"),
           kiCa = ScalarParam(500, unit="mM**-1*s**-1"),
           kim = ScalarParam(5, unit="s**-1"),
           kom = ScalarParam(60, unit="s**-1"))

parameters("Ionic values",
           Nao = ScalarParam(140, unit="mM"),
           Ki = ScalarParam(140, unit="mM"),
           Ko = ScalarParam(5.4, unit="mM"),
           Cao = ScalarParam(1.8, unit="mM"))

parameters("i_CaT",
           P_CaT = ScalarParam(0.02, unit="nA*mM**-1"))

parameters("i_to",
           g_to = ScalarParam(0.002, unit="uS"))

parameters("i_CaL",
           P_CaL = ScalarParam(0.2, unit="nA*mM**-1"))

states("i_CaL", "FCa gate",
       fCa = 0.697998543259722)

parameters("i_CaL", "FCa gate",
           alpha_fCa = ScalarParam(0.01, unit="s**-1"),
           Km_fCa = ScalarParam(0.00035, unit="mM"))

parameters("Cell parameters",
           V_jsr_part = 0.0012,
           V_i_part = 0.46,
           V_nsr_part = 0.0116,
           R_cell = ScalarParam(4, unit="um"),
           L_cell = ScalarParam(70, unit="um"),
           L_sub = ScalarParam(0.02, unit="um"))

parameters("i_Kr",
           g_Kr = ScalarParam(0.0021637, unit="uS"))

states("Ca buffering",
       fTC = 0.0180519400676086,
       fTMC = 0.281244308217086,
       fTMM = 0.501049376634,
       fCMi = 0.0373817991524254,
       fCMs = 0.054381370046,
       fCQ = 0.299624275428735)

parameters("Ca buffering",
           TC_tot = ScalarParam(0.031, unit="mM"),
           TMC_tot = ScalarParam(0.062, unit="mM"),
           CM_tot = ScalarParam(0.045, unit="mM"),
           CQ_tot = ScalarParam(10, unit="mM"),
           kf_TC = ScalarParam(88800, unit="mM**-1*s**-1"),
           kf_TMM = ScalarParam(2277, unit="mM**-1*s**-1"),
           kf_TMC = ScalarParam(227700, unit="mM**-1*s**-1"),
           kf_CM = ScalarParam(227700, unit="mM**-1*s**-1"),
           kf_CQ = ScalarParam(534, unit="mM**-1*s**-1"),
           kb_TC = ScalarParam(446, unit="s**-1"),
           kb_TMC = ScalarParam(7.51, unit="s**-1"),
           kb_TMM = ScalarParam(751, unit="s**-1"),
           kb_CM = ScalarParam(542, unit="s**-1"),
           kb_CQ = ScalarParam(445, unit="s**-1"),
           Mgi = ScalarParam(2.5, unit="mM"))

parameters("i_KACh",
           g_KACh = ScalarParam(0.00864, unit="uS"))

parameters("i_NaCa",
           K_NaCa = ScalarParam(4, unit="nA"),
           Qci = 0.1369,
           Qn = 0.4315,
           Qco = 0,
           K3ni = ScalarParam(26.44, unit="mM"),
           Kci = ScalarParam(0.0207, unit="mM"),
           K1ni = ScalarParam(395.3, unit="mM"),
           K2ni = ScalarParam(2.289, unit="mM"),
           Kcni = ScalarParam(26.44, unit="mM"),
           K3no = ScalarParam(4.663, unit="mM"),
           K1no = ScalarParam(1628, unit="mM"),
           K2no = ScalarParam(561.4, unit="mM"),
           Kco = ScalarParam(3.663, unit="mM"))

states("Ca dynamics",
       Cai = ScalarParam(1e-5, unit="mM"),
       fBAPTA = ScalarParam(0, unit="mM"),
       Ca_sub = ScalarParam(1e-5, unit="mM"),
       fBAPTA_sub = ScalarParam(0, unit="mM"),
       Ca_nsr = ScalarParam(1.05386465080816, unit="mM"),
       Ca_jsr = ScalarParam(0.316762674605, unit="mM"))

parameters("Ca dynamics",
           kfBAPTA = ScalarParam(940000, unit="mM**-1*s**-1"),
           kbBAPTA = ScalarParam(119.38, unit="s**-1"),
           T = ScalarParam(6.928, unit="s"))

parameters("i_NaK",
           Km_Kp = ScalarParam(1.4, unit="mM"),
           Km_Nap = ScalarParam(14, unit="mM"),
           i_NaK_max = ScalarParam(0.063, unit="nA"))

parameters("Membrane", "Voltage clamp",
           t_holding = ScalarParam(0.5, unit="s"),
           t_test = ScalarParam(0.5, unit="s"),
           V_test = ScalarParam(-35, unit="mV"),
           V_holding = ScalarParam(-45, unit="mV"))

parameters("i_f",
           Km_f = ScalarParam(45, unit="mM"))

parameters("i_Na",
           g_Na = ScalarParam(0.0125, unit="uS"))

states("Nai_concentration",
       Nai_ = ScalarParam(7.5, unit="mM"))

states("Membrane",
       V_ode = ScalarParam(-52, unit="mV"))

parameters("Membrane",
           R_Membrane = ScalarParam(8314.472, unit="J*kmole**-1*K**-1"),
           T_Membrane = ScalarParam(310, unit="K"),
           F = ScalarParam(96485.3415, unit="C*mole**-1"),
           C = ScalarParam(3.2e-5, unit="uF"),
           clamp_mode = 0)

states("i_Kr", "Pa gate",
       paS = 0.322999177802891,
       paF = 0.0990510403258968)

states("i_KACh", "a gate",
       a = 0)

states("i_CaT", "DT gate",
       dT = 0)

states("i_to", "q gate",
       q = 0.506139850982478)

states("i_f", "y gate",
       y = 0.181334538702451)

states("i_Na", "h gate",
       h = 1.3676940140066e-5)

states("i_to", "r gate",
       r = 0.0144605370597924)

states("i_CaT", "FT gate",
       fT = 0)

states("i_CaL", "DL gate",
       dL = 0)

states("i_Ks", "n gate",
       n = 0)

parameters("i_Ks", "n gate",
           shift = ScalarParam(0, unit="mV"))

states("i_Kr", "Pi gate",
       piy = 0.705410877258545)

states("i_Na", "m gate",
       m = 0.440131579215766)

parameters("i_Na", "m gate",
           delta_m = ScalarParam(1e-5, unit="mV"))

states("i_CaL", "FL gate",
       fL = 0.497133507285601)

component("Severi fantini charawi difrancesco 2012")
Nai = Conditional(Gt(BAPTA_10_mM, 0), 7.5, Nai_) # mM
RTONF = R_Membrane*T_Membrane/F # mV
V_clamp = Conditional(And(Gt(time, t_holding), Lt(time, t_holding + t_test), ), V_test, V_holding) # mV
V = Conditional(Ge(clamp_mode, 1), V_clamp, V_ode) # mV

component("Ca intracellular fluxes")
b_up = Conditional(Gt(Iso_1_uM, 0), -0.25, Conditional(Gt(ACh, 0), 0.7*ACh/(0.00009 + ACh), 0))
P_up = P_up_basal*(1 - b_up) # mM*s**-1
j_Ca_dif = (Ca_sub - Cai)/tau_dif_Ca # mM*s**-1
j_up = P_up/(1 + K_up/Cai) # mM*s**-1
j_tr = (Ca_nsr - Ca_jsr)/tau_tr # mM*s**-1

component("Ca SR release")
j_SRCarel = ks*O*(Ca_jsr - Ca_sub) # mM*s**-1
kCaSR = MaxSR - (MaxSR - MinSR)/(1 + (EC50_SR/Ca_jsr)**HSR)
koSRCa = koCa/kCaSR # mM**-2*s**-1
kiSRCa = kiCa*kCaSR # mM**-1*s**-1
dR_dt = kim*RI - kiSRCa*Ca_sub*R - (koSRCa*Ca_sub**2*R - kom*O)
dO_dt = koSRCa*Ca_sub**2*R - kom*O - (kiSRCa*Ca_sub*O - kim*I)
dI_dt = kiSRCa*Ca_sub*O - kim*I - (kom*I - koSRCa*Ca_sub**2*RI)
dRI_dt = kom*I - koSRCa*Ca_sub**2*RI - (kim*RI - kiSRCa*Ca_sub*R)

component("Ionic values")
E_Na = RTONF*log(Nao/Nai) # mV
E_K = RTONF*log(Ko/Ki) # mV
E_Ca = 0.5*RTONF*log(Cao/Ca_sub) # mV

component("i_CaT")
i_CaT = 2*P_CaT*V/(RTONF*(1 - exp(-1*V*2/RTONF)))*(Ca_sub - Cao*exp(-2*V/RTONF))*dT*fT # nA

component("i_to")
i_to = g_to*(V - E_K)*q*r # nA

component("i_CaL")
Iso_increase = Conditional(Gt(Iso_1_uM, 0), 1.23, 1)
i_siCa = 2*P_CaL*(V - 0)/(RTONF*(1 - exp(-1*(V - 0)*2/RTONF)))*(Ca_sub - Cao*exp(-2*(V - 0)/RTONF))*dL*fL*fCa # nA
i_siK = 0.000365*P_CaL*(V - 0)/(RTONF*(1 - exp(-1*(V - 0)/RTONF)))*(Ki - Ko*exp(-1*(V - 0)/RTONF))*dL*fL*fCa # nA
i_siNa = 0.0000185*P_CaL*(V - 0)/(RTONF*(1 - exp(-1*(V - 0)/RTONF)))*(Nai - Nao*exp(-1*(V - 0)/RTONF))*dL*fL*fCa # nA
ACh_block = 0.31*ACh/(ACh + 0.00009)
i_CaL = (i_siCa + i_siK + i_siNa)*(1 - ACh_block)*1*Iso_increase # nA

component("i_CaL", "FCa gate")
fCa_infinity = Km_fCa/(Km_fCa + Ca_sub)
tau_fCa = 0.001*fCa_infinity/alpha_fCa # s
dfCa_dt = (fCa_infinity - fCa)/tau_fCa

component("Cell parameters")
V_cell = 0.000000001*pi*R_cell**2*L_cell # mm**3
V_sub = 0.000000001*2*pi*L_sub*(R_cell - L_sub/2)*L_cell # mm**3
V_jsr = V_jsr_part*V_cell # mm**3
V_i = V_i_part*V_cell - V_sub # mm**3
V_nsr = V_nsr_part*V_cell # mm**3

component("i_Kr")
i_Kr = g_Kr*(V - E_K)*(0.9*paF + 0.1*paS)*piy # nA

component("Ca buffering")
delta_fTC = kf_TC*Cai*(1 - fTC) - kb_TC*fTC # s**-1
delta_fTMC = kf_TMC*Cai*(1 - (fTMC + fTMM)) - kb_TMC*fTMC # s**-1
delta_fTMM = kf_TMM*Mgi*(1 - (fTMC + fTMM)) - kb_TMM*fTMM # s**-1
delta_fCMi = kf_CM*Cai*(1 - fCMi) - kb_CM*fCMi # s**-1
delta_fCMs = kf_CM*Ca_sub*(1 - fCMs) - kb_CM*fCMs # s**-1
delta_fCQ = kf_CQ*Ca_jsr*(1 - fCQ) - kb_CQ*fCQ # s**-1
dfTC_dt = delta_fTC
dfTMC_dt = delta_fTMC
dfTMM_dt = delta_fTMM
dfCMi_dt = delta_fCMi
dfCMs_dt = delta_fCMs
dfCQ_dt = delta_fCQ

component("i_KACh")
i_KACh = Conditional(Gt(ACh, 0), g_KACh*(V - E_K)*(1 + exp((V + 20)/20))*a, 0) # nA

component("i_NaCa")
k43 = Nai/(K3ni + Nai)
k41 = exp(-Qn*V/(2*RTONF))
di = 1 + Ca_sub/Kci*(1 + exp(-Qci*V/RTONF) + Nai/Kcni) + Nai/K1ni*(1 + Nai/K2ni*(1 + Nai/K3ni))
k34 = Nao/(K3no + Nao)
k32 = exp(Qn*V/(2*RTONF))
do_ = 1 + Cao/Kco*(1 + exp(Qco*V/RTONF)) + Nao/K1no*(1 + Nao/K2no*(1 + Nao/K3no))
k12 = Ca_sub/Kci*exp(-Qci*V/RTONF)/di
k14 = Nai/K1ni*Nai/K2ni*(1 + Nai/K3ni)*exp(Qn*V/(2*RTONF))/di
k21 = Cao/Kco*exp(Qco*V/RTONF)/do_
k23 = Nao/K1no*Nao/K2no*(1 + Nao/K3no)*exp(-Qn*V/(2*RTONF))/do_
x1 = k41*k34*(k23 + k21) + k21*k32*(k43 + k41)
x2 = k32*k43*(k14 + k12) + k41*k12*(k34 + k32)
x3 = k14*k43*(k23 + k21) + k12*k23*(k43 + k41)
x4 = k23*k34*(k14 + k12) + k14*k21*(k34 + k32)
i_NaCa = K_NaCa*(x2*k21 - x1*k12)/(x1 + x2 + x3 + x4) # nA

component("Ca dynamics")
BAPTA = Conditional(And(Gt(BAPTA_10_mM, 0), Gt(time, T), ), 10, 0) # mM
dCai_dt = 1*(j_Ca_dif*V_sub - j_up*V_nsr)/V_i - (CM_tot*delta_fCMi + TC_tot*delta_fTC + TMC_tot*delta_fTMC) - (kfBAPTA*Cai*(BAPTA - fBAPTA) - kbBAPTA*fBAPTA)
dfBAPTA_dt = kfBAPTA*Cai*(BAPTA - fBAPTA) - kbBAPTA*fBAPTA
dCa_sub_dt = j_SRCarel*V_jsr/V_sub - ((i_siCa + i_CaT - 2*i_NaCa)/(2*F*V_sub) + j_Ca_dif + CM_tot*delta_fCMs) - (kfBAPTA*Ca_sub*(BAPTA - fBAPTA_sub) - kbBAPTA*fBAPTA_sub)
dfBAPTA_sub_dt = kfBAPTA*Ca_sub*(BAPTA - fBAPTA_sub) - kbBAPTA*fBAPTA_sub
dCa_nsr_dt = j_up - j_tr*V_jsr/V_nsr
dCa_jsr_dt = j_tr - (j_SRCarel + CQ_tot*delta_fCQ)

component("i_NaK")
Iso_increase = Conditional(Gt(Iso_1_uM, 0), 1.2, 1)
i_NaK = Iso_increase*i_NaK_max*(1 + (Km_Kp/Ko)**1.2)**-1*(1 + (Km_Nap/Nai)**1.3)**-1*(1 + exp(-(V - E_Na + 110)/20))**-1 # nA

component("i_Ks")
g_Ks = Conditional(Gt(Iso_1_uM, 0), 1.2*0.0016576, 0.0016576) # uS
E_Ks = RTONF*log((Ko + 0*Nao)/(Ki + 0*Nai)) # mV
i_Ks = g_Ks*(V - E_Ks)*n**2 # nA

component("i_f")
g_f_Na = Conditional(Ge(Iva_3_uM, 1), 0.03*(1 - 0.66), 0.03) # uS
g_f_K = Conditional(Ge(Iva_3_uM, 1), 0.03*(1 - 0.66), 0.03) # uS
ICs_on_Icontrol = Conditional(Ge(Cs_5_mM, 1), 10.6015/5/(10.6015/5 + exp(-0.71*V/25)), 1)
i_fNa = y**2*Ko/(Ko + Km_f)*g_f_Na*(V - E_Na)*ICs_on_Icontrol # nA
i_fK = y**2*Ko/(Ko + Km_f)*g_f_K*(V - E_K)*ICs_on_Icontrol # nA
i_f = i_fNa + i_fK # nA

component("i_Na")
E_mh = RTONF*log((Nao + 0.12*Ko)/(Nai + 0.12*Ki)) # mV
i_Na = g_Na*m**3*h*(V - E_mh) # nA

component("Nai_concentration")
dNai__dt = -1*(i_Na + i_fNa + i_siNa + 3*i_NaK + 3*i_NaCa)/(1*(V_i + V_sub)*F)

component("Membrane")
i_tot = i_f + i_Kr + i_Ks + i_to + i_NaK + i_NaCa + i_Na + i_CaL + i_CaT + i_KACh # nA
dV_ode_dt = -i_tot/C

component("i_Kr", "Pa gate")
alfapaF = 1/(1 + exp(-(V + 23.2)/6.6))/0.84655354/(37.2*exp(V/11.9) + 0.96*exp(-V/18.5)) # s**-1
betapaF = 4*((37.2*exp(V/15.9) + 0.96*exp(-V/22.5))/0.84655354 - 1/(1 + exp(-(V + 23.2)/10.6))/0.84655354/(37.2*exp(V/15.9) + 0.96*exp(-V/22.5))) # s**-1
pa_infinity = 1/(1 + exp(-(V + 14.8)/8.5))
tau_paS = 0.84655354/(4.2*exp(V/17) + 0.15*exp(-V/21.6)) # s
tau_paF = 1/(30*exp(V/10) + exp(-V/12)) # s
dpaS_dt = (pa_infinity - paS)/tau_paS
dpaF_dt = (pa_infinity - paF)/tau_paF

component("i_KACh", "a gate")
alpha_a = (3.5988 - 0.025641)/(1 + 0.0000012155/(1*ACh)**1.6951) + 0.025641 # s**-1
beta_a = 10*exp(0.0133*(V + 40)) # s**-1
a_infinity = alpha_a/(alpha_a + beta_a)
tau_a = 1/(alpha_a + beta_a) # s
da_dt = (a_infinity - a)/tau_a

component("i_CaT", "DT gate")
dT_infinity = 1/(1 + exp(-(V + 38.3)/5.5))
tau_dT = 0.001/(1.068*exp((V + 38.3)/30) + 1.068*exp(-(V + 38.3)/30)) # s
ddT_dt = (dT_infinity - dT)/tau_dT

component("i_to", "q gate")
q_infinity = 1/(1 + exp((V + 49)/13))
tau_q = 0.001*0.6*(65.17/(0.57*exp(-0.08*(V + 44)) + 0.065*exp(0.1*(V + 45.93))) + 10.1) # s
dq_dt = (q_infinity - q)/tau_q

component("i_f", "y gate")
ACh_shift = Conditional(Gt(ACh, 0), -1 - 9.898*(1*ACh)**0.618/((1*ACh)**0.618 + 0.00122423), 0) # mV
Iso_shift = Conditional(Gt(Iso_1_uM, 0), 7.5, 0) # mV
tau_y = 0.7166529/(0.0708*exp(-(V + 5 - ACh_shift - Iso_shift)/20.2791) + 10.6*exp((V - ACh_shift - Iso_shift)/18)) # s
y_infinity = 1/(1 + exp((V + 52.5 - ACh_shift - Iso_shift)/9))
dy_dt = (y_infinity - y)/tau_y

component("i_Na", "h gate")
alpha_h = 20*exp(-0.125*(V + 75)) # s**-1
beta_h = 2000/(320*exp(-0.1*(V + 75)) + 1) # s**-1
dh_dt = alpha_h*(1 - h) - beta_h*h

component("i_to", "r gate")
r_infinity = 1/(1 + exp(-(V - 19.3)/15))
tau_r = 0.001*0.66*1.4*(15.59/(1.037*exp(0.09*(V + 30.61)) + 0.369*exp(-0.12*(V + 23.84))) + 2.98) # s
dr_dt = (r_infinity - r)/tau_r

component("i_CaT", "FT gate")
fT_infinity = 1/(1 + exp((V + 58.7)/3.8))
tau_fT = 1/(16.67*exp(-(V + 75)/83.3) + 16.67*exp((V + 75)/15.38)) # s
dfT_dt = (fT_infinity - fT)/tau_fT

component("i_CaL", "DL gate")
Iso_shift = Conditional(Gt(Iso_1_uM, 0), -8, 0) # mV
Iso_slope = Conditional(Gt(Iso_1_uM, 0), 0.69, 1)
dL_infinity = 1/(1 + exp(-(V + 20.3 - Iso_shift)/(Iso_slope*4.2)))
adVm = Conditional(Eq(V, -41.8), -41.80001, Conditional(Eq(V, 0), 0, Conditional(Eq(V, -6.8), -6.80001, V))) # mV
bdVm = Conditional(Eq(V, -1.8), -1.80001, V) # mV
alpha_dL = -0.02839*(adVm + 41.8 - Iso_shift)/(exp(-(adVm + 41.8 - Iso_shift)/2.5) - 1) - 0.0849*(adVm + 6.8 - Iso_shift)/(exp(-(adVm + 6.8 - Iso_shift)/4.8) - 1) # s**-1
beta_dL = 0.01143*(bdVm + 1.8 - Iso_shift)/(exp((bdVm + 1.8 - Iso_shift)/2.5) - 1) # s**-1
tau_dL = 0.001/(alpha_dL + beta_dL) # s
ddL_dt = (dL_infinity - dL)/tau_dL

component("i_Ks", "n gate")
Iso_shift = Conditional(Gt(Iso_1_uM, 0), -14, 0) # mV
n_infinity = 14/(1 + exp(-(V - 40 - Iso_shift)/12))/(14/(1 + exp(-(V - 40 - Iso_shift)/12)) + 1*exp(-(V - Iso_shift)/45))
alpha_n = 28/(1 + exp(-(V - 40 - Iso_shift)/3)) # s**-1
beta_n = 1*exp(-(V - Iso_shift - shift - 5)/25) # s**-1
tau_n = 1/(alpha_n + beta_n) # s
dn_dt = (n_infinity - n)/tau_n

component("i_Kr", "Pi gate")
tau_pi = 1/(100*exp(-V/54.645) + 656*exp(V/106.157)) # s
pi_infinity = 1/(1 + exp((V + 28.6)/17.1))
dpiy_dt = (pi_infinity - piy)/tau_pi

component("i_Na", "m gate")
E0_m = V + 41 # mV
alpha_m = Conditional(Lt(abs(E0_m), delta_m), 2000, 200*E0_m/(1 - exp(-0.1*E0_m))) # s**-1
beta_m = 8000*exp(-0.056*(V + 66)) # s**-1
dm_dt = alpha_m*(1 - m) - beta_m*m

component("i_CaL", "FL gate")
fL_infinity = 1/(1 + exp((V + 37.4)/5.3))
tau_fL = 0.001*(44.3 + 230*exp(-((V + 36)/10)**2)) # s
dfL_dt = (fL_infinity - fL)/tau_fL

