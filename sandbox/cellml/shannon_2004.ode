# A mathematical treatment of integrated Ca dynamics within the ventricular myocyte
#
# ABSTRACT: We have developed a detailed mathematical model for Ca2+ handling and
# ionic currents in the rabbit ventricular myocyte. The objective was to develop
# a model that: 1), accurately reflects Ca-dependent Ca release; 2), uses
# realistic parameters, particularly those that concern Ca transport from the
# cytosol; 3), comes to steady state; 4), simulates basic excitation-contraction
# coupling phenomena; and 5), runs on a normal desktop computer. The model
# includes the following novel features: 1), the addition of a subsarcolemmal
# compartment to the other two commonly formulated cytosolic compartments
# (junctional and bulk) because ion channels in the membrane sense ion
# concentrations that differ from bulk; 2), the use of realistic cytosolic Ca
# buffering parameters; 3), a reversible sarcoplasmic reticulum (SR) Ca pump; 4),
# a scheme for Na-Ca exchange transport that is [Na]i dependent and
# allosterically regulated by [Ca]i; and 5), a practical model of SR Ca release
# including both inactivation/adaptation and SR Ca load dependence. The data
# describe normal electrical activity and Ca handling characteristics of the
# cardiac myocyte and the SR Ca load dependence of these processes. The model
# includes a realistic balance of Ca removal mechanisms (e.g., SR Ca pump versus
# Na-Ca exchange), and the phenomena of rest decay and frequency-dependent
# inotropy. A particular emphasis is placed upon reproducing the nonlinear
# dependence of gain and fractional SR Ca release upon SR Ca load. We conclude
# that this model is more robust than many previously existing models and
# reproduces many experimental results using parameters based largely on
# experimental measurements in myocytes.
#
# The complete original paper reference is cited below:
#
# A mathematical treatment of integrated Ca dynamics within the ventricular
# myocyte, Thomas R. Shannon, Fei Wang, Jose Puglisi, Christopher Weber and
# Donald M. Bers, 2004,Biophysical Journal, 87, 3351-3371.PubMed ID: 15347581
#

# gotran file generated by cellml2gotran from shannon_wang_puglisi_weber_bers_2004_b.cellml

parameters("Model parameters",
           Ko = ScalarParam(5.4, unit="mM"),
           Nao = ScalarParam(140, unit="mM"),
           Cao = ScalarParam(1.8, unit="mM"),
           Clo = ScalarParam(150, unit="mM"),
           Ki = ScalarParam(135, unit="mM"),
           Mgi = ScalarParam(1, unit="mM"),
           Mgo = ScalarParam(1, unit="mM"),
           Cli = ScalarParam(15, unit="mM"),
           R = ScalarParam(8314.3, unit="J*kmole**-1*K**-1"),
           T = ScalarParam(310, unit="K"),
           F = ScalarParam(96486.7, unit="C*mole**-1"),
           Cm_per_area = ScalarParam(2e-6, unit="F*cm**-2"),
           cell_length = ScalarParam(100, unit="um"),
           cell_radius = ScalarParam(10.25, unit="um"),
           jct_radius = ScalarParam(0.16, unit="um"),
           jct_depth = ScalarParam(0.015, unit="um"),
           SL_depth = ScalarParam(0.045, unit="um"))

parameters("INa",
           G_INa = ScalarParam(16, unit="mS*uF**-1"),
           Fx_Na_jct = 0.11,
           Fx_Na_SL = 0.89)

states("INa", "h gate",
       h = 0.987140350343)

states("INa", "j gate",
       j = 0.991822731369)

states("INa", "m gate",
       m = 0.001370685156)

parameters("INab",
           G_NaBk = ScalarParam(0.297e-3, unit="mS*uF**-1"),
           Fx_NaBk_jct = 0.11,
           Fx_NaBk_SL = 0.89)

parameters("INaK",
           Q10_NaK = 1.63,
           H_NaK = 4,
           Q10_Km_Nai = 1.49,
           Km_Nai = ScalarParam(11, unit="mM"),
           Km_Ko = ScalarParam(1.5, unit="mM"),
           I_NaK_max = ScalarParam(1.91, unit="uA*uF**-1"),
           Fx_NaK_jct = 0.11,
           Fx_NaK_SL = 0.89)

states("IKr", "Xr gate",
       Xr = 0.008471550841)

parameters("IKs",
           Fx_Ks_jct = 0.11,
           Fx_Ks_SL = 0.89,
           pKNa = 0.01833)

states("IKs", "Xs gate",
       Xs = 0.00687399199)

states("Itos", "X_gate",
       X_tos = 0.004011272375)

states("Itos", "Y_gate",
       Y_tos = 0.293519921626)

states("Itos", "R_gate",
       R_tos_other = 0.383430556383)

parameters("Itof",
           G_tof = ScalarParam(0.06, unit="mS*uF**-1"))

states("Itof", "Itof X gate",
       X_tof = 0.00401120993)

states("Itof", "Itof Y gate",
       Y_tof = 0.9946314893)

parameters("IKp",
           g_Kp = ScalarParam(0.001, unit="mS*uF**-1"))

parameters("ICl Ca",
           G_Cl = ScalarParam(0.109625, unit="mS*uF**-1"),
           Kd_ClCa = ScalarParam(0.1, unit="mM"),
           Fx_Cl_jct = 0.11,
           Fx_Cl_SL = 0.89)

parameters("IClb",
           G_ClBk = ScalarParam(0.009, unit="mS*uF**-1"))

states("ICaL", "d gate",
       d = 0.000006997531)

states("ICaL", "f gate",
       f = 1.000675515962)

states("ICaL", "FCa gate",
       fCaB_SL = 0.015352888928,
       fCaB_jct = 0.024609183734)

parameters("INaCa",
           V_max_INaCa = ScalarParam(9, unit="uA*uF**-1"),
           Fx_NCX_jct = 0.11,
           Fx_NCX_SL = 0.89,
           Q10_NCX = 1.57,
           K_mNai = ScalarParam(12.29, unit="mM"),
           K_mCao = ScalarParam(1.3, unit="mM"),
           K_mNao = ScalarParam(87.5, unit="mM"),
           K_mCai = ScalarParam(0.00359, unit="mM"),
           Kd_act = ScalarParam(0.000256, unit="mM"),
           ksat = 0.27,
           eta = 0.35,
           HNa = 3)

parameters("ICap",
           V_max_ICap = ScalarParam(2.2e-6, unit="mM*ms**-1"),
           Fx_SLCaP_jct = 0.11,
           Fx_SLCaP_SL = 0.89,
           Q10_SLCaP = 2.35,
           Km = ScalarParam(0.0005, unit="mM"),
           H_ICap = 1.6,
           V_maxAF = ScalarParam(0.0673, unit="uA*uF**-1"))

parameters("ICab",
           G_CaBk = ScalarParam(0.0002513, unit="mS*uF**-1"),
           Fx_CaBk_jct = 0.11,
           Fx_CaBk_SL = 0.89)

states("Jrel SR",
       R_Jrel = 0.884673513138,
       O = 0.000000711264,
       I = 0.00000009272)

parameters("Jrel SR",
           Max_SR = 15,
           Min_SR = 1,
           EC50_SR = ScalarParam(0.45, unit="mM"),
           ks = ScalarParam(25, unit="ms**-1"),
           koCa = ScalarParam(10, unit="mM**-2*ms**-1"),
           kom = ScalarParam(0.06, unit="ms**-1"),
           kiCa = ScalarParam(0.5, unit="mM**-1*ms**-1"),
           kim = ScalarParam(0.005, unit="ms**-1"),
           HSR = 2.5)

parameters("Jleak SR",
           KSRleak = ScalarParam(5.348e-6, unit="ms**-1"))

parameters("Jpump SR",
           V_max = ScalarParam(286e-6, unit="mM*ms**-1"),
           Q10_SRCaP = 2.6,
           Kmf = ScalarParam(0.000246, unit="mM"),
           Kmr = ScalarParam(1.7, unit="mM"),
           H = 1.787)

parameters("Ion diffusion",
           D_Ca_jct_SL = ScalarParam(1.64e-6, unit="dm**2*s**-1"),
           D_Ca_SL_cytosol = ScalarParam(1.22e-6, unit="dm**2*s**-1"),
           D_Na_jct_SL = ScalarParam(1.09e-5, unit="dm**2*s**-1"),
           D_Na_SL_cytosol = ScalarParam(1.79e-5, unit="dm**2*s**-1"),
           x_jct_SL = ScalarParam(0.5, unit="um"),
           x_SL_cytosol = ScalarParam(0.45, unit="um"),
           A_jct_SL = ScalarParam(3.01e-6, unit="cm**2"),
           A_SL_cytosol = ScalarParam(1.3e-4, unit="cm**2"))

states("Ca buffer", "Cytosolic",
       Ca_TroponinC = ScalarParam(0.008963736337, unit="mM"),
       Ca_TroponinC_Ca_Mg = ScalarParam(0.117995194438, unit="mM"),
       Mg_TroponinC_Ca_Mg = ScalarParam(0.010337654274, unit="mM"),
       Ca_Calmodulin = ScalarParam(0.000295961245, unit="mM"),
       Ca_Myosin = ScalarParam(0.001984672275, unit="mM"),
       Mg_Myosin = ScalarParam(0.137497736234, unit="mM"),
       Ca_SRB = ScalarParam(0.002177112381, unit="mM"))

parameters("Ca buffer", "Cytosolic",
           Bmax_TroponinC = ScalarParam(0.07, unit="mM"),
           Bmax_TroponinC_Ca_Mg_Ca = ScalarParam(0.14, unit="mM"),
           Bmax_TroponinC_Ca_Mg_Mg = ScalarParam(0.14, unit="mM"),
           Bmax_Calmodulin = ScalarParam(0.024, unit="mM"),
           Bmax_Myosin_Ca = ScalarParam(0.14, unit="mM"),
           Bmax_Myosin_Mg = ScalarParam(0.14, unit="mM"),
           Bmax_SRB = ScalarParam(0.019, unit="mM"),
           kon_TroponinC = ScalarParam(32.7, unit="mM**-1*ms**-1"),
           kon_TroponinC_Ca_Mg_Ca = ScalarParam(2.37, unit="mM**-1*ms**-1"),
           kon_TroponinC_Ca_Mg_Mg = ScalarParam(3e-3, unit="mM**-1*ms**-1"),
           kon_Calmodulin = ScalarParam(34, unit="mM**-1*ms**-1"),
           kon_Myosin_Ca = ScalarParam(13.8, unit="mM**-1*ms**-1"),
           kon_Myosin_Mg = ScalarParam(15.7e-3, unit="mM**-1*ms**-1"),
           kon_SRB = ScalarParam(100, unit="mM**-1*ms**-1"),
           koff_TroponinC = ScalarParam(19.6e-3, unit="ms**-1"),
           koff_TroponinC_Ca_Mg_Ca = ScalarParam(0.032e-3, unit="ms**-1"),
           koff_TroponinC_Ca_Mg_Mg = ScalarParam(3.33e-3, unit="ms**-1"),
           koff_Calmodulin = ScalarParam(238e-3, unit="ms**-1"),
           koff_Myosin_Ca = ScalarParam(0.46e-3, unit="ms**-1"),
           koff_Myosin_Mg = ScalarParam(0.057e-3, unit="ms**-1"),
           koff_SRB = ScalarParam(60e-3, unit="ms**-1"))

states("Ca buffer", "Indo fluo  not connected",
       Ca_Indo1_Cytosol = ScalarParam(0, unit="mM"),
       Ca_Indo1_SL = ScalarParam(0, unit="mM"),
       Ca_Indo1_jct = ScalarParam(0, unit="mM"),
       Ca_Fluo3_Cytosol = ScalarParam(0, unit="mM"),
       Ca_Fluo3_SL = ScalarParam(0, unit="mM"),
       Ca_Fluo3_jct = ScalarParam(0, unit="mM"))

parameters("Ca buffer", "Indo fluo  not connected",
           Indo1 = ScalarParam(0, unit="mM"),
           Fluo3 = ScalarParam(0, unit="mM"),
           Bmax_Indo1_Cytosol = ScalarParam(0.025, unit="mM"),
           Bmax_Indo1_SL = ScalarParam(0.00077, unit="mM"),
           Bmax_Indo1_jct = ScalarParam(0.00002, unit="mM"),
           Bmax_Fluo3_Cytosol = ScalarParam(0.025, unit="mM"),
           Bmax_Fluo3_SL = ScalarParam(0.00077, unit="mM"),
           Bmax_Fluo3_jct = ScalarParam(0.00002, unit="mM"),
           kon_Indo1 = ScalarParam(100, unit="mM**-2*ms**-1"),
           kon_Fluo3 = ScalarParam(100, unit="mM**-2*ms**-1"),
           koff_Indo1 = ScalarParam(60e-3, unit="ms**-1"),
           koff_Fluo3 = ScalarParam(110e-3, unit="ms**-1"))

parameters("Itos",
           G_tos = ScalarParam(0.02, unit="mS*uF**-1"))

parameters("ICaL",
           PCa = ScalarParam(5.4e-4, unit="l*mF**-1*s**-1"),
           PNa = ScalarParam(1.5e-8, unit="l*mF**-1*s**-1"),
           PK = ScalarParam(2.7e-7, unit="l*mF**-1*s**-1"),
           Fx_ICaL_jct = 0.9,
           Fx_ICaL_SL = 0.1,
           gamma_Cai = 0.341,
           gamma_Cao = 0.341,
           gamma_Nai = 0.75,
           gamma_Nao = 0.75,
           gamma_Ki = 0.75,
           gamma_Ko = 0.75,
           Q10_CaL = 1.8)

states("Na buffer",
       Na_jct_buf = ScalarParam(3.557055389701, unit="mM"),
       Na_SL_buf = ScalarParam(0.776121392467, unit="mM"),
       Na_jct = ScalarParam(8.872823559072, unit="mM"),
       Na_SL = ScalarParam(8.874077316753, unit="mM"),
       Nai = ScalarParam(8.874461106492, unit="mM"))

parameters("Na buffer",
           Bmax_SL = ScalarParam(1.65, unit="mM"),
           Bmax_jct = ScalarParam(3.7, unit="mM"),
           kon = ScalarParam(0.0001, unit="mM**-1*ms**-1"),
           koff = ScalarParam(1e-3, unit="ms**-1"))

states("Ca buffer",
       Ca_Calsequestrin = ScalarParam(1.186496899338, unit="mM"),
       Ca_SLB_SL = ScalarParam(0.009868629147, unit="mM"),
       Ca_SLB_jct = ScalarParam(0.007780801995, unit="mM"),
       Ca_SLHigh_SL = ScalarParam(0.114438990328, unit="mM"),
       Ca_SLHigh_jct = ScalarParam(0.077503874257, unit="mM"),
       Ca_SR = ScalarParam(0.545611267699, unit="mM"),
       Ca_jct = ScalarParam(0.000174843061, unit="mM"),
       Ca_SL = ScalarParam(0.000106395937, unit="mM"),
       Cai = ScalarParam(0.000087350002, unit="mM"))

parameters("Ca buffer",
           Bmax_SLB_SL = ScalarParam(0.0374, unit="mM"),
           Bmax_SLB_jct = ScalarParam(0.0046, unit="mM"),
           Bmax_SLHigh_SL = ScalarParam(0.0134, unit="mM"),
           Bmax_SLHigh_jct = ScalarParam(0.00165, unit="mM"),
           Bmax_Calsequestrin = ScalarParam(0.14, unit="mM"),
           kon_SL = ScalarParam(100, unit="mM**-1*ms**-1"),
           kon_Calsequestrin = ScalarParam(100, unit="mM**-1*ms**-1"),
           koff_SLB = ScalarParam(1.3, unit="ms**-1"),
           koff_SLHigh = ScalarParam(30e-3, unit="ms**-1"),
           koff_Calsequestrin = ScalarParam(65, unit="ms**-1"))

states("Cell",
       V = ScalarParam(-85.719687955637, unit="mV"))

parameters("Cell",
           stim_start = ScalarParam(100, unit="ms"),
           stim_period = ScalarParam(1000, unit="ms"),
           stim_duration = ScalarParam(5, unit="ms"),
           stim_amplitude = ScalarParam(9.5, unit="uA*uF**-1"))

component("Model parameters")
Cm = Cm_per_area*2*cell_radius/10000*pi*cell_length/10000 # F
Vol_Cell = 3.141592654*(cell_radius/1000)**2*cell_length/1000**3 # l
Vol_SR = 0.035*Vol_Cell # l
Vol_SL = 0.02*Vol_Cell # l
Vol_jct = 0.00051*Vol_Cell # l
Vol_cytosol = 0.65*Vol_Cell # l
Vol_mito = Vol_Cell - (Vol_SR + Vol_SL + Vol_jct + Vol_cytosol) # l

component("Reversal potentials")
E_Na_jct = R*T/F*log(Nao/Na_jct) # mV
E_Na_SL = R*T/F*log(Nao/Na_SL) # mV
E_Ca_jct = R*T/(2*F)*log(Cao/Ca_jct) # mV
E_Ca_SL = R*T/(2*F)*log(Cao/Ca_SL) # mV
E_K = R*T/F*log(Ko/Ki) # mV
E_Cl = -R*T/F*log(Clo/Cli) # mV

component("INa")
openProb = m**3*h*j
i_Na_jct = Fx_Na_jct*G_INa*openProb*(V - E_Na_jct) # uA*uF**-1
i_Na_SL = Fx_Na_SL*G_INa*openProb*(V - E_Na_SL) # uA*uF**-1
i_Na = i_Na_jct + i_Na_SL # uA*uF**-1

component("INa", "h gate")
alpha_h = Conditional(Lt(V, -40), 0.135*exp((80 + V)/-6.8), 0) # ms**-1
beta_h = Conditional(Lt(V, -40), 3.56*exp(0.079*V) + 3.1e5*exp(0.35*V), 1/(0.13*(1 + exp((V + 10.66)/-11.1)))) # ms**-1
tau_h = 1/(alpha_h + beta_h) # ms
h_infinity = alpha_h/(alpha_h + beta_h)
dh_dt = (h_infinity - h)/tau_h

component("INa", "j gate")
alpha_j = Conditional(Lt(V, -40), (-1.2714e5*exp(0.2444*V) - 3.474e-5*exp(-0.04391*V))*(V + 37.78)/1/(1 + exp(0.311*(V + 79.23))), 0) # ms**-1
beta_j = Conditional(Lt(V, -40), 0.1212*exp(-0.01052*V)/(1 + exp(-0.1378*(V + 40.14))), 0.3*exp(-2.535e-7*V)/(1 + exp(-0.1*(V + 32)))) # ms**-1
tau_j = 1/(alpha_j + beta_j) # ms
j_infinity = alpha_j/(alpha_j + beta_j)
dj_dt = (j_infinity - j)/tau_j

component("INa", "m gate")
alpha_m = 0.32*(V + 47.13)/1/(1 - exp(-0.1*(V + 47.13))) # ms**-1
beta_m = 0.08*exp(-V/11) # ms**-1
tau_m = 1/(alpha_m + beta_m) # ms
m_infinity = alpha_m/(alpha_m + beta_m)
dm_dt = (m_infinity - m)/tau_m

component("INab")
i_Nab_jct = Fx_NaBk_jct*G_NaBk*(V - E_Na_jct) # uA*uF**-1
i_Nab_SL = Fx_NaBk_SL*G_NaBk*(V - E_Na_SL) # uA*uF**-1
i_Nab = i_Nab_jct + i_Nab_SL # uA*uF**-1

component("INaK")
Q_NaK = Q10_NaK**((T - 310)/10)
Q_Km_Nai = Q10_Km_Nai**((T - 310)/10)
sigma = (exp(Nao/67.3) - 1)/7
f_NaK = 1/(1 + 0.1245*exp(-0.1*V*F/(R*T)) + 0.0365*sigma*exp(-V*F/(R*T)))
i_NaK_jct = Fx_NaK_jct*Q_NaK*I_NaK_max*f_NaK/(1 + (Q_Km_Nai*Km_Nai/Na_jct)**H_NaK)*Ko/(Ko + Km_Ko) # uA*uF**-1
i_NaK_SL = Fx_NaK_SL*Q_NaK*I_NaK_max*f_NaK/(1 + (Q_Km_Nai*Km_Nai/Na_SL)**H_NaK)*Ko/(Ko + Km_Ko) # uA*uF**-1
i_NaK = i_NaK_jct + i_NaK_SL # uA*uF**-1

component("IKr", "Xr gate")
Xr_infinity = 1/(1 + exp(-(50 + V)/7.5))
tau_Xr = 1/(0.00138*(V + 7)/(1 - exp(-0.123*(V + 7))) + 0.00061*(V + 10)/(exp(0.145*(V + 10)) - 1)) # ms
dXr_dt = (Xr_infinity - Xr)/tau_Xr

component("IKr", "Rr gate")
Rr = 1/(1 + exp((33 + V)/22.4))

component("IKs")
pCa_jct = -log(Ca_jct/1 + 3)
pCa_SL = -log(Ca_SL/1 + 3)
G_Ks_jct = 0.07*(0.057 + 0.19/(1 + exp(-7.2 + pCa_jct/0.6))) # mS*uF**-1
G_Ks_SL = 0.07*(0.057 + 0.19/(1 + exp(-7.2 + pCa_SL/0.6))) # mS*uF**-1
E_Ks_jct = R*T/F*log((Ko + pKNa*Nao)/(Ki + pKNa*Na_jct)) # mV
E_Ks_SL = R*T/F*log((Ko + pKNa*Nao)/(Ki + pKNa*Na_SL)) # mV
E_Ks = R*T/F*log((Ko + pKNa*Nao)/(Ki + pKNa*Nai)) # mV
i_Ks_jct = Fx_Ks_jct*G_Ks_jct*Xs**2*(V - E_Ks) # uA*uF**-1
i_Ks_SL = Fx_Ks_SL*G_Ks_SL*Xs**2*(V - E_Ks) # uA*uF**-1
i_Ks = i_Ks_jct + i_Ks_SL # uA*uF**-1

component("IKs", "Xs gate")
Xs_infinity = 1/(1 + exp(-(V - 1.5)/16.7))
tau_Xs = 1/(7.19e-5*(V + 30)/(1 - exp(-0.148*(V + 30))) + 1.31e-4*(V + 30)/(-1 + exp(0.0687*(V + 30)))) # ms
dXs_dt = (Xs_infinity - Xs)/tau_Xs

component("Itos", "X_gate")
X_tos_infinity = 1/(1 + exp(-(V + 3)/15))
tau_X_tos = 9/(1 + exp((V + 3)/15)) + 0.5 # ms
dX_tos_dt = (X_tos_infinity - X_tos)/tau_X_tos

component("Itos", "Y_gate")
Y_tos_infinity = 1/(1 + exp((V + 33.5)/10))
tau_Y_tos = 3000/(1 + exp((V + 60)/10)) + 30 # ms
dY_tos_dt = (Y_tos_infinity - Y_tos)/tau_Y_tos

component("Itos", "R_gate")
R_tos_infinity = 1/(1 + exp((V + 33.5)/10))
tau_R_tos = 2.8e3/(1 + exp((V + 60)/10)) + 220 # ms
R_tos = R_tos_infinity
dR_tos_other_dt = (R_tos_infinity - R_tos)/tau_R_tos

component("Itof")
i_tof = G_tof*X_tof*Y_tof*(V - E_K) # uA*uF**-1

component("Itof", "Itof X gate")
X_tof_infinity = 1/(1 + exp(-(V + 3)/15))
tau_X_tof = 3.5*exp(-(V/30)**2) + 1.5 # ms
dX_tof_dt = (X_tof_infinity - X_tof)/tau_X_tof

component("Itof", "Itof Y gate")
Y_tof_infinity = 1/(1 + exp((V + 33.5)/10))
tau_Y_tof = 20/(1 + exp((V + 33.5)/10)) + 20 # ms
dY_tof_dt = (Y_tof_infinity - Y_tof)/tau_Y_tof

component("IK1", "K1 gate")
alpha_K1 = 1.02/(1 + exp(0.2385*(V - (E_K + 59.215)))) # ms**-1
beta_K1 = (0.49124*exp(0.08032*(V - E_K + 5.476)) + 1*exp(0.06175*(V - (E_K + 594.31))))/(1 + exp(-0.5143*(V - E_K + 4.753))) # ms**-1
K1_infinity = alpha_K1/(alpha_K1 + beta_K1)

component("IKp")
i_Kp = g_Kp*(V - E_K)/(1 + exp(7.488 - V/5.98)) # uA*uF**-1

component("ICl Ca")
i_Cl_Ca = G_Cl*(V - E_Cl)*(Fx_Cl_jct/(1 + Kd_ClCa/Ca_jct) + Fx_Cl_SL/(1 + Kd_ClCa/Ca_SL)) # uA*uF**-1

component("IClb")
i_Clb = G_ClBk*(V - E_Cl) # uA*uF**-1

component("ICaL", "d gate")
d_infinity = 1/(1 + exp(-(V + 14.5)/6))
tau_d = 1*d_infinity*(1 - exp(-(V + 14.5)/6))/(0.035*(V + 14.5)) # ms
dd_dt = (d_infinity - d)/tau_d

component("ICaL", "f gate")
f_infinity = 1/(1 + exp((V + 35.06)/3.6)) + 0.6/(1 + exp((50 - V)/20))
tau_f = 1/(0.0197*exp(-(0.0337*(V + 14.5))**2) + 0.02) # ms
df_dt = (f_infinity - f)/tau_f

component("ICaL", "FCa gate")
fCa_SL = 1 - fCaB_SL
fCa_jct = 1 - fCaB_jct
dfCaB_SL_dt = 1.7*Ca_SL*(1 - fCaB_SL) - 11.9*fCaB_SL
dfCaB_jct_dt = 1.7*Ca_jct*(1 - fCaB_jct) - 11.9*fCaB_jct

component("INaCa")
temp_jct = (exp(eta*V*F/(R*T))*Na_jct**HNa*Cao - exp((eta - 1)*V*F/(R*T))*Nao**HNa*Ca_jct)/(1 + ksat*exp((eta - 1)*V*F/(R*T))) # mM**4
temp_SL = (exp(eta*V*F/(R*T))*Na_SL**HNa*Cao - exp((eta - 1)*V*F/(R*T))*Nao**HNa*Ca_SL)/(1 + ksat*exp((eta - 1)*V*F/(R*T))) # mM**4
Q_NCX = Q10_NCX**((T - 310)/10)
Ka_SL = 1/(1 + (Kd_act/Ca_SL)**3)
Ka_jct = 1/(1 + (Kd_act/Ca_jct)**3)
i_NaCa_jct = Fx_NCX_jct*V_max_INaCa*Ka_jct*Q_NCX*temp_jct/(K_mCai*Nao**HNa*(1 + (Na_jct/K_mNai)**HNa) + K_mNao**HNa*Ca_jct*(1 + Ca_jct/K_mCai) + K_mCao*Na_jct**HNa + Na_jct**HNa*Cao + Nao**HNa*Ca_jct) # uA*uF**-1
i_NaCa_SL = Fx_NCX_SL*V_max_INaCa*Ka_SL*Q_NCX*temp_SL/(K_mCai*Nao**HNa*(1 + (Na_SL/K_mNai)**HNa) + K_mNao**HNa*Ca_SL*(1 + Ca_SL/K_mCai) + K_mCao*Na_SL**HNa + Na_SL**HNa*Cao + Nao**HNa*Ca_SL) # uA*uF**-1
i_NaCa = i_NaCa_jct + i_NaCa_SL # uA*uF**-1

component("ICap")
V_maxAF_old = V_max_ICap*Vol_cytosol*2*F/Cm # uA*uF**-1
Q_SLCaP = Q10_SLCaP**((T - 310)/10)
i_Cap_jct = Q_SLCaP*V_maxAF*Fx_SLCaP_jct/(1 + (Km/Ca_jct)**H_ICap) # uA*uF**-1
i_Cap_SL = Q_SLCaP*V_maxAF*Fx_SLCaP_SL/(1 + (Km/Ca_SL)**H_ICap) # uA*uF**-1
i_Cap = i_Cap_jct + i_Cap_SL # uA*uF**-1

component("ICab")
i_Cab_jct = G_CaBk*Fx_CaBk_jct*(V - E_Ca_jct) # uA*uF**-1
i_Cab_SL = G_CaBk*Fx_CaBk_SL*(V - E_Ca_SL) # uA*uF**-1
i_Cab = i_Cab_SL + i_Cab_jct # uA*uF**-1

component("Jrel SR")
kCaSR = Max_SR - (Max_SR - Min_SR)/(1 + (EC50_SR/Ca_SR)**HSR)
koSRCa = koCa/kCaSR # mM**-2*ms**-1
kiSRCa = kiCa*kCaSR # mM**-1*ms**-1
RI = 1 - R_Jrel - O - I
dR_Jrel_dt = kim*RI - kiSRCa*Ca_jct*R_Jrel - (koSRCa*Ca_jct**2*R_Jrel - kom*O)
dO_dt = koSRCa*Ca_jct**2*R_Jrel - kom*O - (kiSRCa*Ca_jct*O - kim*I)
dI_dt = kiSRCa*Ca_jct*O - kim*I - (kom*I - koSRCa*Ca_jct**2*RI)
j_rel_SR = ks*O*(Ca_SR - Ca_jct) # mM*ms**-1

component("Jleak SR")
j_leak_SR = KSRleak*(Ca_SR - Ca_jct) # mM*ms**-1

component("Jpump SR")
Q_SRCaP = Q10_SRCaP**((T - 310)/10)
j_pump_SR = Q_SRCaP*V_max*Vol_cytosol/Vol_SR*((Cai/Kmf)**H - (Ca_SR/Kmr)**H)/(1 + (Cai/Kmf)**H + (Ca_SR/Kmr)**H) # mM*ms**-1

component("Ion diffusion")
j_Na_jct_SL = D_Na_jct_SL*A_jct_SL/x_jct_SL # l*ms**-1
j_Na_SL_cytosol = D_Na_SL_cytosol*A_SL_cytosol/x_SL_cytosol # l*ms**-1
j_Ca_jct_SL = D_Ca_jct_SL*A_jct_SL/x_jct_SL # l*ms**-1
j_Ca_SL_cytosol = D_Ca_SL_cytosol*A_SL_cytosol/x_SL_cytosol # l*ms**-1
j_Na_jct_SL_new = 1.8313e-14 # l*ms**-1
j_Na_SL_cytosol_new = 1.6386e-12 # l*ms**-1
j_Ca_jct_SL_new = 8.2413e-13 # l*ms**-1
j_Ca_SL_cytosol_new = 3.7243e-12 # l*ms**-1
J_Na_jct_SL = (Na_jct - Na_SL)*j_Na_jct_SL # mmole*ms**-1
J_Na_SL_cytosol = (Na_SL - Nai)*j_Na_SL_cytosol # mmole*ms**-1
J_Ca_jct_SL = (Ca_jct - Ca_SL)*j_Ca_jct_SL # mmole*ms**-1
J_Ca_SL_cytosol = (Ca_SL - Cai)*j_Ca_SL_cytosol # mmole*ms**-1

component("Ca buffer", "Cytosolic")
dCa_TroponinC = kon_TroponinC*Cai*(Bmax_TroponinC - Ca_TroponinC) - koff_TroponinC*Ca_TroponinC # mM*ms**-1
dCa_TroponinC_Ca_Mg = kon_TroponinC_Ca_Mg_Ca*Cai*(Bmax_TroponinC_Ca_Mg_Ca - (Ca_TroponinC_Ca_Mg + Mg_TroponinC_Ca_Mg)) - koff_TroponinC_Ca_Mg_Ca*Ca_TroponinC_Ca_Mg # mM*ms**-1
dMg_TroponinC_Ca_Mg = kon_TroponinC_Ca_Mg_Mg*Mgi*(Bmax_TroponinC_Ca_Mg_Mg - (Ca_TroponinC_Ca_Mg + Mg_TroponinC_Ca_Mg)) - koff_TroponinC_Ca_Mg_Mg*Mg_TroponinC_Ca_Mg # mM*ms**-1
dCa_Calmodulin = kon_Calmodulin*Cai*(Bmax_Calmodulin - Ca_Calmodulin) - koff_Calmodulin*Ca_Calmodulin # mM*ms**-1
dCa_Myosin = kon_Myosin_Ca*Cai*(Bmax_Myosin_Ca - (Ca_Myosin + Mg_Myosin)) - koff_Myosin_Ca*Ca_Myosin # mM*ms**-1
dMg_Myosin = kon_Myosin_Mg*Mgi*(Bmax_Myosin_Mg - (Ca_Myosin + Mg_Myosin)) - koff_Myosin_Mg*Mg_Myosin # mM*ms**-1
dCa_SRB = kon_SRB*Cai*(Bmax_SRB - Ca_SRB) - koff_SRB*Ca_SRB # mM*ms**-1
dCa_cytosol_tot_bound = dCa_TroponinC + dCa_TroponinC_Ca_Mg + dMg_TroponinC_Ca_Mg + dCa_Calmodulin + dCa_Myosin + dMg_Myosin + dCa_SRB # mM*ms**-1
dCa_TroponinC_dt = dCa_TroponinC
dCa_TroponinC_Ca_Mg_dt = dCa_TroponinC_Ca_Mg
dMg_TroponinC_Ca_Mg_dt = dMg_TroponinC_Ca_Mg
dCa_Calmodulin_dt = dCa_Calmodulin
dCa_Myosin_dt = dCa_Myosin
dMg_Myosin_dt = dMg_Myosin
dCa_SRB_dt = dCa_SRB

component("Ca buffer", "Indo fluo  not connected")
Indo1Bound = Ca_Indo1_Cytosol + Ca_Indo1_jct*Vol_jct/Vol_cytosol + Ca_Indo1_SL*Vol_SL/Vol_cytosol # mM
Fluo3Bound = Ca_Fluo3_Cytosol + Ca_Fluo3_jct*Vol_jct/Vol_cytosol + Ca_Fluo3_SL*Vol_SL/Vol_cytosol # mM
dCa_Indo1_Cytosol = kon_Indo1*(Indo1 - Indo1Bound)*Cai*(Bmax_Indo1_Cytosol - Ca_Indo1_Cytosol) - koff_Indo1*Ca_Indo1_Cytosol # mM*ms**-1
dCa_Indo1_jct = kon_Indo1*(Indo1 - Indo1Bound)*Ca_jct*(Bmax_Indo1_jct*Vol_cytosol/Vol_jct - Ca_Indo1_jct) - koff_Indo1*Ca_Indo1_jct # mM*ms**-1
dCa_Indo1_SL = kon_Indo1*(Indo1 - Indo1Bound)*Ca_SL*(Bmax_Indo1_SL*Vol_cytosol/Vol_SL - Ca_Indo1_SL) - koff_Indo1*Ca_Indo1_SL # mM*ms**-1
dCa_Fluo3_Cytosol = kon_Fluo3*(Fluo3 - Fluo3Bound)*Cai*(Bmax_Fluo3_Cytosol - Ca_Fluo3_Cytosol) - koff_Fluo3*Ca_Fluo3_Cytosol # mM*ms**-1
dCa_Fluo3_jct = kon_Fluo3*(Fluo3 - Fluo3Bound)*Ca_jct*(Bmax_Fluo3_jct*Vol_cytosol/Vol_jct - Ca_Fluo3_jct) - koff_Fluo3*Ca_Fluo3_jct # mM*ms**-1
dCa_Fluo3_SL = kon_Fluo3*(Fluo3 - Fluo3Bound)*Ca_SL*(Bmax_Fluo3_SL*Vol_cytosol/Vol_SL - Ca_Fluo3_SL) - koff_Fluo3*Ca_Fluo3_SL # mM*ms**-1
dCa_Indo1_Cytosol_dt = dCa_Indo1_Cytosol
dCa_Indo1_SL_dt = dCa_Indo1_SL
dCa_Indo1_jct_dt = dCa_Indo1_jct
dCa_Fluo3_Cytosol_dt = dCa_Fluo3_Cytosol
dCa_Fluo3_SL_dt = dCa_Fluo3_SL
dCa_Fluo3_jct_dt = dCa_Fluo3_jct

component("IKr")
G_IKr = 0.03*sqrt(Ko/5.4) # mS*uF**-1
i_Kr = G_IKr*Xr*Rr*(V - E_K) # uA*uF**-1

component("Itos")
i_tos = G_tos*X_tos*(Y_tos + 0.5*R_tos)*(V - E_K) # uA*uF**-1

component("IK1")
G_K1 = 0.9*sqrt(Ko/5.4) # mS*uF**-1
i_K1 = G_K1*K1_infinity*(V - E_K) # uA*uF**-1

component("ICaL")
Q_CaL = Q10_CaL**((T - 310)/10)
temp = d*f*Q_CaL*V*F**2/(R*T) # C*mole**-1
i_CaL_Ca_jct = temp*fCa_jct*Fx_ICaL_jct*PCa*4*(gamma_Cai*Ca_jct*exp(2*V*F/(R*T)) - gamma_Cao*Cao)/(exp(2*V*F/(R*T)) - 1) # uA*uF**-1
i_CaL_Na_jct = temp*fCa_jct*Fx_ICaL_jct*PNa*(gamma_Nai*Na_jct*exp(V*F/(R*T)) - gamma_Nao*Nao)/(exp(V*F/(R*T)) - 1) # uA*uF**-1
i_CaL_Ca_SL = temp*fCa_SL*Fx_ICaL_SL*PCa*4*(gamma_Cai*Ca_SL*exp(2*V*F/(R*T)) - gamma_Cao*Cao)/(exp(2*V*F/(R*T)) - 1) # uA*uF**-1
i_CaL_Na_SL = temp*fCa_SL*Fx_ICaL_SL*PNa*(gamma_Nai*Na_SL*exp(V*F/(R*T)) - gamma_Nao*Nao)/(exp(V*F/(R*T)) - 1) # uA*uF**-1
i_CaL_K = temp*(fCa_SL*Fx_ICaL_SL + fCa_jct*Fx_ICaL_jct)*PK*(gamma_Ki*Ki*exp(V*F/(R*T)) - gamma_Ko*Ko)/(exp(V*F/(R*T)) - 1) # uA*uF**-1
i_CaL = i_CaL_Ca_SL + i_CaL_Ca_jct + i_CaL_Na_SL + i_CaL_Na_jct + i_CaL_K # uA*uF**-1

component("Na buffer")
dNa_jct_buf = kon*Na_jct*(Bmax_jct - Na_jct_buf) - koff*Na_jct_buf # mM*ms**-1
dNa_SL_buf = kon*Na_SL*(Bmax_SL - Na_SL_buf) - koff*Na_SL_buf # mM*ms**-1
dNa_jct_buf_dt = dNa_jct_buf
dNa_SL_buf_dt = dNa_SL_buf
dNa_jct_dt = -Cm*(i_Na_jct + 3*i_NaCa_jct + i_Nab_jct + 3*i_NaK_jct + i_CaL_Na_jct)/(Vol_jct*F) - J_Na_jct_SL/Vol_jct - dNa_jct_buf
dNa_SL_dt = -Cm*(i_Na_SL + 3*i_NaCa_SL + i_Nab_SL + 3*i_NaK_SL + i_CaL_Na_SL)/(Vol_SL*F) + (J_Na_jct_SL - J_Na_SL_cytosol)/Vol_SL - dNa_SL_buf
dNai_dt = J_Na_SL_cytosol/Vol_cytosol

component("Ca buffer")
dCalsequestrin = kon_Calsequestrin*Ca_SR*(Bmax_Calsequestrin*Vol_cytosol/Vol_SR - Ca_Calsequestrin) - koff_Calsequestrin*Ca_Calsequestrin # mM*ms**-1
dCa_Calsequestrin_dt = dCalsequestrin
dCa_SLB_SL = kon_SL*Ca_SL*(Bmax_SLB_SL*Vol_cytosol/Vol_SL - Ca_SLB_SL) - koff_SLB*Ca_SLB_SL # mM*ms**-1
dCa_SLB_jct = kon_SL*Ca_jct*(Bmax_SLB_jct*Vol_cytosol/Vol_jct - Ca_SLB_jct) - koff_SLB*Ca_SLB_jct # mM*ms**-1
dCa_SLHigh_SL = kon_SL*Ca_SL*(Bmax_SLHigh_SL*Vol_cytosol/Vol_SL - Ca_SLHigh_SL) - koff_SLHigh*Ca_SLHigh_SL # mM*ms**-1
dCa_SLHigh_jct = kon_SL*Ca_jct*(Bmax_SLHigh_jct*Vol_cytosol/Vol_jct - Ca_SLHigh_jct) - koff_SLHigh*Ca_SLHigh_jct # mM*ms**-1
dCa_SLB_SL_dt = dCa_SLB_SL
dCa_SLB_jct_dt = dCa_SLB_jct
dCa_SLHigh_SL_dt = dCa_SLHigh_SL
dCa_SLHigh_jct_dt = dCa_SLHigh_jct
dCa_jct_tot_bound = dCa_SLB_jct + dCa_SLHigh_jct # mM*ms**-1
dCa_SL_tot_bound = dCa_SLB_SL + dCa_SLHigh_SL # mM*ms**-1
i_Ca_jct_tot = i_CaL_Ca_jct - 2*i_NaCa_jct + i_Cab_jct + i_Cap_jct # uA*uF**-1
i_Ca_SL_tot = i_CaL_Ca_SL - 2*i_NaCa_SL + i_Cab_SL + i_Cap_SL # uA*uF**-1
dCa_SR_dt = j_pump_SR - (j_leak_SR*Vol_cytosol/Vol_SR + j_rel_SR) - dCalsequestrin
dCa_jct_dt = -i_Ca_jct_tot*Cm/(Vol_jct*2*F) - J_Ca_jct_SL/Vol_jct + j_rel_SR*Vol_SR/Vol_jct + j_leak_SR*Vol_cytosol/Vol_jct - 1*dCa_jct_tot_bound
dCa_SL_dt = -i_Ca_SL_tot*Cm/(Vol_SL*2*F) + (J_Ca_jct_SL - J_Ca_SL_cytosol)/Vol_SL - 1*dCa_SL_tot_bound
dCai_dt = -j_pump_SR*Vol_SR/Vol_cytosol + J_Ca_SL_cytosol/Vol_cytosol - 1*dCa_cytosol_tot_bound

component("Cell")
i_Stim = Conditional(And(Ge(time - floor(time/stim_period)*stim_period, stim_start), Le(time - floor(time/stim_period)*stim_period, stim_start + stim_duration), ), -stim_amplitude, 0) # uA*uF**-1
dV_dt = -(i_Na + i_Nab + i_NaK + i_Kr + i_Ks + i_tos + i_tof + i_K1 + i_Kp + i_NaCa + i_Cl_Ca + i_Clb + i_CaL + i_Cab + i_Cap + i_Stim)
