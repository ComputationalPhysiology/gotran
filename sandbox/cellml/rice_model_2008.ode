# Approximate model of cooperative activation and crossbridge cycling in cardiac muscle using ordinary differential equations
# 
# Abstract: We develop a point model of the cardiac myofilament (MF) to simulate
# wide variety of experimental muscle characterizations including Force-Ca
# relations and twitches under isometric, isosarcometric, isotonic and auxotonic
# conditions. Complex MF behaviors are difficult to model because spatial
# interactions cannot be directly implemented as ordinary differential equations
# (ODEs). We therefore allow phenomenological approximations with careful
# consideration to the relationships with the underlying biophysical mechanisms.
# We describe new formulations that avoid mean-field approximations found in most
# existing MF models. To increase the scope and applicability of the model, we
# include length- and temperature-dependent effects that play important roles in
# MF response. We have also included a representation of passive restoring forces
# to simulate isolated cell shortening protocols. Possessing both computational
# efficiency and the ability to simulate a wide variety of muscle responses, the
# MF representation is well-suited for coupling to existing cardiac cell models
# of electrophysiology and Ca-handling mechanisms. To illustrate this
# suitability, the MF model is coupled to the Chicago rabbit cardiomyocyte model.
# The combined model generates realistic appearing action potentials,
# intracellular Ca transients, and cell shortening signals. The combined model
# also demonstrates that the feedback effects of force on Ca binding to troponin
# can modify the cystolic Ca transient.
# 
# Note that the current CellMl model describes the rat model of
# myofilamentcontraction. One of the goals of the published work by Rice et al.
# was to develop a model of the myofilaments which could be coupled to existing
# models of cardiac electrophysiology and Ca-handling mechanisms. Similarly, it
# is our intention to be able to couple the CellML model of myofilament
# contration with cardiac models of electrophysiology and calcium change. To
# achieve this we will first have to modify the rat myofilament model to convert
# it to a rabbit myofilament model. This can be achieved by decreasing the
# transition rates in the crossbridge cycle by a factor of 5 to simulate the
# changes in myosin isoforms (rat is predominately V1 while rabbit is V3) and
# species-based changes in rate. We can then couple the model to theChicago
# rabbit ventricular myocyte modelby using the cytosolic Ca concentration ([Ca]c)
# from the Chicago model as the input to the myofilament model. Other minor
# modifications are also required, as described in the paper below:
# 
# Approximate model of cooperative activation and crossbridge cycling in cardiac
# muscle using ordinary differential equations, John Jeremy Rice, Fei Wang,
# Donald M. Bers and Pieter P. de Tombe, 2008,Biophysical Journal. (APDFversion
# of the article is available to journal subscribers on theBiophysical
# Journalwebsite.)PubMed ID: 18234826
# 

# gotran file generated by cellml2gotran from rice_wang_bers_detombe_2008.cellml

parameters("Thin filament regulation and crossbridge cycling rates",
           fapp = ScalarParam(0.5, unit="ms**-1"),
           gapp = ScalarParam(0.07, unit="ms**-1"),
           hf = ScalarParam(2, unit="ms**-1"),
           hb = ScalarParam(0.4, unit="ms**-1"),
           gxb = ScalarParam(0.07, unit="ms**-1"),
           gslmod = 6,
           hfmdc = 5,
           hbmdc = 0,
           sigmap = 8,
           sigman = 1,
           xbmodsp = 1,
           Qfapp = 6.25,
           Qgapp = 2.5,
           Qhf = 6.25,
           Qhb = 6.25,
           Qgxb = 6.25)

states("Normalised active and passive force",
       SL = ScalarParam(1.89999811516093, unit="um"),
       intf = ScalarParam(-4.5113452510363e-6, unit="ms"))

parameters("Normalised active and passive force",
           SLmin = ScalarParam(1.4, unit="um"),
           SLmax = ScalarParam(2.4, unit="um"),
           kxb_normalised = ScalarParam(120, unit="mN*mm**-2"),
           SL_c = ScalarParam(2.25, unit="um"),
           SLrest = ScalarParam(1.85, unit="um"),
           SLset = ScalarParam(1.9, unit="um"),
           PCon_t = ScalarParam(0.002, unit=""),
           PExp_t = ScalarParam(10, unit="um**-1"),
           PCon_c = ScalarParam(0.02, unit=""),
           PExp_c = ScalarParam(70, unit="um**-1"),
           massf = ScalarParam(50, unit="ms**2*um**-1"),
           visc = ScalarParam(3, unit="ms*um**-1"),
           KSE = ScalarParam(1, unit="um**-1"),
           SEon = 1)

parameters("Equation for simulated calcium transient",
           tau1 = ScalarParam(20, unit="ms"),
           tau2 = ScalarParam(110, unit="ms"),
           start_time = ScalarParam(5, unit="ms"),
           Ca_amplitude = ScalarParam(1.45, unit="uM"),
           Ca_diastolic = ScalarParam(0.09, unit="uM"))

parameters("Model parameters",
           len_thin = ScalarParam(1.2, unit="um"),
           len_thick = ScalarParam(1.65, unit="um"),
           len_hbare = ScalarParam(0.1, unit="um"),
           TmpC = ScalarParam(24, unit="gradC"),
           x_0 = ScalarParam(0.007, unit="um"))

states("Ca binding to troponin to thin filament regulation",
       TRPNCaL = 0.0147730085063734,
       TRPNCaH = 0.13066096561522)

parameters("Ca binding to troponin to thin filament regulation",
           Qkon = 1.5,
           Qkoff = 1.3,
           Qkn_p = 1.6,
           Qkp_n = 1.6,
           kon = ScalarParam(0.05, unit="uM**-1*ms**-1"),
           koffL = ScalarParam(0.25, unit="ms**-1"),
           koffH = ScalarParam(0.025, unit="ms**-1"),
           perm50 = 0.5,
           nperm = 15,
           kn_p = ScalarParam(0.5, unit="ms**-1"),
           kp_n = ScalarParam(0.05, unit="ms**-1"),
           koffmod = 1)

states("Regulation and crossbridge cycling state equations",
       N_NoXB = 0.999999959256274,
       P_NoXB = 4.07437173988636e-8,
       N = 0.999997834540066,
       XBprer = 3.0494964880038e-7,
       XBpostr = 1.81017564383744e-6)

states("Mean strain of strongly bound states",
       xXBprer = ScalarParam(3.41212828972468e-8, unit="um"),
       xXBpostr = ScalarParam(0.00700005394873882, unit="um"))

parameters("Mean strain of strongly bound states",
           xPsi = 2)

parameters("Calculation of micromolar per millisecondes of Ca for apparent Ca binding",
           kxb = ScalarParam(120, unit="mN*mm**-2"),
           Trop_conc = ScalarParam(70, unit="uM"))

component("Sarcomere geometry")
sovr_ze = Conditional(Lt(len_thick/2, SL/2), len_thick/2, SL/2) # um
sovr_cle = Conditional(Gt(SL/2 - (SL - len_thin), len_hbare/2), SL/2 - (SL - len_thin), len_hbare/2) # um
len_sovr = sovr_ze - sovr_cle # um
SOVFThick = len_sovr*2/(len_thick - len_hbare)
SOVFThin = len_sovr/len_thin

component("Thin filament regulation and crossbridge cycling rates")
fappT = fapp*xbmodsp*Qfapp**((TmpC - 37)/10) # ms**-1
gapslmd = 1 + (1 - SOVFThick)*gslmod
gappT = gapp*gapslmd*xbmodsp*Qgapp**((TmpC - 37)/10) # ms**-1
hfmd = exp(-xXBprer/abs(xXBprer)*hfmdc*(xXBprer/x_0)**2)
hbmd = exp((xXBpostr - x_0)/abs(xXBpostr - x_0)*hbmdc*((xXBpostr - x_0)/x_0)**2)
hfT = hf*hfmd*xbmodsp*Qhf**((TmpC - 37)/10) # ms**-1
hbT = hb*hbmd*xbmodsp*Qhb**((TmpC - 37)/10) # ms**-1
gxbmd = Conditional(Lt(xXBpostr, x_0), exp(sigmap*((x_0 - xXBpostr)/x_0)**2), exp(sigman*((xXBpostr - x_0)/x_0)**2))
gxbT = gxb*gxbmd*xbmodsp*Qgxb**((TmpC - 37)/10) # ms**-1

component("Normalised active and passive force")
SSXBprer = (hb*fapp + gxb*fapp)/(fapp*hf + gxb*hf + gxb*gapp + hb*fapp + hb*gapp + gxb*fapp)
SSXBpostr = fapp*hf/(fapp*hf + gxb*hf + gxb*gapp + hb*fapp + hb*gapp + gxb*fapp)
Fnordv = kxb_normalised*x_0*SSXBpostr # mN*um*mm**-2
force = kxb_normalised*SOVFThick*(xXBpostr*XBpostr + xXBprer*XBprer) # mN*um*mm**-2
active = 1*force/Fnordv # 
ppforce_t = (SL - SLrest)/abs(SL - SLrest)*PCon_t*(exp(PExp_t*abs(SL - SLrest)) - 1) # 
ppforce_c = Conditional(Gt(SL, SL_c), PCon_c*(exp(PExp_c*abs(SL - SL_c)) - 1), 0) # 
ppforce = ppforce_t + ppforce_c # 
preload = abs(SLset - SLrest)/(SLset - SLrest)*PCon_t*(exp(PExp_t*abs(SLset - SLrest)) - 1) # 
afterload = Conditional(Eq(SEon, 1), KSE*(SLset - SL), 0) # 
dSL = Conditional(And(Le(SL, SLmax), Gt(SL, SLmin), ), (intf + (SLset - SL)*visc)/massf, 0) # um*ms**-1
dintf_dt = preload + afterload - (ppforce + active)
dSL_dt = dSL

component("Equation for simulated calcium transient")
beta = (tau1/tau2)**(-1/(tau1/tau2 - 1)) - (tau1/tau2)**(-1/(1 - tau2/tau1))
Cai = Conditional(Gt(time, start_time), (Ca_amplitude - Ca_diastolic)/beta*(exp(-(time - start_time)/tau1) - exp(-(time - start_time)/tau2)) + Ca_diastolic, Ca_diastolic) # uM

component("Ca binding to troponin to thin filament regulation")
konT = kon*Qkon**((TmpC - 37)/10) # uM**-1*ms**-1
koffLT = koffL*koffmod*Qkoff**((TmpC - 37)/10) # ms**-1
koffHT = koffH*koffmod*Qkoff**((TmpC - 37)/10) # ms**-1
dTRPNCaL = konT*Cai*(1 - TRPNCaL) - koffLT*TRPNCaL # ms**-1
dTRPNCaH = konT*Cai*(1 - TRPNCaH) - koffHT*TRPNCaH # ms**-1
Tropreg = (1 - SOVFThin)*TRPNCaL + SOVFThin*TRPNCaH
permtot = sqrt(abs(1/(1 + (perm50/Tropreg)**nperm)))
inprmt = Conditional(Lt(1/permtot, 100), 1/permtot, 100)
dTRPNCaL_dt = dTRPNCaL
dTRPNCaH_dt = dTRPNCaH
kn_pT = kn_p*permtot*Qkn_p**((TmpC - 37)/10) # ms**-1
kp_nT = kp_n*inprmt*Qkp_n**((TmpC - 37)/10) # ms**-1

component("Regulation and crossbridge cycling state equations")
dN_NoXB_dt = kp_nT*P_NoXB - kn_pT*N_NoXB
dP_NoXB_dt = kn_pT*N_NoXB - kp_nT*P_NoXB
dXBpostr = hfT*XBprer - (hbT*XBpostr + gxbT*XBpostr) # ms**-1
P = 1 - N - XBprer - XBpostr
dN_dt = kp_nT*P - kn_pT*N
dXBprer = fappT*P + hbT*XBpostr - (gappT*XBprer + hfT*XBprer) # ms**-1
dXBpostr_dt = dXBpostr
dXBprer_dt = dXBprer

component("Mean strain of strongly bound states")
dutyprer = (hbT*fappT + gxbT*fappT)/(fappT*hfT + gxbT*hfT + gxbT*gappT + hbT*fappT + hbT*gappT + gxbT*fappT)
dutypostr = fappT*hfT/(fappT*hfT + gxbT*hfT + gxbT*gappT + hbT*fappT + hbT*gappT + gxbT*fappT)
dxXBprer = dSL/2 + xPsi/dutyprer*(fappT*-xXBprer + hbT*(xXBpostr - (x_0 + xXBprer))) # um*ms**-1
dxXBpostr = dSL/2 + xPsi/dutypostr*hfT*(xXBprer + x_0 - xXBpostr) # um*ms**-1
dxXBprer_dt = dxXBprer
dxXBpostr_dt = dxXBpostr

component("Calculation of micromolar per millisecondes of Ca for apparent Ca binding")
FrSBXB = (XBpostr + XBprer)/(SSXBpostr + SSXBprer)
dFrSBXB = (dXBpostr + dXBprer)/(SSXBpostr + SSXBprer) # ms**-1
dsovr_ze = Conditional(Lt(SL, len_thick), -0.5*dSL, 0) # um*ms**-1
dsovr_cle = Conditional(Gt(2*len_thin - SL, len_hbare), -0.5*dSL, 0) # um*ms**-1
dlen_sovr = dsovr_ze - dsovr_cle # um*ms**-1
dSOVFThin = dlen_sovr/len_thin # ms**-1
dSOVFThick = 2*dlen_sovr/(len_thick - len_hbare) # ms**-1
TropTot = Trop_conc*((1 - SOVFThin)*TRPNCaL + SOVFThin*(FrSBXB*TRPNCaH + (1 - FrSBXB)*TRPNCaL)) # uM
dTropTot = Trop_conc*(-dSOVFThin*TRPNCaL + (1 - SOVFThin)*dTRPNCaL + dSOVFThin*(FrSBXB*TRPNCaH + (1 - FrSBXB)*TRPNCaL) + SOVFThin*(dFrSBXB*TRPNCaH + FrSBXB*dTRPNCaH + (1 - FrSBXB)*dTRPNCaL - dFrSBXB*TRPNCaL)) # uM*ms**-1
dforce = kxb*dSOVFThick*(xXBpostr*XBpostr + xXBprer*XBprer) + kxb*SOVFThick*(dxXBpostr*XBpostr + xXBpostr*dXBpostr + dxXBprer*XBprer + xXBprer*dXBprer) # mN*um*mm**-2*ms**-1

