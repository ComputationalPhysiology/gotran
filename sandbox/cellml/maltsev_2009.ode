# Synergism of coupled subsarcolemmal Ca2+ clocks and sarcolemmal voltage clocks confers robust and flexible pacemaker function in a novel pacemaker cell model
#
# ABSTRACT: Recent experimental studies have demonstrated that sinoatrial node
# cells (SANC) generate spontaneous, rhythmic, local subsarcolemmal Ca(2+)
# releases (Ca(2+) clock), which occur during late diastolic depolarization (DD)
# and interact with the classic sarcolemmal voltage oscillator (membrane clock)
# by activating Na(+)-Ca(2+) exchanger current (I(NCX)). This and other
# interactions between clocks, however, are not captured by existing essentially
# membrane-delimited cardiac pacemaker cell numerical models. Using wide-scale
# parametric analysis of classic formulations of membrane clock and Ca(2+)
# cycling, we have constructed and initially explored a prototype rabbit SANC
# model featuring both clocks. Our coupled oscillator system exhibits greater
# robustness and flexibility than membrane clock operating alone. Rhythmic
# spontaneous Ca(2+) releases of sarcoplasmic reticulum (SR)-based Ca(2+) clock
# ignite rhythmic action potentials via late DD I(NCX) over much broader ranges
# of membrane clock parameters [e.g., L-type Ca(2+) current (I(CaL)) and/or
# hyperpolarization-activated ("funny") current (I(f)) conductances]. The system
# Ca(2+) clock includes SR and sarcolemmal Ca(2+) fluxes, which optimize cell
# Ca(2+) balance to increase amplitudes of both SR Ca(2+) release and late DD
# I(NCX) as SR Ca(2+) pumping rate increases, resulting in a broad pacemaker rate
# modulation (1.8-4.6 Hz). In contrast, the rate modulation range via membrane
# clock parameters is substantially smaller when Ca(2+) clock is unchanged or
# lacking. When Ca(2+) clock is disabled, the system parametric space for
# fail-safe SANC operation considerably shrinks: without rhythmic late DD I(NCX)
# ignition signals membrane clock substantially slows, becomes dysrhythmic, or
# halts. In conclusion, the Ca(2+) clock is a new critical dimension in SANC
# function. A synergism of the coupled function of Ca(2+) and membrane clocks
# confers fail-safe SANC operation at greatly varying rates.
#
# The original paper reference is cited below:
#
# Synergism of coupled subsarcolemmal Ca2+ clocks and sarcolemmal voltage clocks
# confers robust and flexible pacemaker function in a novel pacemaker cell model,
# Victor A. Maltsev and Edward G. Lakatta, 2009,American Journal of Physiology,
# 286, H594-H615.PubMed ID: 19136600
#

# gotran file generated by cellml2gotran from maltsev_2009_paper.cellml

parameters("i_CaL",
           E_CaL = ScalarParam(45, unit="mV"),
           g_CaL = ScalarParam(0.464, unit="nS*pF**-1"))

states("i_CaL", "DL gate",
       dL = 0)

states("i_CaL", "FL gate",
       fL = 1)

states("i_CaL", "FCa gate",
       fCa = 1)

parameters("i_CaL", "FCa gate",
           alpha_fCa = ScalarParam(0.021, unit="ms**-1"),
           Km_fCa = ScalarParam(0.00035, unit="mM"))

parameters("i_CaT",
           g_CaT = ScalarParam(0.1832, unit="nS*pF**-1"),
           E_CaT = ScalarParam(45, unit="mV"))

states("i_CaT", "DT gate",
       dT = 0)

states("i_CaT", "FT gate",
       fT = 1)

parameters("i_Kr",
           g_Kr = ScalarParam(0.08113973, unit="nS*pF**-1"))

states("i_Kr", "Pa gate",
       paS = 0,
       paF = 0)

states("i_Kr", "pi_gate",
       pi_ = 1)

parameters("i_Ks",
           g_Ks = ScalarParam(0.0259, unit="nS*pF**-1"))

states("i_Ks", "n gate",
       n = 0)

parameters("AP sensitive currents",
           g_to = ScalarParam(0.252, unit="nS*pF**-1"),
           g_sus = ScalarParam(0.02, unit="nS*pF**-1"))

states("AP sensitive currents", "q gate",
       q = 1)

states("AP sensitive currents", "r gate",
       r = 0)

parameters("i_f",
           g_if = ScalarParam(0.15, unit="nS*pF**-1"))

states("i_f", "y gate",
       y = 1)

parameters("i_f", "y gate",
           VIf_half = ScalarParam(-64, unit="mV"))

parameters("i_st",
           g_st = ScalarParam(0.003, unit="nS*pF**-1"),
           E_st = ScalarParam(37.4, unit="mV"))

states("i_st", "Qa gate",
       qa = 0)

states("i_st", "Qi gate",
       qi = 1)

parameters("i_b Na",
           g_b_Na = ScalarParam(0.00486, unit="nS*pF**-1"))

parameters("i_NaK",
           Km_Kp = ScalarParam(1.4, unit="mM"),
           Km_Nap = ScalarParam(14, unit="mM"),
           i_NaK_max = ScalarParam(2.88, unit="pA*pF**-1"))

parameters("i_b Ca",
           g_b_Ca = ScalarParam(0.0006, unit="nS*pF**-1"))

parameters("i_NaCa",
           kNaCa = ScalarParam(187.5, unit="pA*pF**-1"),
           Qci = 0.1369,
           Qn = 0.4315,
           Qco = 0,
           K3ni = ScalarParam(26.44, unit="mM"),
           Kci = ScalarParam(0.0207, unit="mM"),
           K1ni = ScalarParam(395.3, unit="mM"),
           K2ni = ScalarParam(2.289, unit="mM"),
           Kcni = ScalarParam(26.44, unit="mM"),
           K3no = ScalarParam(4.663, unit="mM"),
           K1no = ScalarParam(1628, unit="mM"),
           K2no = ScalarParam(561.4, unit="mM"),
           Kco = ScalarParam(3.663, unit="mM"))

states("j_SRCarel",
       R_j = 0.7499955,
       O = 3.4e-6,
       I = 1.1e-6,
       RI = 0.25)

parameters("j_SRCarel",
           ks = ScalarParam(250000, unit="ms**-1"),
           MaxSR = 15,
           MinSR = 1,
           EC50_SR = ScalarParam(0.45, unit="mM"),
           HSR = 2.5,
           koCa = ScalarParam(10, unit="mM**-2*ms**-1"),
           kiCa = ScalarParam(0.5, unit="mM**-1*ms**-1"),
           kim = ScalarParam(0.005, unit="ms**-1"),
           kom = ScalarParam(0.06, unit="ms**-1"))

parameters("Intracellular calcium fluxes",
           tau_dif_Ca = ScalarParam(0.04, unit="ms"),
           tau_tr = ScalarParam(40, unit="ms"),
           P_up = ScalarParam(0.012, unit="mM*ms**-1"),
           K_up = ScalarParam(0.0006, unit="mM"))

states("Calcium buffering",
       fTC = 0.02,
       fTMC = 0.22,
       fTMM = 0.69,
       fCMi = 0.042,
       fCMs = 0.089,
       fCQ = 0.032)

parameters("Calcium buffering",
           TC_tot = ScalarParam(0.031, unit="mM"),
           TMC_tot = ScalarParam(0.062, unit="mM"),
           CM_tot = ScalarParam(0.045, unit="mM"),
           CQ_tot = ScalarParam(10, unit="mM"),
           kf_TC = ScalarParam(88.8, unit="mM**-1*ms**-1"),
           kf_TMM = ScalarParam(2.277, unit="mM**-1*ms**-1"),
           kf_TMC = ScalarParam(227.7, unit="mM**-1*ms**-1"),
           kf_CM = ScalarParam(227.7, unit="mM**-1*ms**-1"),
           kf_CQ = ScalarParam(0.534, unit="mM**-1*ms**-1"),
           kb_TC = ScalarParam(0.446, unit="ms**-1"),
           kb_TMC = ScalarParam(0.00751, unit="ms**-1"),
           kb_TMM = ScalarParam(0.751, unit="ms**-1"),
           kb_CM = ScalarParam(0.542, unit="ms**-1"),
           kb_CQ = ScalarParam(0.445, unit="ms**-1"))

parameters("Model parameters",
           Cao = ScalarParam(2, unit="mM"),
           Nai = ScalarParam(10, unit="mM"),
           Nao = ScalarParam(140, unit="mM"),
           Ki = ScalarParam(140, unit="mM"),
           Ko = ScalarParam(5.4, unit="mM"),
           Mgi = ScalarParam(2.5, unit="mM"),
           R = ScalarParam(8314.4, unit="J*kmole**-1*K**-1"),
           T = ScalarParam(310.15, unit="K"),
           F = ScalarParam(96485, unit="C*mole**-1"),
           Cm = ScalarParam(32, unit="pF"),
           V_jsr_part = 0.0012,
           V_i_part = 0.46,
           V_nsr_part = 0.0116,
           R_cell = ScalarParam(4, unit="um"),
           L_cell = ScalarParam(70, unit="um"),
           L_sub = ScalarParam(0.02, unit="um"))

states("Vm",
       Vm = ScalarParam(-65, unit="mV"))

states("Calcium dynamics",
       Cai = ScalarParam(0.0001, unit="mM"),
       Ca_sub = ScalarParam(0.000223, unit="mM"),
       Ca_nsr = ScalarParam(1.35, unit="mM"),
       Ca_jsr = ScalarParam(0.029, unit="mM"))

component("Electric potentials")
E_Na = R*T/F*log(Nao/Nai) # mV
E_K = R*T/F*log(Ko/Ki) # mV
E_Ks = R*T/F*log((Ko + 0.12*Nao)/(Ki + 0.12*Nai)) # mV

component("i_CaL")
i_CaL = Cm*g_CaL*(Vm - E_CaL)*dL*fL*fCa # pA

component("i_CaL", "DL gate")
dL_infinity = 1/(1 + exp(-(Vm + 13.5)/6))
adVm = Conditional(Eq(Vm, -35), -35.00001, Conditional(Eq(Vm, 0), 0.00001, Vm)) # mV
bdVm = Conditional(Eq(Vm, 5), 5.00001, Vm) # mV
alpha_dL = -0.02839*(adVm + 35)/(exp(-(adVm + 35)/2.5) - 1) - 0.0849*adVm/(exp(-adVm/4.8) - 1) # ms**-1
beta_dL = 0.01143*(bdVm - 5)/(exp((bdVm - 5)/2.5) - 1) # ms**-1
tau_dL = 1/(alpha_dL + beta_dL) # ms
ddL_dt = (dL_infinity - dL)/tau_dL

component("i_CaL", "FL gate")
fL_infinity = 1/(1 + exp((Vm + 35)/7.3))
tau_fL = 44.3 + 257.1*exp(-((Vm + 32.5)/13.9)**2) # ms
dfL_dt = (fL_infinity - fL)/tau_fL

component("i_CaL", "FCa gate")
fCa_infinity = Km_fCa/(Km_fCa + Ca_sub)
tau_fCa = fCa_infinity/alpha_fCa # ms
dfCa_dt = (fCa_infinity - fCa)/tau_fCa

component("i_CaT")
i_CaT = Cm*g_CaT*(Vm - E_CaT)*dT*fT # pA

component("i_CaT", "DT gate")
dT_infinity = 1/(1 + exp(-(Vm + 26.3)/6))
tau_dT = 1/(1.068*exp((Vm + 26.3)/30) + 1.068*exp(-(Vm + 26.3)/30)) # ms
ddT_dt = (dT_infinity - dT)/tau_dT

component("i_CaT", "FT gate")
fT_infinity = 1/(1 + exp((Vm + 61.7)/5.6))
tau_fT = 1/(0.0153*exp(-(Vm + 61.7)/83.3) + 0.015*exp((Vm + 61.7)/15.38)) # ms
dfT_dt = (fT_infinity - fT)/tau_fT

component("i_Kr")
i_Kr = Cm*g_Kr*(Vm - E_K)*(0.6*paF + 0.4*paS)*pi_ # pA

component("i_Kr", "Pa gate")
pa_infinity = 1/(1 + exp(-(Vm + 23.2)/10.6))
tau_paS = 0.84655354/(0.0042*exp(Vm/17) + 0.00015*exp(-Vm/21.6)) # ms
tau_paF = 0.84655354/(0.0372*exp(Vm/15.9) + 0.00096*exp(-Vm/22.5)) # ms
dpaS_dt = (pa_infinity - paS)/tau_paS
dpaF_dt = (pa_infinity - paF)/tau_paF

component("i_Kr", "pi_gate")
pi_infinity = 1/(1 + exp((Vm + 28.6)/17.1))
tau_pi = 1/(0.1*exp(-Vm/54.645) + 0.656*exp(Vm/106.157)) # ms
dpi__dt = (pi_infinity - pi_)/tau_pi

component("i_Ks")
i_Ks = Cm*g_Ks*(Vm - E_Ks)*n**2 # pA

component("i_Ks", "n gate")
alpha_n = 0.014/(1 + exp(-(Vm - 40)/9)) # ms**-1
beta_n = 0.001*exp(-Vm/45) # ms**-1
n_infinity = alpha_n/(alpha_n + beta_n)
tau_n = 1/(alpha_n + beta_n) # ms
dn_dt = (n_infinity - n)/tau_n

component("AP sensitive currents")
i_to = Cm*g_to*(Vm - E_K)*q*r # pA
i_sus = Cm*g_sus*(Vm - E_K)*r # pA

component("AP sensitive currents", "q gate")
q_infinity = 1/(1 + exp((Vm + 49)/13))
tau_q = 6.06 + 39.102/(0.57*exp(-0.08*(Vm + 44)) + 0.065*exp(0.1*(Vm + 45.93))) # ms
dq_dt = (q_infinity - q)/tau_q

component("AP sensitive currents", "r gate")
r_infinity = 1/(1 + exp(-(Vm - 19.3)/15))
tau_r = 2.75352 + 14.40516/(1.037*exp(0.09*(Vm + 30.61)) + 0.369*exp(-0.12*(Vm + 23.84))) # ms
dr_dt = (r_infinity - r)/tau_r

component("i_f")
i_f_Na = Cm*0.3833*g_if*(Vm - E_Na)*y**2 # pA
i_f_K = Cm*0.6167*g_if*(Vm - E_K)*y**2 # pA
i_f = i_f_Na + i_f_K # pA

component("i_f", "y gate")
y_infinity = 1/(1 + exp((Vm - VIf_half)/13.5))
tau_y = 0.7166529/(exp(-(Vm + 386.9)/45.302) + exp((Vm - 73.08)/19.231)) # ms
dy_dt = (y_infinity - y)/tau_y

component("i_st")
i_st = Cm*g_st*(Vm - E_st)*qa*qi # pA

component("i_st", "Qa gate")
qa_infinity = 1/(1 + exp(-(Vm + 57)/5))
alpha_qa = 1/(0.15*exp(-Vm/11) + 0.2*exp(-Vm/700)) # ms**-1
beta_qa = 1/(16*exp(Vm/8) + 15*exp(Vm/50)) # ms**-1
tau_qa = 1/(alpha_qa + beta_qa) # ms
dqa_dt = (qa_infinity - qa)/tau_qa

component("i_st", "Qi gate")
alpha_qi = 1/(3100*exp(Vm/13) + 700*exp(Vm/70)) # ms**-1
beta_qi = 1/(95*exp(-Vm/10) + 50*exp(-Vm/700)) + 0.000229/(1 + exp(-Vm/5)) # ms**-1
qi_infinity = alpha_qi/(alpha_qi + beta_qi)
tau_qi = 6.65/(alpha_qi + beta_qi) # ms
dqi_dt = (qi_infinity - qi)/tau_qi

component("i_b Na")
i_b_Na = Cm*g_b_Na*(Vm - E_Na) # pA

component("i_NaK")
i_NaK = Cm*i_NaK_max/((1 + (Km_Kp/Ko)**1.2)*(1 + (Km_Nap/Nai)**1.3)*(1 + exp(-(Vm - E_Na + 120)/30))) # pA

component("i_b Ca")
i_b_Ca = Cm*g_b_Ca*(Vm - E_CaL) # pA

component("i_NaCa")
k43 = Nai/(K3ni + Nai)
RTOnF = R*T/F # mV
k41 = exp(-Qn*Vm/(2*RTOnF))
di = 1 + Ca_sub/Kci*(1 + exp(-Qci*Vm/RTOnF) + Nai/Kcni) + Nai/K1ni*(1 + Nai/K2ni*(1 + Nai/K3ni))
k34 = Nao/(K3no + Nao)
k32 = exp(Qn*Vm/(2*RTOnF))
do_ = 1 + Cao/Kco*(1 + exp(Qco*Vm/RTOnF)) + Nao/K1no*(1 + Nao/K2no*(1 + Nao/K3no))
k12 = Ca_sub/Kci*exp(-Qci*Vm/RTOnF)/di
k14 = Nai/K1ni*Nai/K2ni*(1 + Nai/K3ni)*exp(Qn*Vm/(2*RTOnF))/di
k21 = Cao/Kco*exp(Qco*Vm/RTOnF)/do_
k23 = Nao/K1no*Nao/K2no*(1 + Nao/K3no)*exp(-Qn*Vm/(2*RTOnF))/do_
x1 = k41*k34*(k23 + k21) + k21*k32*(k43 + k41)
x2 = k32*k43*(k14 + k12) + k41*k12*(k34 + k32)
x3 = k14*k43*(k23 + k21) + k12*k23*(k43 + k41)
x4 = k23*k34*(k14 + k12) + k14*k21*(k34 + k32)
i_NaCa = Cm*kNaCa*(x2*k21 - x1*k12)/(x1 + x2 + x3 + x4) # pA

component("j_SRCarel")
j_SRCarel = ks*O*(Ca_jsr - Ca_sub) # mM*ms**-1
kCaSR = MaxSR - (MaxSR - MinSR)/(1 + (EC50_SR/Ca_jsr)**HSR)
koSRCa = koCa/kCaSR # mM**-2*ms**-1
kiSRCa = kiCa*kCaSR # mM**-1*ms**-1
dR_j_dt = kim*RI - kiSRCa*Ca_sub*R_j - (koSRCa*Ca_sub**2*R_j - kom*O)
dO_dt = koSRCa*Ca_sub**2*R_j - kom*O - (kiSRCa*Ca_sub*O - kim*I)
dI_dt = kiSRCa*Ca_sub*O - kim*I - (kom*I - koSRCa*Ca_sub**2*RI)
dRI_dt = kom*I - koSRCa*Ca_sub**2*RI - (kim*RI - kiSRCa*Ca_sub*R_j)

component("Intracellular calcium fluxes")
j_Ca_dif = (Ca_sub - Cai)/tau_dif_Ca # mM*ms**-1
j_up = P_up/(1 + K_up/Cai) # mM*ms**-1
j_tr = (Ca_nsr - Ca_jsr)/tau_tr # mM*ms**-1

component("Calcium buffering")
delta_fTC = kf_TC*Cai*(1 - fTC) - kb_TC*fTC # ms**-1
delta_fTMC = kf_TMC*Cai*(1 - (fTMC + fTMM)) - kb_TMC*fTMC # ms**-1
delta_fTMM = kf_TMM*Mgi*(1 - (fTMC + fTMM)) - kb_TMM*fTMM # ms**-1
delta_fCMi = kf_CM*Cai*(1 - fCMi) - kb_CM*fCMi # ms**-1
delta_fCMs = kf_CM*Ca_sub*(1 - fCMs) - kb_CM*fCMs # ms**-1
delta_fCQ = kf_CQ*Ca_jsr*(1 - fCQ) - kb_CQ*fCQ # ms**-1
dfTC_dt = delta_fTC
dfTMC_dt = delta_fTMC
dfTMM_dt = delta_fTMM
dfCMi_dt = delta_fCMi
dfCMs_dt = delta_fCMs
dfCQ_dt = delta_fCQ

component("Model parameters")
V_cell = 0.001*pi*R_cell**2*L_cell # pl
V_sub = 0.001*2*pi*L_sub*(R_cell - L_sub/2)*L_cell # pl
V_jsr = V_jsr_part*V_cell # pl
V_i = V_i_part*V_cell - V_sub # pl
V_nsr = V_nsr_part*V_cell # pl

component("Vm")
dVm_dt = -(i_CaL + i_CaT + i_f + i_st + i_Kr + i_Ks + i_to + i_sus + i_NaK + i_NaCa + i_b_Ca + i_b_Na)/Cm

component("Calcium dynamics")
dCai_dt = (j_Ca_dif*V_sub - j_up*V_nsr)/V_i - (CM_tot*delta_fCMi + TC_tot*delta_fTC + TMC_tot*delta_fTMC)
dCa_sub_dt = j_SRCarel*V_jsr/V_sub - ((i_CaL + i_CaT + i_b_Ca - 2*i_NaCa)/(2*F*V_sub) + j_Ca_dif + CM_tot*delta_fCMs)
dCa_nsr_dt = j_up - j_tr*V_jsr/V_nsr
dCa_jsr_dt = j_tr - (j_SRCarel + CQ_tot*delta_fCQ)
