# A novel computational model of the human ventricular action potential and Ca transient
#
#
# ABSTRACT: We have developed a detailed mathematical model for Ca handling and
# ionic currents in the human ventricular myocyte. Our aims were to: (1) simulate
# basic excitation-contraction coupling phenomena; (2) use realistic repolarizing
# K current densities; (3) reach steady-state. The model relies on the framework
# of the rabbit myocyte model previously developed by our group, with
# subsarcolemmal and junctional compartments where ion channels sense higher [Ca]
# vs. bulk cytosol. Ion channels and transporters have been modeled on the basis
# of the most recent experimental data from human ventricular myocytes. Rapidly
# and slowly inactivating components of I(to) have been formulated to
# differentiate between endocardial and epicardial myocytes. Transmural gradients
# of Ca handling proteins and Na pump were also simulated. The model has been
# validated against a wide set of experimental data including action potential
# duration (APD) adaptation and restitution, frequency-dependent increase in Ca
# transient peak and [Na](i). Interestingly, Na accumulation at fast heart rate
# is a major determinant of APD shortening, via outward shifts in Na pump and
# Na-Ca exchange currents. We investigated the effects of blocking K currents on
# APD and repolarization reserve: I(Ks) block does not affect the former and
# slightly reduces the latter; I(K1) blockade modestly increases APD and more
# strongly reduces repolarization reserve; I(Kr) blockers significantly prolong
# APD, an effect exacerbated as pacing frequency is decreased, in good agreement
# with experimental results in human myocytes. We conclude that this model
# provides a useful framework to explore excitation-contraction coupling
# mechanisms and repolarization abnormalities at the single myocyte level.
#
# The original paper reference is cited below:
#
# A novel computational model of the human ventricular action potential and Ca
# transient, Eleonora Grandi, Francesco S. Pasqualini, Donald M. Bers,
# 2010,Journal of Molecular and Cellular Cardiology, volume 48, 112-121.PubMed
# ID: 19835882
#

# gotran file generated by cellml2gotran from grandi_pasqualini_bers_2010.cellml

states("Interface", "I_Na",
       m = 0.003793087414436,
       h = 0.626221949492493,
       j = 0.624553572490432)

states("Interface", "I_Kr",
       x_kr = 0.0210022533039071)

states("Interface", "I_Ks",
       x_ks = 0.00428016666258923)

states("Interface", "I_to",
       x_to_s = 0.000440445885642567,
       y_to_s = 0.785115828275182,
       x_to_f = 0.000440438103758954,
       y_to_f = 0.999995844038706)

states("Interface", "I_Ca",
       d = 2.92407183949469e-6,
       f = 0.995135796703515,
       f_Ca_Bj = 0.0246760872105795,
       f_Ca_Bsl = 0.0152723084239416)

states("Interface", "SR Fluxes",
       Ry_Rr = ScalarParam(0.890806040818203, unit="mmole*l**-1"),
       Ry_Ro = ScalarParam(7.40481128853622e-7, unit="mmole*l**-1"),
       Ry_Ri = ScalarParam(9.07666168960848e-8, unit="mmole*l**-1"))

states("Interface", "Na Buffers",
       Na_Bj = ScalarParam(3.4543773303328, unit="mmole*l**-1"),
       Na_Bsl = ScalarParam(0.753740951477775, unit="mmole*l**-1"))

states("Interface", "Cytosolic Ca Buffers",
       Tn_CL = ScalarParam(0.00893455096919132, unit="mmole*l**-1"),
       Tn_CHc = ScalarParam(0.117412025936615, unit="mmole*l**-1"),
       Tn_CHm = ScalarParam(0.0106160166692932, unit="mmole*l**-1"),
       CaM = ScalarParam(0.000295573424135051, unit="mmole*l**-1"),
       Myo_c = ScalarParam(0.00192322252438022, unit="mmole*l**-1"),
       Myo_m = ScalarParam(0.137560495022823, unit="mmole*l**-1"),
       SRB = ScalarParam(0.00217360235649355, unit="mmole*l**-1"))

states("Interface", "Junctional and SL Ca Buffers",
       SLL_j = ScalarParam(0.00740524521680039, unit="mmole*l**-1"),
       SLL_sl = ScalarParam(0.00990339304377132, unit="mmole*l**-1"),
       SLH_j = ScalarParam(0.0735890020284214, unit="mmole*l**-1"),
       SLH_sl = ScalarParam(0.114583623436917, unit="mmole*l**-1"))

states("Interface", "SR Ca Concentrations",
       Csqn_b = ScalarParam(1.19723145924432, unit="mmole*l**-1"),
       Ca_sr = ScalarParam(0.554760499828172, unit="mmole*l**-1"))

states("Interface", "Na Concentrations",
       Na_j = ScalarParam(8.40537012592918, unit="mmole*l**-1"),
       Na_sl = ScalarParam(8.40491910001025, unit="mmole*l**-1"),
       Na_i = ScalarParam(8.40513364344858, unit="mmole*l**-1"))

states("Interface", "K_Concentration",
       K_i = ScalarParam(120, unit="mmole*l**-1"))

states("Interface", "Ca Concentrations",
       Ca_j = ScalarParam(0.000175882395147342, unit="mmole*l**-1"),
       Ca_sl = ScalarParam(0.000106779509977354, unit="mmole*l**-1"),
       Ca_i = ScalarParam(8.72509677797499e-5, unit="mmole*l**-1"))

states("Interface", "Membrane potential",
       V_m = ScalarParam(-81.4552030512661, unit="mV"))

parameters("Interface", "Membrane potential",
           stim_start = ScalarParam(10, unit="ms"),
           stim_period = ScalarParam(1000, unit="ms"),
           stim_duration = ScalarParam(5, unit="ms"),
           stim_amplitude = ScalarParam(9.5, unit="uA*uF**-1"))

component("Interface", "Parameters")
epi = 1
R = 8314 # J*K**-1*kmole**-1
Frdy = 96485 # C*mole**-1
Temp = 310 # K
FoRT = Frdy/(R*Temp) # mV**-1
Cmem = 1.381e-10 # F
Qpow = (Temp - 310)/10
cellLength = 100 # umole
cellRadius = 10.25 # umole
junctionLength = 160e-3 # umole
junctionRadius = 15e-3 # umole
distSLcyto = 0.45 # umole
distJuncSL = 0.5 # umole
DcaJuncSL = 1.64e-6 # cm**2*s**-1
DcaSLcyto = 1.22e-6 # cm**2*s**-1
DnaJuncSL = 1.09e-5 # cm**2*s**-1
DnaSLcyto = 1.79e-5 # cm**2*s**-1
Vcell = pi*cellRadius**2*cellLength*1e-15 # l
Vmyo = 0.65*Vcell # l
Vsr = 0.035*Vcell # l
Vsl = 0.02*Vcell # l
Vjunc = 0.0539*0.01*Vcell # l
SAjunc = 20150*pi*2*junctionLength*junctionRadius # umole**2
SAsl = pi*2*cellRadius*cellLength # umole**2
J_ca_juncsl = 8.2413e-13 # l*ms**-1
J_ca_slmyo = 3.7243e-12 # l*ms**-1
J_na_juncsl = 1.8313e-14 # l*ms**-1
J_na_slmyo = 1.6386e-12 # l*ms**-1
Fjunc = 0.11
Fsl = 1 - Fjunc
Fjunc_CaL = 0.9
Fsl_CaL = 1 - Fjunc_CaL
Cli = 15 # mmole*l**-1
Clo = 150 # mmole*l**-1
Ko = 5.4 # mmole*l**-1
Nao = 140 # mmole*l**-1
Cao = 1.8 # mmole*l**-1
Mgi = 1 # mmole*l**-1
ena_junc = 1/FoRT*log(Nao/Na_j) # mV
ena_sl = 1/FoRT*log(Nao/Na_sl) # mV
ek = 1/FoRT*log(Ko/K_i) # mV
eca_junc = 1/FoRT/2*log(Cao/Ca_j) # mV
eca_sl = 1/FoRT/2*log(Cao/Ca_sl) # mV
ecl = 1/FoRT*log(Cli/Clo) # mV
GNa = 23 # mS*uF**-1
GNaB = 0.597e-3 # mS*uF**-1
IbarNaK = 1*1.8 # uA*uF**-1
KmNaip = 11 # mmole*l**-1
KmKo = 1.5 # mmole*l**-1
Q10NaK = 1.63
Q10KmNai = 1.39
pNaK = 0.01833
gkp = 2*0.001 # mS*uF**-1
GClCa = 0.5*0.109625 # mS*uF**-1
GClB = 1*9e-3 # mS*uF**-1
KdClCa = 100e-3 # mmole*l**-1
pNa = 0.5*1.5e-8 # cm*s**-1
pCa = 0.5*5.4e-4 # cm*s**-1
pK = 0.5*2.7e-7 # cm*s**-1
Q10CaL = 1.8
IbarNCX = 1*4.5 # uA*uF**-1
KmCai = 3.59e-3 # mmole*l**-1
KmCao = 1.3 # mmole*l**-1
KmNai = 12.29 # mmole*l**-1
KmNao = 87.5 # mmole*l**-1
ksat = 0.32
nu = 0.27
Kdact = 0.15e-3 # mmole*l**-1
Q10NCX = 1.57
IbarSLCaP = 0.0673 # uA*uF**-1
KmPCa = 0.5e-3 # mmole*l**-1
GCaB = 5.513e-4 # mS*uF**-1
Q10SLCaP = 2.35
Q10SRCaP = 2.6
Vmax_SRCaP = 5.3114e-3 # mmole*l**-1*ms**-1
Kmf = 0.246e-3 # mmole*l**-1
Kmr = 1.7 # mmole*l**-1
hillSRCaP = 1.787
ks = 25 # ms**-1
koCa = 10 # mmole**-2*l**2*ms**-1
kom = 0.06 # ms**-1
kiCa = 0.5 # mmole**-1*l*ms**-1
kim = 0.005 # ms**-1
ec50SR = 0.45 # mmole*l**-1
Bmax_Naj = 7.561 # mmole*l**-1
Bmax_Nasl = 1.65 # mmole*l**-1
koff_na = 1e-3 # ms**-1
kon_na = 0.1e-3 # mmole**-1*l*ms**-1
Bmax_TnClow = 70e-3 # mmole*l**-1
koff_tncl = 19.6e-3 # ms**-1
kon_tncl = 32.7 # mmole**-1*l*ms**-1
Bmax_TnChigh = 140e-3 # mmole*l**-1
koff_tnchca = 0.032e-3 # ms**-1
kon_tnchca = 2.37 # mmole**-1*l*ms**-1
koff_tnchmg = 3.33e-3 # ms**-1
kon_tnchmg = 3e-3 # mmole**-1*l*ms**-1
Bmax_CaM = 24e-3 # mmole*l**-1
koff_cam = 238e-3 # ms**-1
kon_cam = 34 # mmole**-1*l*ms**-1
Bmax_myosin = 140e-3 # mmole*l**-1
koff_myoca = 0.46e-3 # ms**-1
kon_myoca = 13.8 # mmole**-1*l*ms**-1
koff_myomg = 0.057e-3 # ms**-1
kon_myomg = 0.0157 # mmole**-1*l*ms**-1
Bmax_SR = 19*0.9e-3 # mmole*l**-1
koff_sr = 60e-3 # ms**-1
kon_sr = 100 # mmole**-1*l*ms**-1
Bmax_SLlowsl = 37.4e-3*Vmyo/Vsl # mmole*l**-1
Bmax_SLlowj = 4.6e-3*Vmyo/Vjunc*0.1 # mmole*l**-1
koff_sll = 1300e-3 # ms**-1
kon_sll = 100 # mmole**-1*l*ms**-1
Bmax_SLhighsl = 13.4e-3*Vmyo/Vsl # mmole*l**-1
Bmax_SLhighj = 1.65e-3*Vmyo/Vjunc*0.1 # mmole*l**-1
koff_slh = 30e-3 # ms**-1
kon_slh = 100 # mmole**-1*l*ms**-1
Bmax_Csqn = 140e-3*Vmyo/Vsr # mmole*l**-1
koff_csqn = 65 # ms**-1
kon_csqn = 100 # mmole**-1*l*ms**-1

component("Interface", "I_Na")
mss = 1/(1 + exp(-(56.86 + V_m)/9.03))**2
taum = 0.1292*exp(-((V_m + 45.79)/15.54)**2) + 0.06487*exp(-((V_m - 4.823)/51.12)**2) # ms
ah = Conditional(Ge(V_m, -40), 0, 0.057*exp(-(V_m + 80)/6.8))
bh = Conditional(Ge(V_m, -40), 0.77/(0.13*(1 + exp(-(V_m + 10.66)/11.1))), 2.7*exp(0.079*V_m) + 3.1e5*exp(0.3485*V_m))
tauh = 1/(ah + bh) # ms
hss = 1/(1 + exp((V_m + 71.55)/7.43))**2
aj = Conditional(Ge(V_m, -40), 0, (-2.5428e4*exp(0.2444*V_m) - 6.948e-6*exp(-0.04391*V_m))*(V_m + 37.78)/(1 + exp(0.311*(V_m + 79.23))))
bj = Conditional(Ge(V_m, -40), 0.6*exp(0.057*V_m)/(1 + exp(-0.1*(V_m + 32))), 0.02424*exp(-0.01052*V_m)/(1 + exp(-0.1378*(V_m + 40.14))))
tauj = 1/(aj + bj) # ms
jss = 1/(1 + exp((V_m + 71.55)/7.43))**2
dm_dt = (mss - m)/taum
dh_dt = (hss - h)/tauh
dj_dt = (jss - j)/tauj
I_Na_junc = Fjunc*GNa*m**3*h*j*(V_m - ena_junc) # uA*uF**-1
I_Na_sl = Fsl*GNa*m**3*h*j*(V_m - ena_sl) # uA*uF**-1
I_Na = I_Na_junc + I_Na_sl # uA*uF**-1

component("Interface", "I_NaBK")
I_nabk_junc = Fjunc*GNaB*(V_m - ena_junc) # uA*uF**-1
I_nabk_sl = Fsl*GNaB*(V_m - ena_sl) # uA*uF**-1
I_nabk = I_nabk_junc + I_nabk_sl # uA*uF**-1

component("Interface", "I_NaK")
sigma = (exp(Nao/67.3) - 1)/7
fnak = 1/(1 + 0.1245*exp(-0.1*V_m*FoRT) + 0.0365*sigma*exp(-V_m*FoRT))
I_nak_junc = Fjunc*IbarNaK*fnak*Ko/(1 + (KmNaip/Na_j)**4)/(Ko + KmKo) # uA*uF**-1
I_nak_sl = Fsl*IbarNaK*fnak*Ko/(1 + (KmNaip/Na_sl)**4)/(Ko + KmKo) # uA*uF**-1
I_nak = I_nak_junc + I_nak_sl # uA*uF**-1

component("Interface", "I_Kr")
gkr = 0.035*sqrt(Ko/5.4) # mS*uF**-1
xrss = 1/(1 + exp(-(V_m + 10)/5))
tauxr = 550/(1 + exp((-22 - V_m)/9))*6/(1 + exp((V_m - -11)/9)) + 230/(1 + exp((V_m - -40)/20)) # ms
dx_kr_dt = (xrss - x_kr)/tauxr
rkr = 1/(1 + exp((V_m + 74)/24))
I_kr = gkr*x_kr*rkr*(V_m - ek) # uA*uF**-1

component("Interface", "I_Kp")
kp_kp = 1/(1 + exp(7.488 - V_m/5.98))
I_kp_junc = Fjunc*gkp*kp_kp*(V_m - ek) # uA*uF**-1
I_kp_sl = Fsl*gkp*kp_kp*(V_m - ek) # uA*uF**-1
I_kp = I_kp_junc + I_kp_sl # uA*uF**-1

component("Interface", "I_Ks")
eks = 1/FoRT*log((Ko + pNaK*Nao)/(K_i + pNaK*Na_i)) # mV
gks_junc = 0.0035 # mS*uF**-1
gks_sl = 0.0035 # mS*uF**-1
xsss = 1/(1 + exp(-(V_m + 3.8)/14.25))
tauxs = 990.1/(1 + exp(-(V_m + 2.436)/14.12)) # ms
dx_ks_dt = (xsss - x_ks)/tauxs
I_ks_junc = Fjunc*gks_junc*x_ks**2*(V_m - eks) # uA*uF**-1
I_ks_sl = Fsl*gks_sl*x_ks**2*(V_m - eks) # uA*uF**-1
I_ks = I_ks_junc + I_ks_sl # uA*uF**-1

component("Interface", "I_to")
GtoSlow = Conditional(Eq(epi, 1), 1*0.13*0.12, 0.13*0.3*0.964) # mS*uF**-1
GtoFast = Conditional(Eq(epi, 1), 1*0.13*0.88, 0.13*0.3*0.036) # mS*uF**-1
xtoss = 1/(1 + exp(-(V_m - 19)/13))
ytoss = 1/(1 + exp((V_m + 19.5)/5))
tauxtos = 9/(1 + exp((V_m + 3)/15)) + 0.5 # ms
tauytos = 800/(1 + exp((V_m + 60)/10)) + 30 # ms
dx_to_s_dt = (xtoss - x_to_s)/tauxtos
dy_to_s_dt = (ytoss - y_to_s)/tauytos
I_tos = GtoSlow*x_to_s*y_to_s*(V_m - ek) # uA*uF**-1
tauxtof = 8.5*exp(-((V_m + 45)/50)**2) + 0.5 # ms
tauytof = 85*exp(-((V_m + 40)**2)/220) + 7 # ms
dx_to_f_dt = (xtoss - x_to_f)/tauxtof
dy_to_f_dt = (ytoss - y_to_f)/tauytof
I_tof = GtoFast*x_to_f*y_to_f*(V_m - ek) # uA*uF**-1
I_to = I_tos + I_tof # uA*uF**-1

component("Interface", "I_Ki")
aki = 1.02/(1 + exp(0.2385*(V_m - ek - 59.215)))
bki = (0.49124*exp(0.08032*(V_m + 5.476 - ek)) + exp(0.06175*(V_m - ek - 594.31)))/(1 + exp(-0.5143*(V_m - ek + 4.753)))
kiss = aki/(aki + bki)
I_ki = 1*0.35*sqrt(Ko/5.4)*kiss*(V_m - ek) # uA*uF**-1

component("Interface", "I_ClCa")
I_ClCa_junc = Fjunc*GClCa/(1 + KdClCa/Ca_j)*(V_m - ecl) # uA*uF**-1
I_ClCa_sl = Fsl*GClCa/(1 + KdClCa/Ca_sl)*(V_m - ecl) # uA*uF**-1
I_ClCa = I_ClCa_junc + I_ClCa_sl # uA*uF**-1
I_Clbk = GClB*(V_m - ecl) # uA*uF**-1

component("Interface", "I_Ca")
fss = 1/(1 + exp((V_m + 35)/9)) + 0.6/(1 + exp((50 - V_m)/20))
dss = 1/(1 + exp(-(V_m + 5)/6))
taud = 1*dss*(1 - exp(-(V_m + 5)/6))/(0.035*(V_m + 5)) # ms
tauf = 1/(0.0197*exp(-(0.0337*(V_m + 14.5))**2) + 0.02) # ms
dd_dt = (dss - d)/taud
df_dt = (fss - f)/tauf
df_Ca_Bj_dt = 1.7*Ca_j/1*(1 - f_Ca_Bj) - 11.9e-3*f_Ca_Bj
df_Ca_Bsl_dt = 1.7*Ca_sl/1*(1 - f_Ca_Bsl) - 11.9e-3*f_Ca_Bsl
fcaCaMSL = 0
fcaCaj = 0
ibarca_j = pCa*4*V_m*Frdy*FoRT*(0.341*Ca_j*exp(2*V_m*FoRT) - 0.341*Cao)/(exp(2*V_m*FoRT) - 1) # uA*uF**-1
ibarca_sl = pCa*4*V_m*Frdy*FoRT*(0.341*Ca_sl*exp(2*V_m*FoRT) - 0.341*Cao)/(exp(2*V_m*FoRT) - 1) # uA*uF**-1
ibark = pK*V_m*Frdy*FoRT*(0.75*K_i*exp(V_m*FoRT) - 0.75*Ko)/(exp(V_m*FoRT) - 1) # uA*uF**-1
ibarna_j = pNa*V_m*Frdy*FoRT*(0.75*Na_j*exp(V_m*FoRT) - 0.75*Nao)/(exp(V_m*FoRT) - 1) # uA*uF**-1
ibarna_sl = pNa*V_m*Frdy*FoRT*(0.75*Na_sl*exp(V_m*FoRT) - 0.75*Nao)/(exp(V_m*FoRT) - 1) # uA*uF**-1
I_Ca_junc = Fjunc_CaL*ibarca_j*d*f*(1 - f_Ca_Bj + fcaCaj)*Q10CaL**Qpow*0.45*1 # uA*uF**-1
I_Ca_sl = Fsl_CaL*ibarca_sl*d*f*(1 - f_Ca_Bsl + fcaCaMSL)*Q10CaL**Qpow*0.45*1 # uA*uF**-1
I_Ca = I_Ca_junc + I_Ca_sl # uA*uF**-1
I_CaK = ibark*d*f*(Fjunc_CaL*(fcaCaj + 1 - f_Ca_Bj) + Fsl_CaL*(fcaCaMSL + 1 - f_Ca_Bsl))*Q10CaL**Qpow*0.45*1 # uA*uF**-1
I_CaNa_junc = Fjunc_CaL*ibarna_j*d*f*(1 - f_Ca_Bj + fcaCaj)*Q10CaL**Qpow*0.45*1 # uA*uF**-1
I_CaNa_sl = Fsl_CaL*ibarna_sl*d*f*(1 - f_Ca_Bsl + fcaCaMSL)*Q10CaL**Qpow*0.45*1 # uA*uF**-1
I_CaNa = I_CaNa_junc + I_CaNa_sl # uA*uF**-1
I_Catot = I_Ca + I_CaK + I_CaNa # uA*uF**-1

component("Interface", "I_NCX")
Ka_junc = 1/(1 + (Kdact/Ca_j)**2)
Ka_sl = 1/(1 + (Kdact/Ca_sl)**2)
s1_junc = exp(nu*V_m*FoRT)*Na_j**3*Cao # mmole**4*l**-4
s1_sl = exp(nu*V_m*FoRT)*Na_sl**3*Cao # mmole**4*l**-4
s2_junc = exp((nu - 1)*V_m*FoRT)*Nao**3*Ca_j # mmole**4*l**-4
s3_junc = KmCai*Nao**3*(1 + (Na_j/KmNai)**3) + KmNao**3*Ca_j*(1 + Ca_j/KmCai) + KmCao*Na_j**3 + Na_j**3*Cao + Nao**3*Ca_j # mmole**4*l**-4
s2_sl = exp((nu - 1)*V_m*FoRT)*Nao**3*Ca_sl # mmole**4*l**-4
s3_sl = KmCai*Nao**3*(1 + (Na_sl/KmNai)**3) + KmNao**3*Ca_sl*(1 + Ca_sl/KmCai) + KmCao*Na_sl**3 + Na_sl**3*Cao + Nao**3*Ca_sl # mmole**4*l**-4
I_ncx_junc = Fjunc*IbarNCX*Q10NCX**Qpow*Ka_junc*(s1_junc - s2_junc)/s3_junc/(1 + ksat*exp((nu - 1)*V_m*FoRT)) # uA*uF**-1
I_ncx_sl = Fsl*IbarNCX*Q10NCX**Qpow*Ka_sl*(s1_sl - s2_sl)/s3_sl/(1 + ksat*exp((nu - 1)*V_m*FoRT)) # uA*uF**-1
I_ncx = I_ncx_junc + I_ncx_sl # uA*uF**-1

component("Interface", "I_PCa")
I_pca_junc = Fjunc*Q10SLCaP**Qpow*IbarSLCaP*Ca_j**1.6/(KmPCa**1.6 + Ca_j**1.6) # uA*uF**-1
I_pca_sl = Fsl*Q10SLCaP**Qpow*IbarSLCaP*Ca_sl**1.6/(KmPCa**1.6 + Ca_sl**1.6) # uA*uF**-1
I_pca = I_pca_junc + I_pca_sl # uA*uF**-1

component("Interface", "I_CaBK")
I_cabk_junc = Fjunc*GCaB*(V_m - eca_junc) # uA*uF**-1
I_cabk_sl = Fsl*GCaB*(V_m - eca_sl) # uA*uF**-1
I_cabk = I_cabk_junc + I_cabk_sl # uA*uF**-1

component("Interface", "SR Fluxes")
MaxSR = 15
MinSR = 1
kCaSR = MaxSR - (MaxSR - MinSR)/(1 + (ec50SR/Ca_sr)**2.5)
koSRCa = koCa/kCaSR # mmole**-2*l**2*ms**-1
kiSRCa = kiCa*kCaSR # mmole**-1*l*ms**-1
RI = 1 - Ry_Rr - Ry_Ro - Ry_Ri # mmole*l**-1
dRy_Rr_dt = kim*RI - kiSRCa*Ca_j*Ry_Rr - (koSRCa*Ca_j**2*Ry_Rr - kom*Ry_Ro)
dRy_Ro_dt = koSRCa*Ca_j**2*Ry_Rr - kom*Ry_Ro - (kiSRCa*Ca_j*Ry_Ro - kim*Ry_Ri)
dRy_Ri_dt = kiSRCa*Ca_j*Ry_Ro - kim*Ry_Ri - (kom*Ry_Ri - koSRCa*Ca_j**2*RI)
J_SRCarel = ks*Ry_Ro/1*(Ca_sr - Ca_j) # mmole*l**-1*ms**-1
J_serca = Q10SRCaP**Qpow*Vmax_SRCaP*((Ca_i/Kmf)**hillSRCaP - (Ca_sr/Kmr)**hillSRCaP)/(1 + (Ca_i/Kmf)**hillSRCaP + (Ca_sr/Kmr)**hillSRCaP) # mmole*l**-1*ms**-1
J_SRleak = 5.348e-6*(Ca_sr - Ca_j) # mmole*l**-1*ms**-1

component("Interface", "Na Buffers")
dNa_Bj_dt = kon_na*Na_j*(Bmax_Naj - Na_Bj) - koff_na*Na_Bj # mmole*l**-1*ms**-1
dNa_Bsl_dt = kon_na*Na_sl*(Bmax_Nasl - Na_Bsl) - koff_na*Na_Bsl # mmole*l**-1*ms**-1

component("Interface", "Cytosolic Ca Buffers")
dTn_CL_dt = kon_tncl*Ca_i*(Bmax_TnClow - Tn_CL) - koff_tncl*Tn_CL
dTn_CHc_dt = kon_tnchca*Ca_i*(Bmax_TnChigh - Tn_CHc - Tn_CHm) - koff_tnchca*Tn_CHc
dTn_CHm_dt = kon_tnchmg*Mgi*(Bmax_TnChigh - Tn_CHc - Tn_CHm) - koff_tnchmg*Tn_CHm
dCaM_dt = kon_cam*Ca_i*(Bmax_CaM - CaM) - koff_cam*CaM
dMyo_c_dt = kon_myoca*Ca_i*(Bmax_myosin - Myo_c - Myo_m) - koff_myoca*Myo_c
dMyo_m_dt = kon_myomg*Mgi*(Bmax_myosin - Myo_c - Myo_m) - koff_myomg*Myo_m
dSRB_dt = kon_sr*Ca_i*(Bmax_SR - SRB) - koff_sr*SRB
J_CaB_cytosol = kon_tncl*Ca_i*(Bmax_TnClow - Tn_CL) - koff_tncl*Tn_CL + kon_tnchca*Ca_i*(Bmax_TnChigh - Tn_CHc - Tn_CHm) - koff_tnchca*Tn_CHc + kon_tnchmg*Mgi*(Bmax_TnChigh - Tn_CHc - Tn_CHm) - koff_tnchmg*Tn_CHm + kon_cam*Ca_i*(Bmax_CaM - CaM) - koff_cam*CaM + kon_myoca*Ca_i*(Bmax_myosin - Myo_c - Myo_m) - koff_myoca*Myo_c + kon_myomg*Mgi*(Bmax_myosin - Myo_c - Myo_m) - koff_myomg*Myo_m + kon_sr*Ca_i*(Bmax_SR - SRB) - koff_sr*SRB # mmole*l**-1*ms**-1

component("Interface", "Junctional and SL Ca Buffers")
dSLL_j_dt = kon_sll*Ca_j*(Bmax_SLlowj - SLL_j) - koff_sll*SLL_j
dSLL_sl_dt = kon_sll*Ca_sl*(Bmax_SLlowsl - SLL_sl) - koff_sll*SLL_sl
dSLH_j_dt = kon_slh*Ca_j*(Bmax_SLhighj - SLH_j) - koff_slh*SLH_j
dSLH_sl_dt = kon_slh*Ca_sl*(Bmax_SLhighsl - SLH_sl) - koff_slh*SLH_sl
J_CaB_junction = kon_sll*Ca_j*(Bmax_SLlowj - SLL_j) - koff_sll*SLL_j + kon_slh*Ca_j*(Bmax_SLhighj - SLH_j) - koff_slh*SLH_j # mmole*l**-1*ms**-1
J_CaB_sl = kon_sll*Ca_sl*(Bmax_SLlowsl - SLL_sl) - koff_sll*SLL_sl + kon_slh*Ca_sl*(Bmax_SLhighsl - SLH_sl) - koff_slh*SLH_sl # mmole*l**-1*ms**-1

component("Interface", "SR Ca Concentrations")
dCsqn_b_dt = kon_csqn*Ca_sr*(Bmax_Csqn - Csqn_b) - koff_csqn*Csqn_b
dCa_sr_dt = J_serca - (J_SRleak*Vmyo/Vsr + J_SRCarel) - (kon_csqn*Ca_sr*(Bmax_Csqn - Csqn_b) - koff_csqn*Csqn_b)

component("Interface", "Na Concentrations")
I_Na_tot_junc = I_Na_junc + I_nabk_junc + 3*I_ncx_junc + 3*I_nak_junc + I_CaNa_junc # uA*uF**-1
I_Na_tot_sl = I_Na_sl + I_nabk_sl + 3*I_ncx_sl + 3*I_nak_sl + I_CaNa_sl # uA*uF**-1
I_Na_tot_sl2 = 3*I_ncx_sl + 3*I_nak_sl + I_CaNa_sl # uA*uF**-1
I_Na_tot_junc2 = 3*I_ncx_junc + 3*I_nak_junc + I_CaNa_junc # uA*uF**-1
dNa_j_dt = -I_Na_tot_junc*Cmem/(Vjunc*Frdy) + J_na_juncsl/Vjunc*(Na_sl - Na_j) - dNa_Bj_dt
dNa_sl_dt = -I_Na_tot_sl*Cmem/(Vsl*Frdy) + J_na_juncsl/Vsl*(Na_j - Na_sl) + J_na_slmyo/Vsl*(Na_i - Na_sl) - dNa_Bsl_dt
dNa_i_dt = J_na_slmyo/Vmyo*(Na_sl - Na_i)

component("Interface", "K_Concentration")
I_K_tot = I_to + I_kr + I_ks + I_ki - 2*I_nak + I_CaK + I_kp # uA*uF**-1
dK_i_dt = 0

component("Interface", "Ca Concentrations")
I_Ca_tot_junc = I_Ca_junc + I_cabk_junc + I_pca_junc - 2*I_ncx_junc # uA*uF**-1
I_Ca_tot_sl = I_Ca_sl + I_cabk_sl + I_pca_sl - 2*I_ncx_sl # uA*uF**-1
dCa_j_dt = -I_Ca_tot_junc*Cmem/(Vjunc*2*Frdy) + J_ca_juncsl/Vjunc*(Ca_sl - Ca_j) - J_CaB_junction + J_SRCarel*Vsr/Vjunc + J_SRleak*Vmyo/Vjunc
dCa_sl_dt = -I_Ca_tot_sl*Cmem/(Vsl*2*Frdy) + J_ca_juncsl/Vsl*(Ca_j - Ca_sl) + J_ca_slmyo/Vsl*(Ca_i - Ca_sl) - J_CaB_sl
dCa_i_dt = -J_serca*Vsr/Vmyo - J_CaB_cytosol + J_ca_slmyo/Vmyo*(Ca_sl - Ca_i)

component("Interface", "Membrane potential")
i_Stim = Conditional(And(Ge(time - floor(time/stim_period)*stim_period, stim_start), Le(time - floor(time/stim_period)*stim_period, stim_start + stim_duration), ), -stim_amplitude, 0) # uA*uF**-1
I_Na_tot = I_Na_tot_junc + I_Na_tot_sl # uA*uF**-1
I_Cl_tot = I_ClCa + I_Clbk # uA*uF**-1
I_Ca_tot = I_Ca_tot_junc + I_Ca_tot_sl # uA*uF**-1
I_tot = I_Na_tot + I_Cl_tot + I_Ca_tot + I_K_tot # uA*uF**-1
dV_m_dt = -(I_tot + i_Stim)
