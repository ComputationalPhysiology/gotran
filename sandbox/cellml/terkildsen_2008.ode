# Using Physiome standards to couple cellular functions for rat cardiac excitation-contraction
#
# ABSTRACT: Scientific endeavour is reliant upon the extension and reuse of
# previous knowledge. The formalization of this process for computational
# modelling is facilitated by the use of accepted standards with which to
# describe and simulate models, ensuring consistency between the models and thus
# reducing the development and propagation of errors. CellML 1.1, an XML-based
# programming language, has been designed as a modelling standard which, by
# virtue of its import and grouping functions, facilitates model combination and
# reuse. Using CellML 1.1, we demonstrate the process of formalized model reuse
# by combining three separate models of rat cardiomyocyte function (an
# electrophysiology model, a model of cellular calcium dynamics and a mechanics
# model) which together make up the Pandit-Hinch-Niederer et al. cell model. Not
# only is this integrative model of rat electromechanics a useful tool for
# cardiac modelling but it is also an ideal framework with which to demonstrate
# both the power of model reuse and the challenges associated with this process.
# We highlight and classify a number of these issues associated with combining
# models and provide some suggested solutions.
#
# Using Physiome standards to couple cellular functions for rat cardiac
# excitation-contraction, Jonna R. Terkildsen, Steven Niederer, Edmund J.
# Crampin, Peter Hunter and Nicolas P. Smith, 2008,Experimental Physiology, 93,
# 919-929.PubMed ID: 18344258
#
# A CellML 1.1 version of this model is also available, which imports components
# from the Pandit et al. 2001, Hinch et al. 2004 and Niederer et al. 2006 models
# into a parent model.
#

# gotran file generated by cellml2gotran from terkildsen_niederer_crampin_hunter_smith_2008.cellml

states("Pandit sodium current", "Sodium current j gate",
       j = 0.60876276)

parameters("Hinch Background Ca current",
           g_CaB = ScalarParam(2.6875e-8, unit="mmole*l**-1*ms**-1*mV**-1"))

states("Pandit Ca independent transient outward K current", "Ca independent transient outward K current s_slow gate",
       s_slow = 0.42756)

states("Pandit Ca independent transient outward K current", "Ca independent transient outward K current s gate",
       s = 0.8823)

states("Pandit Ca independent transient outward K current", "Ca independent transient outward K current r gate",
       r = 0.002542)

parameters("Pandit Ca independent transient outward K current",
           g_t = ScalarParam(0.035e-3, unit="mS"),
           a_endo = 0.583,
           b_endo = 0.417)

parameters("Pandit inward rectifier",
           g_K1 = ScalarParam(0.024e-3, unit="mS"))

parameters("Pandit sodium current",
           g_Na = ScalarParam(0.8e-3, unit="mS"))

parameters("Pandit sodium potassium pump",
           i_NaK_max = ScalarParam(0.95e-4, unit="uA"),
           K_m_K = ScalarParam(1.5, unit="mmole*l**-1"),
           K_m_Na = ScalarParam(10, unit="mmole*l**-1"))

parameters("Hinch Na Ca Exchanger",
           K_mNa = ScalarParam(87.5, unit="mmole*l**-1"),
           K_mCa = ScalarParam(1380e-3, unit="mmole*l**-1"),
           eta = 0.35,
           k_sat = 0.1,
           g_NCX = ScalarParam(38.5e-3, unit="mmole*l**-1*ms**-1"))

parameters("Cell geometry",
           V_myo = ScalarParam(25.85e3, unit="um**3"),
           V_SR = ScalarParam(2.098e3, unit="um**3"),
           V_myo_uL = ScalarParam(25.85e-6, unit="ul"),
           V_SR_uL = ScalarParam(2.098e-6, unit="ul"))

parameters("Pandit background currents",
           g_B_Na = ScalarParam(0.00008015e-3, unit="mS"),
           g_B_K = ScalarParam(0.000138e-3, unit="mS"))

parameters("Pandit hyperpolarisation activated current",
           g_f = ScalarParam(0.00145e-3, unit="mS"),
           f_Na = 0.2)

parameters("Hinch CaRU",
           g_D = ScalarParam(0.065, unit="um**3*ms**-1"),
           J_R = ScalarParam(0.02, unit="um**3*ms**-1"),
           J_L = ScalarParam(9.13e-4, unit="um**3*ms**-1"),
           N = 50000)

states("Pandit sodium current", "Sodium current m gate",
       m = 0.0054828)

states("Pandit steady state outward K current", "Steady state outward K current s_ss gate",
       s_ss = 0.266596)

parameters("Pandit steady state outward K current",
           g_ss = ScalarParam(0.007e-3, unit="mS"))

parameters("Hinch CaRU", "CaRU Transitions",
           V_L = ScalarParam(-2, unit="mV"),
           del_VL = ScalarParam(7, unit="mV"),
           phi_L = 2.35,
           t_L = ScalarParam(1, unit="ms"),
           tau_L = ScalarParam(650, unit="ms"),
           tau_R = ScalarParam(2.43, unit="ms"),
           phi_R = 0.05,
           theta_R = 0.012,
           K_RyR = ScalarParam(41e-3, unit="mmole*l**-1"),
           K_L = ScalarParam(0.22e-3, unit="mmole*l**-1"),
           a_CaRU = 0.0625,
           b = 14,
           c = 0.01,
           d = 100)

parameters("Hinch calmodulin Ca buffer",
           k_CMDN = ScalarParam(2.382e-3, unit="mmole*l**-1"),
           B_CMDN = ScalarParam(50e-3, unit="mmole*l**-1"))

states("Hinch CaRU", "CaRU reduced states",
       z_1 = 0.98794,
       z_2 = 0.00887,
       z_3 = 0.003156)

parameters("Niederer filament overlap",
           beta_0 = 4.9)

states("Pandit sodium current", "Sodium current h gate",
       h = 0.6095126)

parameters("Hinch SR Ca leak current",
           g_SRl = ScalarParam(1.8951e-5, unit="ms**-1"))

parameters("Pandit standard ionic concentrations",
           Na_o = ScalarParam(140, unit="mmole*l**-1"),
           Ca_o = ScalarParam(1.2, unit="mmole*l**-1"),
           K_o = ScalarParam(5.4, unit="mmole*l**-1"))

states("Pandit hyperpolarisation activated current", "Hyperpolarisation activated current y gate",
       y = 0.0026369)

states("Niederer tropomyosin",
       z = 0.020023)

parameters("Niederer tropomyosin",
           alpha_0 = ScalarParam(8e-3, unit="ms**-1"),
           alpha_r1 = ScalarParam(2e-3, unit="ms**-1"),
           alpha_r2 = ScalarParam(1.75e-3, unit="ms**-1"),
           n_Rel = 3,
           K_z = 0.15,
           n_Hill = 3,
           Ca_50ref = ScalarParam(1.05e-3, unit="mmole*l**-1"),
           z_p = 0.85,
           beta_1 = -4)

parameters("Niederer length independent tension",
           T_ref = ScalarParam(56.2, unit="N*mm**-2"))

states("Niederer Cross Bridges",
       Q_1 = 0,
       Q_2 = 0,
       Q_3 = 0)

parameters("Niederer Cross Bridges",
           a = 0.35,
           A_1 = -29,
           A_2 = 138,
           A_3 = 129,
           alpha_1 = ScalarParam(0.03, unit="ms**-1"),
           alpha_2 = ScalarParam(0.13, unit="ms**-1"),
           alpha_3 = ScalarParam(0.625, unit="ms**-1"))

parameters("Niederer troponin",
           Ca_TRPN_Max = ScalarParam(70e-3, unit="mmole*l**-1"),
           k_on = ScalarParam(100, unit="mmole**-1*l*ms**-1"),
           k_Ref_off = ScalarParam(0.2, unit="ms**-1"),
           gamma_trpn = 2)

parameters("Hinch SERCA",
           g_SERCA = ScalarParam(0.45e-3, unit="mmole*l**-1*ms**-1"),
           K_SERCA = ScalarParam(0.5e-3, unit="mmole*l**-1"))

states("Pandit steady state outward K current", "Steady state outward K current r_ss gate",
       r_ss = 0.0033545)

parameters("Hinch Sarcolemmal Ca pump",
           g_pCa = ScalarParam(0.0035e-3, unit="mmole*l**-1*ms**-1"),
           K_mpCa = ScalarParam(0.5e-3, unit="mmole*l**-1"))

states("Membrane",
       V = ScalarParam(-78.8, unit="mV"))

parameters("Membrane",
           R = ScalarParam(8314.5, unit="mJ*mole**-1*K**-1"),
           T = ScalarParam(295, unit="K"),
           F = ScalarParam(96487, unit="C*mole**-1"),
           Cm = ScalarParam(0.0001, unit="uF"),
           stim_duration = ScalarParam(10, unit="ms"),
           stim_amplitude = ScalarParam(-0.6e-3, unit="uA"))

states("Intracellular ion concentrations",
       Na_i = ScalarParam(11.28, unit="mmole*l**-1"),
       K_i = ScalarParam(138.7225, unit="mmole*l**-1"),
       TRPN = ScalarParam(0.0661796, unit="mmole*l**-1"),
       Ca_i = ScalarParam(0.00011423, unit="mmole*l**-1"),
       Ca_SR = ScalarParam(721.96e-3, unit="mmole*l**-1"))

component("Terkildsen 2008")
Ca_b = Ca_TRPN_Max - TRPN # mmole*l**-1
FVRT = F*V/(R*T)
FVRT_Ca = 2*FVRT

component("Pandit sodium current", "Sodium current j gate")
j_infinity = 1/(1 + exp((V + 76.1)/6.07))
tau_j = Conditional(Ge(V, -40), 11.63*(1 + exp(-0.1*(V + 32)))/exp(-0.0000002535*V), 3.49/((V + 37.78)/(1 + exp(0.311*(V + 79.23)))*(-127140*exp(0.2444*V) - 0.00003474*exp(-0.04391*V)) + 0.1212*exp(-0.01052*V)/(1 + exp(-0.1378*(V + 40.14))))) # ms
dj_dt = (j_infinity - j)/tau_j

component("Hinch Background Ca current")
E_Ca = R*T/(2*F)*log(Ca_o/Ca_i) # mV
hinch_I_CaB = g_CaB*(E_Ca - V) # mmole*l**-1*ms**-1

component("Pandit Ca independent transient outward K current", "Ca independent transient outward K current s_slow gate")
s_slow_infinity = 1/(1 + exp((V + 45.3)/6.8841))
tau_s_slow_endo = 3300*exp(-((V + 70)/30)**2) + 49 # ms
ds_slow_dt = (s_slow_infinity - s_slow)/tau_s_slow_endo

component("Pandit Ca independent transient outward K current", "Ca independent transient outward K current s gate")
s_infinity = 1/(1 + exp((V + 45.3)/6.8841))
tau_s_endo = 550*exp(-((V + 70)/25)**2) + 49 # ms
ds_dt = (s_infinity - s)/tau_s_endo

component("Pandit Ca independent transient outward K current", "Ca independent transient outward K current r gate")
r_infinity = 1/(1 + exp((V + 10.6)/-11.42))
tau_r = 1000/(45.16*exp(0.03577*(V + 50)) + 98.9*exp(-0.1*(V + 38))) # ms
dr_dt = (r_infinity - r)/tau_r

component("Pandit Ca independent transient outward K current")
g_t_endo = 0.4647*g_t # mS
E_K = R*T/F*log(K_o/K_i) # mV
I_t = g_t_endo*r*(a_endo*s + b_endo*s_slow)*(V - E_K) # uA

component("Pandit inward rectifier")
I_K1 = (48e-3/(exp((V + 37)/25) + exp((V + 37)/-25)) + 10e-3)*0.001/(1 + exp((V - (E_K + 76.77))/-17)) + g_K1*(V - (E_K + 1.73))/((1 + exp(1.613*F*(V - (E_K + 1.73))/(R*T)))*(1 + exp((K_o - 0.9988)/-0.124))) # uA

component("Hinch CaRU", "LCC and RyR fluxes")
J_Rco = J_R*(Ca_SR - Ca_i)/(1 + J_R/g_D) # um**3*mmole*l**-1*ms**-1
J_Roo = Conditional(Gt(abs(FVRT_Ca), 0.00001), J_R*(Ca_SR - Ca_i + J_L/g_D*FVRT_Ca/(1 - exp(-FVRT_Ca))*(Ca_SR - Ca_o*exp(-FVRT_Ca)))/(1 + J_R/g_D + J_L/g_D*FVRT_Ca/(1 - exp(-FVRT_Ca))), J_R*(Ca_SR - Ca_i + J_L/g_D*0.00001/(1 - exp(-0.00001))*(Ca_SR - Ca_o*exp(-0.00001)))/(1 + J_R/g_D + J_L/g_D*0.00001/(1 - exp(-0.00001)))) # um**3*mmole*l**-1*ms**-1
J_Loc = Conditional(Gt(abs(FVRT_Ca), 0.00001), J_L*FVRT_Ca/(1 - exp(-FVRT_Ca))*(Ca_o*exp(-FVRT_Ca) - Ca_i)/(1 + J_L/g_D*FVRT_Ca/(1 - exp(-FVRT_Ca))), J_L*0.00001/(1 - exp(-0.00001))*(Ca_o*exp(-0.00001) - Ca_i)/(1 + J_L/g_D*0.00001/(1 - exp(-0.00001)))) # um**3*mmole*l**-1*ms**-1
J_Loo = Conditional(Gt(abs(FVRT_Ca), 0.00001), J_L*FVRT_Ca/(1 - exp(-FVRT_Ca))*(Ca_o*exp(-FVRT_Ca) - Ca_i + J_R/g_D*(Ca_o*exp(-FVRT_Ca) - Ca_SR))/(1 + J_R/g_D + J_L/g_D*FVRT_Ca/(1 - exp(FVRT_Ca))), J_L*0.00001/(1 - exp(-0.00001))*(Ca_o*exp(-0.00001) - Ca_i + J_R/g_D*(Ca_o*exp(-0.00001) - Ca_SR))/(1 + J_R/g_D + J_L/g_D*0.00001/(1 - exp(-0.00001)))) # um**3*mmole*l**-1*ms**-1

component("Pandit sodium current")
g_Na_endo = 1.33*g_Na # mS
E_Na = R*T/F*log(Na_o/Na_i) # mV
I_Na = g_Na_endo*m**3*h*j*(V - E_Na) # uA

component("Pandit sodium potassium pump")
sigma = (exp(Na_o/67.3) - 1)/7
I_NaK = i_NaK_max*1/(1 + 0.1245*exp(-0.1*V*F/(R*T)) + 0.0365*sigma*exp(-V*F/(R*T)))*K_o/(K_o + K_m_K)*1/(1 + (K_m_Na/Na_i)**4) # uA

component("Hinch Na Ca Exchanger")
hinch_I_NaCa = g_NCX*(exp(eta*FVRT)*Na_i**3*Ca_o - exp((eta - 1)*FVRT)*Na_o**3*Ca_i)/((Na_o**3 + K_mNa**3)*(Ca_o + K_mCa)*(1 + k_sat*exp((eta - 1)*FVRT))) # mmole*l**-1*ms**-1

component("Pandit background currents")
I_B_Na = g_B_Na*(V - E_Na) # uA
I_B_K = g_B_K*(V - E_K) # uA

component("Pandit hyperpolarisation activated current")
f_K = 1 - f_Na
I_f_Na = g_f*y*f_Na*(V - E_Na) # uA
I_f_K = g_f*y*f_K*(V - E_K) # uA
I_f = I_f_Na + I_f_K # uA

component("Pandit sodium current", "Sodium current m gate")
m_infinity = 1/(1 + exp((V + 45)/-6.5))
tau_m = 1.36/(0.32*(V + 47.13)/(1 - exp(-0.1*(V + 47.13))) + 0.08*exp(-V/11)) # ms
dm_dt = (m_infinity - m)/tau_m

component("Pandit steady state outward K current", "Steady state outward K current s_ss gate")
s_ss_infinity = 1/(1 + exp((V + 87.5)/10.3))
tau_s_ss = 2100 # ms
ds_ss_dt = (s_ss_infinity - s_ss)/tau_s_ss

component("Pandit steady state outward K current")
I_ss = g_ss*r_ss*s_ss*(V - E_K) # uA

component("Hinch CaRU", "DS Calcium Concentrations")
C_cc = Ca_i # mmole*l**-1
C_co = (Ca_i + J_R/g_D*Ca_SR)/(1 + J_R/g_D) # mmole*l**-1
C_oc = Conditional(Gt(abs(FVRT_Ca), 0.000000001), (Ca_i + J_L/g_D*Ca_o*FVRT_Ca*exp(-FVRT_Ca)/(1 - exp(-FVRT_Ca)))/(1 + J_L/g_D*FVRT_Ca/(1 - exp(-FVRT_Ca))), (Ca_i + J_L/g_D*Ca_o)/(1 + J_L/g_D)) # mmole*l**-1
C_oo = Conditional(Gt(abs(FVRT_Ca), 0.000000001), (Ca_i + J_R/g_D*Ca_SR + J_L/g_D*Ca_o*FVRT_Ca*exp(-FVRT_Ca)/(1 - exp(-FVRT_Ca)))/(1 + J_R/g_D + J_L/g_D*FVRT_Ca/(1 - exp(-FVRT_Ca))), (Ca_i + J_R/g_D*Ca_SR + J_L/g_D*Ca_o)/(1 + J_R/g_D + J_L/g_D)) # mmole*l**-1

component("Hinch CaRU", "CaRU Transitions")
expVL = exp((V - V_L)/del_VL)
t_R = 1.17*t_L # ms
alpha_p = expVL/(t_L*(expVL + 1)) # ms**-1
alpha_m = phi_L/t_L # ms**-1
beta_poc = C_oc**2/(t_R*(C_oc**2 + K_RyR**2)) # ms**-1
beta_pcc = Ca_i**2/(t_R*(Ca_i**2 + K_RyR**2)) # ms**-1
beta_m = phi_R/t_R # ms**-1
epsilon_pco = C_co*(expVL + a_CaRU)/(tau_L*K_L*(expVL + 1)) # ms**-1
epsilon_pcc = Ca_i*(expVL + a_CaRU)/(tau_L*K_L*(expVL + 1)) # ms**-1
epsilon_m = b*(expVL + a_CaRU)/(tau_L*(b*expVL + a_CaRU)) # ms**-1
mu_poc = (C_oc**2 + c*K_RyR**2)/(tau_R*(C_oc**2 + K_RyR**2)) # ms**-1
mu_pcc = (Ca_i**2 + c*K_RyR**2)/(tau_R*(Ca_i**2 + K_RyR**2)) # ms**-1
mu_moc = theta_R*d*(C_oc**2 + c*K_RyR**2)/(tau_R*(d*C_oc**2 + c*K_RyR**2)) # ms**-1
mu_mcc = theta_R*d*(Ca_i**2 + c*K_RyR**2)/(tau_R*(d*Ca_i**2 + c*K_RyR**2)) # ms**-1

component("Hinch calmodulin Ca buffer")
beta_CMDN = (1 + k_CMDN*B_CMDN/(k_CMDN + Ca_i)**2)**-1

component("Hinch CaRU", "CaRU states")
denom = (alpha_p + alpha_m)*((alpha_m + beta_m + beta_poc)*(beta_m + beta_pcc) + alpha_p*(beta_m + beta_poc)) # ms**-3
y_oc = alpha_p*beta_m*(alpha_p + alpha_m + beta_m + beta_pcc)/denom
y_co = alpha_m*(beta_pcc*(alpha_m + beta_m + beta_poc) + beta_poc*alpha_p)/denom
y_oo = alpha_p*(beta_poc*(alpha_p + beta_m + beta_pcc) + beta_pcc*alpha_m)/denom
y_cc = alpha_m*beta_m*(alpha_m + alpha_p + beta_m + beta_poc)/denom
y_ci = alpha_m/(alpha_p + alpha_m)
y_oi = alpha_p/(alpha_p + alpha_m)
y_ic = beta_m/(beta_pcc + beta_m)
y_io = beta_pcc/(beta_pcc + beta_m)
y_ii = 1 - y_oc - y_co - y_oo - y_cc - y_ci - y_ic - y_oi - y_io

component("Hinch CaRU", "RyR current")
J_R1 = y_oo*J_Roo + J_Rco*y_co # um**3*mmole*l**-1*ms**-1
J_R3 = J_Rco*beta_pcc/(beta_m + beta_pcc) # um**3*mmole*l**-1*ms**-1
hinch_I_RyR = (z_1*J_R1 + z_3*J_R3)*N/V_myo # mmole*l**-1*ms**-1

component("Hinch CaRU", "CaRU reduced states")
r_1 = y_oc*mu_poc + y_cc*mu_pcc # ms**-1
r_2 = (alpha_p*mu_moc + alpha_m*mu_mcc)/(alpha_p + alpha_m) # ms**-1
r_3 = beta_m*mu_pcc/(beta_m + beta_pcc) # ms**-1
r_4 = mu_mcc # ms**-1
r_5 = y_co*epsilon_pco + y_cc*epsilon_pcc # ms**-1
r_6 = epsilon_m # ms**-1
r_7 = alpha_m*epsilon_pcc/(alpha_p + alpha_m) # ms**-1
r_8 = epsilon_m # ms**-1
z_4 = 1 - z_1 - z_2 - z_3
dz_1_dt = -(r_1 + r_5)*z_1 + r_2*z_2 + r_6*z_3
dz_2_dt = r_1*z_1 - (r_2 + r_7)*z_2 + r_8*z_4
dz_3_dt = r_5*z_1 - (r_6 + r_3)*z_3 + r_4*z_4

component("Niederer Myofilaments")
ExtensionRatio = Conditional(Gt(time, 3e5), 1, 1)
lambda_prev = ExtensionRatio
dExtensionRatiodt = 0 # ms**-1
lambda_ = Conditional(And(Gt(ExtensionRatio, 0.8), Le(ExtensionRatio, 1.15), ), ExtensionRatio, Conditional(Gt(ExtensionRatio, 1.15), 1.15, 0.8))

component("Niederer filament overlap")
overlap = 1 + beta_0*(lambda_ - 1)

component("Pandit sodium current", "Sodium current h gate")
h_infinity = 1/(1 + exp((V + 76.1)/6.07))
tau_h = Conditional(Ge(V, -40), 0.4537*(1 + exp(-(V + 10.66)/11.1)), 3.49/(0.135*exp(-(V + 80)/6.8) + 3.56*exp(0.079*V) + 310000*exp(0.35*V))) # ms
dh_dt = (h_infinity - h)/tau_h

component("Hinch SR Ca leak current")
I_SR = g_SRl*(Ca_SR - Ca_i) # mmole*l**-1*ms**-1

component("Pandit hyperpolarisation activated current", "Hyperpolarisation activated current y gate")
y_infinity = 1/(1 + exp((V + 138.6)/10.48))
tau_y = 1000/(0.11885*exp((V + 80)/28.37) + 0.5623*exp((V + 80)/-14.19)) # ms
dy_dt = (y_infinity - y)/tau_y

component("Niederer tropomyosin")
K_2 = alpha_r2*z_p**n_Rel/(z_p**n_Rel + K_z**n_Rel)*(1 - n_Rel*K_z**n_Rel/(z_p**n_Rel + K_z**n_Rel)) # ms**-1
K_1 = alpha_r2*z_p**(n_Rel - 1)*n_Rel*K_z**n_Rel/(z_p**n_Rel + K_z**n_Rel)**2 # ms**-1
Ca_50 = Ca_50ref*(1 + beta_1*(lambda_ - 1)) # mmole*l**-1
Ca_TRPN_50 = Ca_50*Ca_TRPN_Max/(Ca_50 + k_Ref_off/k_on*(1 - (1 + beta_0*(lambda_ - 1))*0.5/gamma_trpn)) # mmole*l**-1
alpha_Tm = alpha_0*(Ca_b/Ca_TRPN_50)**n_Hill # ms**-1
beta_Tm = alpha_r1 + alpha_r2*z**(n_Rel - 1)/(z**n_Rel + K_z**n_Rel) # ms**-1
dz_dt = alpha_Tm*(1 - z) - beta_Tm*z
z_max = (alpha_0/(Ca_TRPN_50/Ca_TRPN_Max)**n_Hill - K_2)/(alpha_r1 + K_1 + alpha_0/(Ca_TRPN_50/Ca_TRPN_Max)**n_Hill)

component("Niederer length independent tension")
T_Base = T_ref*z/z_max # N*mm**-2

component("Niederer isometric tension")
T_0 = T_Base*overlap # N*mm**-2

component("Niederer Cross Bridges")
Q = Q_1 + Q_2 + Q_3
Tension = Conditional(Lt(Q, 0), T_0*(a*Q + 1)/(1 - Q), T_0*(1 + (a + 2)*Q)/(1 + Q)) # N*mm**-2
dQ_1_dt = A_1*dExtensionRatiodt - alpha_1*Q_1
dQ_2_dt = A_2*dExtensionRatiodt - alpha_2*Q_2
dQ_3_dt = A_3*dExtensionRatiodt - alpha_3*Q_3

component("Niederer troponin")
k_off = Conditional(Gt(1 - Tension/(gamma_trpn*T_ref), 0.1), k_Ref_off*(1 - Tension/(gamma_trpn*T_ref)), k_Ref_off*0.1) # ms**-1
I_TRPN = (Ca_TRPN_Max - TRPN)*k_off - Ca_i*TRPN*k_on # mmole*l**-1*ms**-1

component("Hinch SERCA")
I_SERCA = g_SERCA*Ca_i**2/(K_SERCA**2 + Ca_i**2) # mmole*l**-1*ms**-1

component("Hinch CaRU", "LCC current")
J_L1 = J_Loo*y_oo + J_Loc*y_oc # um**3*mmole*l**-1*ms**-1
J_L2 = J_Loc*alpha_p/(alpha_p + alpha_m) # um**3*mmole*l**-1*ms**-1
hinch_I_LCC = (z_1*J_L1 + z_2*J_L2)*N/V_myo # mmole*l**-1*ms**-1

component("Pandit steady state outward K current", "Steady state outward K current r_ss gate")
r_ss_infinity = 1/(1 + exp((V + 11.5)/-11.82))
tau_r_ss = 10000/(45.16*exp(0.03577*(V + 50)) + 98.9*exp(-0.1*(V + 38))) # ms
dr_ss_dt = (r_ss_infinity - r_ss)/tau_r_ss

component("Hinch Sarcolemmal Ca pump")
hinch_I_pCa = g_pCa*Ca_i/(K_mpCa + Ca_i) # mmole*l**-1*ms**-1

component("Convert hinch")
I_LCC = -1.5*hinch_I_LCC*2*V_myo_uL*F # uA
I_NaCa = hinch_I_NaCa*V_myo_uL*F # uA
I_pCa = hinch_I_pCa*2*V_myo_uL*F # uA
I_CaB = -hinch_I_CaB*2*V_myo_uL*F # uA
I_RyR = 1.5*hinch_I_RyR # mmole*l**-1*ms**-1

component("Membrane")
stim_period = Conditional(And(Ge(time, 5000), Le(time, 10000), ), 500, 1000) # ms
I_Stim = Conditional(And(Ge(time - floor(time/stim_period)*stim_period, 0), Le(time - floor(time/stim_period)*stim_period, stim_duration), ), stim_amplitude, 0) # uA
dV_dt = -(I_Na + I_t + I_ss + I_f + I_K1 + I_B_Na + I_B_K + I_NaK + I_Stim + I_CaB + I_NaCa + I_pCa + I_LCC)/Cm

component("Intracellular ion concentrations")
dNa_i_dt = -(I_Na + I_B_Na + I_NaCa*3 + I_NaK*3 + I_f_Na)*1/(V_myo_uL*F)
dK_i_dt = -(I_Stim + I_ss + I_B_K + I_t + I_K1 + I_f_K + -2*I_NaK)*1/(V_myo_uL*F)
dTRPN_dt = I_TRPN
dCa_i_dt = beta_CMDN*(I_RyR - I_SERCA + I_SR + I_TRPN - (-2*I_NaCa + I_pCa + I_CaB + I_LCC)/(2*V_myo_uL*F))
dCa_SR_dt = V_myo_uL/V_SR_uL*(-I_RyR + I_SERCA - I_SR)
