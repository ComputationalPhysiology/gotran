#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright (C) 2012 Johan Hake
#
# This file is part of Gotran.
#
# Gotran is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Gotran is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Gotran. If not, see <http://www.gnu.org/licenses/>.

# Gotran imports
from gotran2.input.cellml import CellMLParser

def define_parser(extract_equations, change_state_names):
    """
    Return a populated option parser
    """
    import optparse

    parser = optparse.OptionParser(\
        usage = "%prog [options]",
        description="Translate CellML files into gotran files.")

    def list_parser(option, opt_str, value, parser, arg_list):
        rargs = parser.rargs
        #print rargs
        while rargs:
            arg = rargs[0]

            # Stop if we hit an arg like "--par", i.e, PAR_PREFIX
            if arg[0] == "-" :
                break
            else:
                arg_list.append(rargs.pop(0))
                
    opt = parser.add_option("-e", "--extract-equations", \
                            help="Extract equations from components to prevent "\
                            "circular dependencies. Usage: -e FonRT RTonF",
                            action="callback",
                            callback=list_parser,
                            callback_args=(extract_equations,),
                            metavar="EQN1 EQN", )

    opt = parser.add_option("-c", "--change-state-names", \
                            help="Change the name locally of a state name. "\
                            "Usage: -c R",
                            action="callback",
                            callback=list_parser,
                            callback_args=(change_state_names,),
                            metavar="EQN1 EQN", )

    parser.add_option("-g", "--global-equations", help="Globally, instead of "\
                      "component wise, declared equations. Another "\
                      "option to avoid circular dependencies.",
                      action="store_true",
                      default=False, 
                      dest="global_equations")

    return parser

if __name__ == "__main__":
    import sys

    extract_equations = []
    change_state_names = []
    parser = define_parser(extract_equations, change_state_names)

    options, args =parser.parse_args()
    
    if options.global_equations:
        print "*** Warning: Option: --global-equations is not implemented."

    if len(args) != 1:
        print args
        raise ValueError("Expected 1 and only one CellML file.")

    cellml = CellMLParser(args[0], extract_equations=extract_equations, \
                          change_state_names=change_state_names)
    gotran_code = cellml.to_gotran()
    open("{0}.ode".format(cellml.name), \
         "w").write(gotran_code)
