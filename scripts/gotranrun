#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import division
__author__ = "Johan Hake (hake.dev@gmail.com)"
__date__ = "2013-03-13 -- 2013-06-12"
__copyright__ = "Copyright (C) 2013 " + __author__
__license__  = "GNU LGPL Version 3.0 or later"

from gotran import *
from modelparameters.codegeneration import latex
from scipy.integrate import odeint
import pylab
import numpy as np
import instant

def main(filename, params):

    # Set code parameters
    code_params = params.code.copy(True)
    code_params["generate_jacobian"] = params.use_jacobian
    
    # Compile executeable code from gotran ode
    ode = load_ode(filename)
    module = compile_module(ode, rhs_args="stp", **code_params)

    # Use scipy to integrate model
    t0 = 0.
    t1 = params.tstop
    dt = params.dt_plot

    rhs = module.rhs
    y0 = module.init_values()
    model_params = module.default_parameters()

    tsteps = np.linspace(t0, t1, t1/dt+1)
    if params.use_jacobian:
        results = odeint(rhs, y0, tsteps, Dfun=module.jacobian, args=(model_params,))
    else:
        results = odeint(rhs, y0, tsteps, args=(model_params,))

    # Plot results
    plot_states = params.plot_states
    if not plot_states:
        return 
    plot_inds = [module.state_indices(state) for state in plot_states]
    plot_results = [[] for state in plot_states]
    
    for res in results:
        for ind, plot_ind in enumerate(plot_inds):
            plot_results[ind].append(res[plot_ind])

    plot_args = []
    for plot_result in plot_results:
        plot_args.append(tsteps)
        plot_args.append(np.array(plot_result))
    pylab.plot(*plot_args)
    pylab.legend([latex(state) for state in plot_states])
    pylab.xlabel("time")
    #pylab.title(ode.name)
    pylab.show()

if __name__ == "__main__":
    import sys, os
    from modelparameters.parameterdict import *
    from gotran.codegeneration.oderepresentation import _default_params
    
    code_params = _default_params(["generate_jacobian", "generate_lu_factorization",
                                   "generate_linearized_evaluation",
                                   "generate_forward_backward_subst"])
    code_params = ParameterDict(
        language = OptionParam("Python", ["Python", "C"]),
        **code_params
        )
    params = ParameterDict(\
        tstop = ScalarParam(100., gt=0, description="Time for stopping simulation"),\
        dt_plot = ScalarParam(0.1, gt=0, description="Timestep for plotting."),\
        plot_states = Param(["V"], description="States to plot."),\
        use_jacobian = Param(True, description="Use analytic jacobian when integrating."),\
        code = code_params)
    params.parse_args(usage="usage: %prog FILE [options]")
    
    if len(sys.argv) < 2:
        raise RuntimeError("Expected a single gotran file argument")

    if not os.path.isfile(sys.argv[1]):
        raise IOError("Expected the argument to be a file")
	 
    file_name = sys.argv[1]
    main(file_name, params)
