#!/usr/bin/env python

import os

from gotran.codegeneration.oderepresentation import ODERepresentation, \
     _default_params
from gotran.codegeneration.codegenerator import CCodeGenerator
from gotran.model import load_ode

def main(filename, params):
    """
    Create a c header file from a gotran model
    """

    if not params.sympy_contraction:
        # A hack to avoid sympy contractions
        import gotran.codegeneration.avoidsympycontractions

    # Load Gotran model
    ode = load_ode(filename)

    # Check for completness
    if not ode.is_complete:
        return 

    # Create an ODE representation
    oderepr = ODERepresentation(ode, **params.copy(True))

    # Create a C code generator
    code_params = CCodeGenerator.default_params()
    code_params.rhs_args = params.rhs_args

    gen = CCodeGenerator(oderepr, code_params)

    output = params.output

    if output:
        if not(len(output)>2 and output[-2:] == ".h"):
            output += ".h"
    else:
        output = filename.replace(".ode", "")+".h"

    f = open(output, "w")
    f.write("#include \"math.h\"\n")
    f.write(gen.module_code())


if __name__ == "__main__":
    import sys
    from modelparameters.parameterdict import ParameterDict, OptionParam, Param
    
    params = _default_params(["generate_lu_factorization",
                              "generate_linearized_evaluation",
                              "generate_forward_backward_subst"])
    params = ParameterDict(\
        rhs_args = OptionParam("stp", ["tsp", "stp", "spt"], \
                description="Argument order of the generated rhs function. "\
                               "s=states, p=parameters, t=time"),
        sympy_contraction = Param(True, description="If True sympy contraction"\
                                  " will be used, turning (V-3)/2 into V/2-3/2"),\
        output = Param("", description="Specify output file name"),\
        **params)
    params.parse_args(usage="usage: %prog FILE [options]")#sys.argv[2:])
    
    if len(sys.argv) < 2:
        raise RuntimeError("Expected a single gotran file argument")

    if not os.path.isfile(sys.argv[1]):
        raise IOError("Expected the argument to be a file")
	 
    file_name = sys.argv[1]
    main(file_name, params)
