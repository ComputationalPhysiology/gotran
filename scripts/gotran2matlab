#!/usr/bin/env python

from gotran.codegeneration.oderepresentation import ODERepresentation, \
     _default_params
from gotran.codegeneration.codegenerator import MatlabCodeGenerator
from gotran.model import load_ode
from gotran import info

def main(filename, params):
    """
    Create a matlab code from a gotran model
    """

    if not params.sympy_contraction:
        # A hack to avoid sympy contractions
        import gotran.codegeneration.avoidsympycontractions

    # Load Gotran model
    ode = load_ode(filename)

    # Check for completness
    if not ode.is_complete:
        return 

    # Create an ODE representation
    oderepr = ODERepresentation(ode, **params.copy(True))

    # Create a Matlab Cell model code generator
    gen = MatlabCodeGenerator(oderepr)

    info("")
    info("Generating Matlab files for the {0} ode...".format(ode.name))
    open("{0}_default.m".format(ode.name), "w").write(gen.default_value_code())
    open("{0}.m".format(ode.name), "w").write(gen.dy_code())
    info("  done.")

if __name__ == "__main__":
    import os
    import sys

    from modelparameters.parameterdict import ParameterDict, Param

    params = _default_params()
    params = ParameterDict(\
        sympy_contraction = Param(False, description="If True sympy contraction"\
                                  " will be used, turning (V-3)/2 into V/2-3/2"),\
        **params)
    params.parse_args(usage="usage: %prog FILE [options]")#sys.argv[2:])
    
    if len(sys.argv) < 2:
        raise RuntimeError("Expected a single gotran file argument")

    if not os.path.isfile(sys.argv[1]):
        raise IOError("Expected the argument to be a file")
	 
    file_name = sys.argv[1]
    main(file_name, params)
